{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTokenMetadataOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get the metadata for a given token contract address (name, symbol, decimals, logo). */\nexports.getTokenMetadataOperation = {\n  method: 'GET',\n  name: 'getTokenMetadata',\n  id: 'getTokenMetadata',\n  groupName: 'token',\n  urlPathPattern: '/erc20/metadata',\n  urlSearchParamNames: ['chain', 'addresses'],\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    addresses: request.addresses.map(function (address) {\n      return dataTypes_1.EvmAddress.create(address, core).lowercase;\n    })\n  };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n  return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function (token) {\n    return {\n      token: dataTypes_1.Erc20Token.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(token)), {\n        contractAddress: token.address,\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core)\n      }), core),\n      blockNumber: token.block_number,\n      validated: token.validated\n    };\n  });\n}\nfunction serializeRequest(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    addresses: request.addresses.map(function (address) {\n      return dataTypes_1.EvmAddress.create(address, core).checksum;\n    })\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    addresses: jsonRequest.addresses.map(function (address) {\n      return dataTypes_1.EvmAddress.create(address, core);\n    })\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AA0BA;AACaA,iCAAyB,GAKlC;EACFC,MAAM,EAAE,KAAK;EACbC,IAAI,EAAE,kBAAkB;EACxBC,EAAE,EAAE,kBAAkB;EACtBC,SAAS,EAAE,OAAO;EAClBC,cAAc,EAAE,iBAAiB;EACjCC,mBAAmB,EAAE,CAAC,OAAO,EAAE,WAAW,CAAC;EAE3CC,mBAAmB;EACnBC,gBAAgB;EAChBC,kBAAkB;EAClBC,mBAAmB;CACpB;AAED;AAEA,SAASH,mBAAmB,CAACI,OAAgC,EAAEC,IAAU;EACvE,OAAO;IACLC,KAAK,EAAEC,mCAAgB,CAACC,OAAO,CAACJ,OAAO,CAACE,KAAK,EAAED,IAAI,CAAC,CAACI,MAAM;IAC3DC,SAAS,EAAEN,OAAO,CAACM,SAAS,CAACC,GAAG,CAAC,UAACC,OAAO;MAAK,6BAAU,CAACC,MAAM,CAACD,OAAO,EAAEP,IAAI,CAAC,CAACS,SAAS;IAA1C,CAA0C;GACzF;AACH;AAEA,SAASX,mBAAmB,CAACY,YAA0C,EAAEX,OAAgC,EAAEC,IAAU;EACnH,OAAO,CAACU,YAAY,aAAZA,YAAY,cAAZA,YAAY,GAAI,EAAE,EAAEJ,GAAG,CAAC,UAACK,KAAK;IACpC,OAAO;MACLA,KAAK,EAAEC,sBAAU,CAACJ,MAAM,uBAEjB,6BAAW,EAACG,KAAK,CAAC;QACrBE,eAAe,EAAEF,KAAK,CAACJ,OAAO;QAC9BN,KAAK,EAAEC,mCAAgB,CAACC,OAAO,CAACJ,OAAO,CAACE,KAAK,EAAED,IAAI;MAAC,IAEtDA,IAAI,CACL;MACDc,WAAW,EAAEH,KAAK,CAACI,YAAY;MAC/BC,SAAS,EAAEL,KAAK,CAACK;KAClB;EACH,CAAC,CAAC;AACJ;AAEA,SAASpB,gBAAgB,CAACG,OAAgC,EAAEC,IAAU;EACpE,OAAO;IACLC,KAAK,EAAEC,mCAAgB,CAACC,OAAO,CAACJ,OAAO,CAACE,KAAK,EAAED,IAAI,CAAC,CAACI,MAAM;IAC3DC,SAAS,EAAEN,OAAO,CAACM,SAAS,CAACC,GAAG,CAAC,UAACC,OAAO;MAAK,6BAAU,CAACC,MAAM,CAACD,OAAO,EAAEP,IAAI,CAAC,CAACiB,QAAQ;IAAzC,CAAyC;GACxF;AACH;AAEA,SAASpB,kBAAkB,CAACqB,WAAwC,EAAElB,IAAU;EAC9E,OAAO;IACLC,KAAK,EAAEW,oBAAQ,CAACJ,MAAM,CAACU,WAAW,CAACjB,KAAK,EAAED,IAAI,CAAC;IAC/CK,SAAS,EAAEa,WAAW,CAACb,SAAS,CAACC,GAAG,CAAC,UAACC,OAAO;MAAK,6BAAU,CAACC,MAAM,CAACD,OAAO,EAAEP,IAAI,CAAC;IAAhC,CAAgC;GACnF;AACH","names":["exports","method","name","id","groupName","urlPathPattern","urlSearchParamNames","getRequestUrlParams","serializeRequest","deserializeRequest","deserializeResponse","request","core","chain","EvmChainResolver_1","resolve","apiHex","addresses","map","address","create","lowercase","jsonResponse","token","dataTypes_1","contractAddress","blockNumber","block_number","validated","checksum","jsonRequest"],"sources":["../../../src/operations/token/getTokenMetadataOperation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}