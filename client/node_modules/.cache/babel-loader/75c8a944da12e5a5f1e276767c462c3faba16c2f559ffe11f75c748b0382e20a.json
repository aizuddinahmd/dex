{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvmNftTransfer = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar EvmAddress_1 = require(\"../EvmAddress\");\nvar EvmChain_1 = require(\"../EvmChain\");\nvar EvmNative_1 = require(\"../EvmNative\");\n/**\n * The EvmNftTransfer is a representation of a completed NFT transfer.\n *\n * @category DataType\n */\nvar EvmNftTransfer = /** @class */function () {\n  function EvmNftTransfer(data, core) {\n    this._data = EvmNftTransfer.parse(data, core);\n  }\n  /**\n   * Create a new instance of EvmNftTransfer from any valid transfer input\n   * @param data - the EvmNftTransferish type\n   * @example\n   * ```\n   * const transfer = EvmNftTransfer.create(data);\n   *```\n   */\n  EvmNftTransfer.create = function (data, core) {\n    if (data instanceof EvmNftTransfer) {\n      return data;\n    }\n    var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n    return new EvmNftTransfer(data, finalCore);\n  };\n  /**\n   * Check the equality between two NFT transfers. The compares the chain, blockHash, tokenId and logIndex.\n   * @param dataA - The first transfer to compare\n   * @param dataB - The second transfer to compare\n   * @example EvmNftTransfer.equals(dataA, dataB)\n   * @returns true if the transfers are equal, false otherwise\n   */\n  EvmNftTransfer.equals = function (dataA, dataB) {\n    var transferA = EvmNftTransfer.create(dataA);\n    var transferB = EvmNftTransfer.create(dataB);\n    if (!transferA.chain.equals(transferB.chain)) {\n      return false;\n    }\n    if (transferA.blockHash !== transferB.blockHash) {\n      return false;\n    }\n    if (transferA.tokenId !== transferB.tokenId) {\n      return false;\n    }\n    if (transferA.logIndex !== transferB.logIndex) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Checks the equality of the current transfer instance with another nft transfer\n   * @param data - the transfer to compare with\n   * @example transaction.equals(data)\n   * @returns true if the transfers are equal, false otherwise\n   */\n  EvmNftTransfer.prototype.equals = function (data) {\n    return EvmNftTransfer.equals(this, data);\n  };\n  /**\n   * @returns a JSON represention of the transfer.\n   * @example\n   * ```\n   * transfer.toJSON()\n   * ```\n   */\n  EvmNftTransfer.prototype.toJSON = function () {\n    var data = this._data;\n    return __assign(__assign({}, data), {\n      chain: data.chain.format(),\n      fromAddress: data.fromAddress ? data.fromAddress.format() : undefined,\n      toAddress: data.toAddress.format(),\n      tokenAddress: data.tokenAddress.format(),\n      value: data.value ? data.value.format() : undefined,\n      operator: data.operator ? data.operator.format() : undefined,\n      blockNumber: data.blockNumber.toString()\n    });\n  };\n  /**\n   * @returns a JSON represention of the transfer.\n   * @example\n   * ```\n   * transfer.format()\n   * ```\n   */\n  EvmNftTransfer.prototype.format = function () {\n    return this.toJSON();\n  };\n  Object.defineProperty(EvmNftTransfer.prototype, \"result\", {\n    /**\n     * @returns all the data without casting it to JSON.\n     * @example transfer.result\n     */\n    get: function () {\n      return this._data;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"chain\", {\n    /**\n     * @returns the chain of the transfer.\n     * @example transfer.chain // EvmChain\n     */\n    get: function () {\n      return this._data.chain;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"blockHash\", {\n    /**\n     * @returns the block hash of the transfer.\n     * @example transfer.blockHash // \"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e\"\n     */\n    get: function () {\n      return this._data.blockHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"blockNumber\", {\n    /**\n     * @returns the block number of the transfer.\n     * @example transfer.blockNumber // BigNumber\n     */\n    get: function () {\n      return this._data.blockNumber;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"blockTimestamp\", {\n    /**\n     * @returns the block timestamp of the transfer.\n     * @example transfer.blockTimestamp // Date\n     */\n    get: function () {\n      return this._data.blockTimestamp;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"fromAddress\", {\n    /**\n     * @returns the from address of the transfer.\n     * @example transfer.fromAddress // EvmAddress\n     */\n    get: function () {\n      return this._data.fromAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"toAddress\", {\n    /**\n     * @returns the to address of the transfer.\n     * @example transfer.toAddress // EvmAddress\n     */\n    get: function () {\n      return this._data.toAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"tokenAddress\", {\n    /**\n     * @returns the token address of the transfer.\n     * @example transfer.tokenAddress // EvmAddress\n     */\n    get: function () {\n      return this._data.tokenAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"tokenId\", {\n    /**\n     * @returns the token id of the transfer.\n     * @example transfer.tokenId // \"15\"\n     */\n    get: function () {\n      return this._data.tokenId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"amount\", {\n    /**\n     * @returns the amount of the transfer.\n     * @example transfer.amount // 1\n     */\n    get: function () {\n      return this._data.amount;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"value\", {\n    /**\n     * @returns the value of the transfer.\n     * @example transfer.value // EvmNative\n     */\n    get: function () {\n      return this._data.value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"logIndex\", {\n    /**\n     * @returns the log index of the transfer.\n     * @example transfer.logIndex // 0\n     */\n    get: function () {\n      return this._data.logIndex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"transactionHash\", {\n    /**\n     * @returns the transaction hash of the transfer.\n     * @example transfer.transactionHash // \"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e\"\n     */\n    get: function () {\n      return this._data.transactionHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"transactionIndex\", {\n    /**\n     * @returns the transaction index of the transfer.\n     * @example transfer.transactionIndex // 123\n     */\n    get: function () {\n      return this._data.transactionIndex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"transactionType\", {\n    /**\n     * @returns the transaction type of the transfer.\n     * @example transfer.transactionType // \"1\"\n     */\n    get: function () {\n      return this._data.transactionType;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"operator\", {\n    /**\n     * @returns the operator of the transfer.\n     * @example transfer.operator // EvmAddress\n     */\n    get: function () {\n      return this._data.operator;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTransfer.prototype, \"contractType\", {\n    /**\n     * @returns the contract type of the transfer.\n     * @example transfer.contractType // \"ERC721\"\n     */\n    get: function () {\n      return this._data.contractType;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  EvmNftTransfer.parse = function (data, core) {\n    return __assign(__assign({}, data), {\n      chain: EvmChain_1.EvmChain.create(data.chain, core),\n      amount: (0, common_core_1.maybe)(data.amount, function (amount) {\n        return +amount;\n      }),\n      blockNumber: common_core_1.BigNumber.create(data.blockNumber),\n      blockTimestamp: (0, common_core_1.dateInputToDate)(data.blockTimestamp),\n      transactionIndex: (0, common_core_1.maybe)(data.transactionIndex, function (index) {\n        return +index;\n      }),\n      transactionType: (0, common_core_1.maybe)(data.transactionType),\n      fromAddress: (0, common_core_1.maybe)(data.fromAddress, function (address) {\n        return EvmAddress_1.EvmAddress.create(address, core);\n      }),\n      toAddress: EvmAddress_1.EvmAddress.create(data.toAddress, core),\n      tokenAddress: EvmAddress_1.EvmAddress.create(data.tokenAddress, core),\n      value: (0, common_core_1.maybe)(data.value, EvmNative_1.EvmNative.create),\n      operator: (0, common_core_1.maybe)(data.operator, function (operator) {\n        return EvmAddress_1.EvmAddress.create(operator, core);\n      }),\n      logIndex: +data.logIndex\n    });\n  };\n  return EvmNftTransfer;\n}();\nexports.EvmNftTransfer = EvmNftTransfer;","map":{"version":3,"mappings":"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","names":["data","core","_data","EvmNftTransfer","parse","finalCore","common_core_1","getDefault","dataA","dataB","transferA","create","transferB","chain","equals","blockHash","tokenId","logIndex","format","fromAddress","undefined","toAddress","tokenAddress","value","operator","blockNumber","toString","toJSON","Object","blockTimestamp","amount","transactionHash","transactionIndex","transactionType","contractType","EvmChain_1","index","address","EvmAddress_1","EvmNative_1","exports"],"sources":["../../../src/dataTypes/EvmNftTransfer/EvmNftTransfer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}