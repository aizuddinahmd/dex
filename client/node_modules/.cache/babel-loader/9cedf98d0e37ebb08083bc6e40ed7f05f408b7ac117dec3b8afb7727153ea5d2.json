{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvmNftCollection = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar EvmAddress_1 = require(\"../EvmAddress\");\nvar EvmChain_1 = require(\"../EvmChain\");\n/**\n * The EvmNftCollection is a representation of an nft collection.\n *\n * @category DataType\n */\nvar EvmNftCollection = /** @class */function () {\n  function EvmNftCollection(data, core) {\n    this._data = EvmNftCollection.parse(data, core);\n  }\n  /**\n   * Create a new instance of EvmNftCollection from any valid transaction input\n   * @param data - the EvmNftCollectionish type\n   * @example const collection = EvmTransaction.create(data);\n   */\n  EvmNftCollection.create = function (data, core) {\n    if (data instanceof EvmNftCollection) {\n      return data;\n    }\n    var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n    return new EvmNftCollection(data, finalCore);\n  };\n  /**\n   * Check the equality between two Evm collections. It compares their hashes and collections.\n   * @param dataA - The first collection to compare\n   * @param dataB - The second collection to compare\n   * @example EvmNftCollection.equals(dataA, dataB)\n   */\n  EvmNftCollection.equals = function (dataA, dataB) {\n    var collectionA = EvmNftCollection.create(dataA);\n    var collectionB = EvmNftCollection.create(dataB);\n    if (!collectionA.chain.equals(collectionB.chain)) {\n      return false;\n    }\n    if (!collectionA.tokenAddress.equals(collectionB.tokenAddress)) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Checks the equality of the current collection with another evm collection\n   * @param data - the collection to compare with\n   * @example\n   * ```ts\n   * collection.equals(data)\n   * ```\n   */\n  EvmNftCollection.prototype.equals = function (data) {\n    return EvmNftCollection.equals(this, data);\n  };\n  /**\n   * @returns a JSON represention of the collection.\n   * @example\n   * ```\n   * collection.toJSON()\n   * ```\n   */\n  EvmNftCollection.prototype.toJSON = function () {\n    var data = this._data;\n    return __assign(__assign({}, data), {\n      chain: data.chain.format(),\n      tokenAddress: data.tokenAddress.format()\n    });\n  };\n  /**\n   * @returns a JSON represention of the collection.\n   * @example\n   * ```\n   * collection.format()\n   * ```\n   */\n  EvmNftCollection.prototype.format = function () {\n    return this.toJSON();\n  };\n  Object.defineProperty(EvmNftCollection.prototype, \"result\", {\n    /**\n     * @returns all the data without casting it to JSON.\n     * @example collection.result\n     */\n    get: function () {\n      return this._data;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftCollection.prototype, \"chain\", {\n    /**\n     * @returns the chain where the collection is deployed.\n     * @example collection.chain // EvmChain\n     */\n    get: function () {\n      return this._data.chain;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftCollection.prototype, \"tokenAddress\", {\n    /**\n     * @returns the token address of collection.\n     * @example collection.tokenAddress // EvmAddress\n     */\n    get: function () {\n      return this._data.tokenAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftCollection.prototype, \"contractType\", {\n    /**\n     * @returns the token type of collection.\n     * @example collection.tokenAddress // 'ERC721'\n     */\n    get: function () {\n      return this._data.contractType;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftCollection.prototype, \"name\", {\n    /**\n     * @returns the token name of collection.\n     * @example collection.tokenAddress // 'Test NFT'\n     */\n    get: function () {\n      return this._data.name;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftCollection.prototype, \"symbol\", {\n    /**\n     * @returns the token symbol of collection.\n     * @example collection.symbol // 'TEST'\n     */\n    get: function () {\n      return this._data.symbol;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  EvmNftCollection.parse = function (data, core) {\n    return __assign(__assign({}, data), {\n      tokenAddress: EvmAddress_1.EvmAddress.create(data.tokenAddress, core),\n      chain: EvmChain_1.EvmChain.create(data.chain, core),\n      contractType: (0, common_core_1.maybe)(data.contractType)\n    });\n  };\n  return EvmNftCollection;\n}();\nexports.EvmNftCollection = EvmNftCollection;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AASA;;;;;AAKA;EAgBE,0BAAYA,IAA2B,EAAEC,IAAU;IACjD,IAAI,CAACC,KAAK,GAAGC,gBAAgB,CAACC,KAAK,CAACJ,IAAI,EAAEC,IAAI,CAAC;EACjD;EAjBA;;;;;EAKOE,uBAAM,GAAb,UAAcH,IAAyB,EAAEC,IAAW;IAClD,IAAID,IAAI,YAAYG,gBAAgB,EAAE;MACpC,OAAOH,IAAI;;IAEb,IAAMK,SAAS,GAAGJ,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAIK,0BAAY,CAACC,UAAU,EAAE;IACnD,OAAO,IAAIJ,gBAAgB,CAACH,IAAI,EAAEK,SAAS,CAAC;EAC9C,CAAC;EAeD;;;;;;EAMOF,uBAAM,GAAb,UAAcK,KAA0B,EAAEC,KAA0B;IAClE,IAAMC,WAAW,GAAGP,gBAAgB,CAACQ,MAAM,CAACH,KAAK,CAAC;IAClD,IAAMI,WAAW,GAAGT,gBAAgB,CAACQ,MAAM,CAACF,KAAK,CAAC;IAElD,IAAI,CAACC,WAAW,CAACG,KAAK,CAACC,MAAM,CAACF,WAAW,CAACC,KAAK,CAAC,EAAE;MAChD,OAAO,KAAK;;IAGd,IAAI,CAACH,WAAW,CAACK,YAAY,CAACD,MAAM,CAACF,WAAW,CAACG,YAAY,CAAC,EAAE;MAC9D,OAAO,KAAK;;IAGd,OAAO,IAAI;EACb,CAAC;EAED;;;;;;;;EAQAZ,iCAAM,GAAN,UAAOH,IAAyB;IAC9B,OAAOG,gBAAgB,CAACW,MAAM,CAAC,IAAI,EAAEd,IAAI,CAAC;EAC5C,CAAC;EAED;;;;;;;EAOAG,iCAAM,GAAN;IACE,IAAMH,IAAI,GAAG,IAAI,CAACE,KAAK;IACvB,6BACKF,IAAI;MACPa,KAAK,EAAEb,IAAI,CAACa,KAAK,CAACG,MAAM,EAAE;MAC1BD,YAAY,EAAEf,IAAI,CAACe,YAAY,CAACC,MAAM;IAAE;EAE5C,CAAC;EAED;;;;;;;EAOAb,iCAAM,GAAN;IACE,OAAO,IAAI,CAACc,MAAM,EAAE;EACtB,CAAC;EAMDC,sBAAIf,oCAAM;IAJV;;;;SAIA;MACE,OAAO,IAAI,CAACD,KAAK;IACnB,CAAC;;;;EAMDgB,sBAAIf,mCAAK;IAJT;;;;SAIA;MACE,OAAO,IAAI,CAACD,KAAK,CAACW,KAAK;IACzB,CAAC;;;;EAMDK,sBAAIf,0CAAY;IAJhB;;;;SAIA;MACE,OAAO,IAAI,CAACD,KAAK,CAACa,YAAY;IAChC,CAAC;;;;EAMDG,sBAAIf,0CAAY;IAJhB;;;;SAIA;MACE,OAAO,IAAI,CAACD,KAAK,CAACiB,YAAY;IAChC,CAAC;;;;EAMDD,sBAAIf,kCAAI;IAJR;;;;SAIA;MACE,OAAO,IAAI,CAACD,KAAK,CAACkB,IAAI;IACxB,CAAC;;;;EAMDF,sBAAIf,oCAAM;IAJV;;;;SAIA;MACE,OAAO,IAAI,CAACD,KAAK,CAACmB,MAAM;IAC1B,CAAC;;;;EAjHMlB,sBAAK,GAAG,UAACH,IAA2B,EAAEC,IAAU;IAA2B,6BAC7ED,IAAI;MACPe,YAAY,EAAEO,uBAAU,CAACX,MAAM,CAACX,IAAI,CAACe,YAAY,EAAEd,IAAI,CAAC;MACxDY,KAAK,EAAEU,mBAAQ,CAACZ,MAAM,CAACX,IAAI,CAACa,KAAK,EAAEZ,IAAI,CAAC;MACxCkB,YAAY,EAAE,uBAAK,EAACnB,IAAI,CAACmB,YAAY;IAAC;EAJ0C,CAKhF;EA6GJ,uBAAC;CAAA,EAtID;AAAaK","names":["data","core","_data","EvmNftCollection","parse","finalCore","common_core_1","getDefault","dataA","dataB","collectionA","create","collectionB","chain","equals","tokenAddress","format","toJSON","Object","contractType","name","symbol","EvmAddress_1","EvmChain_1","exports"],"sources":["../../../src/dataTypes/EvmNftCollection/EvmNftCollection.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}