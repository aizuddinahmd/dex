{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvmAddress = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar address_1 = require(\"@ethersproject/address\");\nvar CommonEvmUtilsConfig_1 = require(\"../../config/CommonEvmUtilsConfig\");\n/**\n * A representation of an address on the EVM network.\n *\n * Use this class any time you work with an address, as it will provide utilities to validate the address,\n * and format it to lowercase and checksum format.\n *\n * @category DataType\n */\nvar EvmAddress = /** @class */function () {\n  function EvmAddress(address, config) {\n    this.config = config;\n    this._value = EvmAddress.parse(address);\n  }\n  Object.defineProperty(EvmAddress, \"ZERO_ADDRESS\", {\n    /**\n     * @returns EvmAddress instance of the zero address: \"0x0000000000000000000000000000000000000000\"\n     * @example `EvmAddress.ZERO_ADDRESS`\n     */\n    get: function () {\n      return EvmAddress.create('0x0000000000000000000000000000000000000000');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Create a new instance of EvmAddress from any valid address input\n   *\n   * @example\n   * ```\n   * const address = EvmAddress.create(\"0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359\")\n   * const address = EvmAddress.create(\"0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359\")\n   * const address = EvmAddress.ZERO_ADDRESS\n   * ```\n   */\n  EvmAddress.create = function (address, core) {\n    if (address instanceof EvmAddress) {\n      return address;\n    }\n    var finalCore = core || common_core_1.CoreProvider.getDefault();\n    return new EvmAddress(address, finalCore.config);\n  };\n  EvmAddress.parse = function (address) {\n    if (!(0, address_1.isAddress)(address)) {\n      throw new common_core_1.CoreError({\n        code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n        message: 'Invalid address provided'\n      });\n    }\n    return (0, address_1.getAddress)(address);\n  };\n  /**\n   * Check the equality between two Evm addresses\n   * @example `EvmAddress.equals(\"0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359\", \"0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359\")`\n   */\n  EvmAddress.equals = function (addressA, addressB) {\n    return EvmAddress.create(addressA)._value === EvmAddress.create(addressB)._value;\n  };\n  /**\n   * Checks the equality of the current address with another evm address\n   * @example `address.equals(\"0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359\")`\n   */\n  EvmAddress.prototype.equals = function (address) {\n    return EvmAddress.equals(this, address);\n  };\n  /**\n   * Formats the address to a specific format.\n   * If no formatStyle is provided as argument, it will use the `formatEvmAddress` set in the config.\n   * @example `address.format() // \"0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359\"`\n   */\n  EvmAddress.prototype.format = function (style) {\n    var formatStyle = style !== null && style !== void 0 ? style : this.config.get(CommonEvmUtilsConfig_1.CommonEvmUtilsConfig.formatEvmAddress);\n    if (formatStyle === 'checksum') {\n      return this.checksum;\n    }\n    if (formatStyle === 'lowercase') {\n      return this.lowercase;\n    }\n    throw new common_core_1.CoreError({\n      code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n      message: 'Cannot format address, invalid config.formatAddress'\n    });\n  };\n  Object.defineProperty(EvmAddress.prototype, \"checksum\", {\n    /**\n     * @returns the address value in checksum (EIP-55) format (see https://eips.ethereum.org/EIPS/eip-55)\n     * @example `address.checksum // \"0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359\"`\n     */\n    get: function () {\n      return this._value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmAddress.prototype, \"lowercase\", {\n    /**\n     * @returns the address value in lowercase format\n     * @example `address.lowercase // \"0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359\"`\n     */\n    get: function () {\n      return this._value.toLowerCase();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return EvmAddress;\n}();\nexports.EvmAddress = EvmAddress;","map":{"version":3,"mappings":";;;;;;AAAA;AASA;AACA;AAeA;;;;;;;;AAQA;EAgCE,oBAAmBA,OAAwB,EAAmBC,MAAc;IAAd,WAAM,GAANA,MAAM;IAClE,IAAI,CAACC,MAAM,GAAGC,UAAU,CAACC,KAAK,CAACJ,OAAO,CAAC;EACzC;EA7BAK,sBAAkBF,0BAAY;IAJ9B;;;;SAIA;MACE,OAAOA,UAAU,CAACG,MAAM,CAAC,4CAA4C,CAAC;IACxE,CAAC;;;;EAED;;;;;;;;;;EAUcH,iBAAM,GAApB,UAAqBH,OAAsB,EAAEO,IAAW;IACtD,IAAIP,OAAO,YAAYG,UAAU,EAAE;MACjC,OAAOH,OAAO;;IAEhB,IAAMQ,SAAS,GAAGD,IAAI,IAAIE,0BAAY,CAACC,UAAU,EAAE;IACnD,OAAO,IAAIP,UAAU,CAACH,OAAO,EAAEQ,SAAS,CAACP,MAAM,CAAC;EAClD,CAAC;EAWcE,gBAAK,GAApB,UAAqBH,OAAwB;IAC3C,IAAI,CAAC,uBAAS,EAACA,OAAO,CAAC,EAAE;MACvB,MAAM,IAAIS,uBAAS,CAAC;QAClBE,IAAI,EAAEF,2BAAa,CAACG,gBAAgB;QACpCC,OAAO,EAAE;OACV,CAAC;;IAEJ,OAAO,wBAAU,EAACb,OAAO,CAAC;EAC5B,CAAC;EAED;;;;EAIOG,iBAAM,GAAb,UAAcW,QAAuB,EAAEC,QAAuB;IAC5D,OAAOZ,UAAU,CAACG,MAAM,CAACQ,QAAQ,CAAC,CAACZ,MAAM,KAAKC,UAAU,CAACG,MAAM,CAACS,QAAQ,CAAC,CAACb,MAAM;EAClF,CAAC;EAED;;;;EAIAC,2BAAM,GAAN,UAAOH,OAAsB;IAC3B,OAAOG,UAAU,CAACa,MAAM,CAAC,IAAI,EAAEhB,OAAO,CAAC;EACzC,CAAC;EAED;;;;;EAKAG,2BAAM,GAAN,UAAOc,KAAwB;IAC7B,IAAMC,WAAW,GAAGD,KAAK,aAALA,KAAK,cAALA,KAAK,GAAI,IAAI,CAAChB,MAAM,CAACkB,GAAG,CAACC,2CAAoB,CAACC,gBAAgB,CAAC;IAEnF,IAAIH,WAAW,KAAK,UAAU,EAAE;MAC9B,OAAO,IAAI,CAACI,QAAQ;;IAGtB,IAAIJ,WAAW,KAAK,WAAW,EAAE;MAC/B,OAAO,IAAI,CAACK,SAAS;;IAGvB,MAAM,IAAId,uBAAS,CAAC;MAClBE,IAAI,EAAEF,2BAAa,CAACG,gBAAgB;MACpCC,OAAO,EAAE;KACV,CAAC;EACJ,CAAC;EAMDR,sBAAIF,gCAAQ;IAJZ;;;;SAIA;MACE,OAAO,IAAI,CAACD,MAAM;IACpB,CAAC;;;;EAMDG,sBAAIF,iCAAS;IAJb;;;;SAIA;MACE,OAAO,IAAI,CAACD,MAAM,CAACsB,WAAW,EAAE;IAClC,CAAC;;;;EACH,iBAAC;AAAD,CAAC,EAnGD;AAAaC","names":["address","config","_value","EvmAddress","parse","Object","create","core","finalCore","common_core_1","getDefault","code","INVALID_ARGUMENT","message","addressA","addressB","equals","style","formatStyle","get","CommonEvmUtilsConfig_1","formatEvmAddress","checksum","lowercase","toLowerCase","exports"],"sources":["../../../src/dataTypes/EvmAddress/EvmAddress.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}