{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BigNumberParser = void 0;\nvar Error_1 = require(\"../../Error\");\nvar BigNumberParser = /** @class */function () {\n  function BigNumberParser() {}\n  BigNumberParser.parseInt = function (value) {\n    assertNotEmpty(value);\n    if (typeof value === 'string') {\n      if (value.length === 0) {\n        throw createError('Value is empty');\n      }\n      var isNegativeHex = value.startsWith('-0x');\n      if (isNegativeHex) {\n        value = value.substring(1);\n      }\n      var result = BigInt(value);\n      if (isNegativeHex) {\n        result *= BigInt(-1);\n      }\n      return result;\n    }\n    return BigInt(value);\n  };\n  // TODO: refactor to reduce complexity\n  // eslint-disable-next-line complexity\n  BigNumberParser.parseDecimal = function (value, decimals) {\n    assertNotEmpty(value);\n    var multiplier = getMultiplier(decimals);\n    if (typeof value === 'number') {\n      return BigInt(value) * multiplier;\n    }\n    if (typeof value === 'bigint') {\n      return value * multiplier;\n    }\n    var isNegative = value.startsWith('-');\n    if (isNegative) {\n      value = value.substring(1);\n    }\n    var fragments = value.split('.');\n    if (fragments.length > 2) {\n      throw createError('Value has more than one dot');\n    }\n    if (fragments.some(function (fragment) {\n      return !fragment;\n    })) {\n      throw createError('Value has empty fragments');\n    }\n    var result;\n    if (fragments.length === 1) {\n      result = BigInt(fragments[0]) * multiplier;\n    } else {\n      var whole = fragments[0];\n      var fraction = fragments[1];\n      if (fraction.length > decimals) {\n        throw createError(\"Value has too long fractional part: \".concat(fraction.length, \", max: \").concat(decimals));\n      }\n      if (fraction.length < decimals) {\n        fraction = fraction.padEnd(decimals, '0');\n      }\n      result = BigInt(whole) * multiplier + BigInt(fraction);\n    }\n    if (isNegative) {\n      result *= BigInt(-1);\n    }\n    return result;\n  };\n  return BigNumberParser;\n}();\nexports.BigNumberParser = BigNumberParser;\nfunction assertNotEmpty(value) {\n  if (value === null) {\n    throw createError('Value is null');\n  }\n  if (value === undefined) {\n    throw createError('Value is undefined');\n  }\n}\nfunction getMultiplier(decimals) {\n  if (decimals < 0) {\n    throw createError('Invalid decimals');\n  }\n  // decimals = 0, multiplier = 1\n  // decimals = 1, multiplier = 10\n  // decimals = 2, multiplier = 100\n  // ...\n  var ten = BigInt(10);\n  var multiplier = BigInt(1);\n  while (decimals-- > 0) {\n    multiplier *= ten;\n  }\n  return multiplier;\n}\nfunction createError(message) {\n  return new Error_1.CoreError({\n    code: Error_1.CoreErrorCode.BIG_NUMBER_ERROR,\n    message: message\n  });\n}","map":{"version":3,"mappings":"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","names":["BigNumberParser","value","assertNotEmpty","length","createError","isNegativeHex","startsWith","substring","result","BigInt","decimals","multiplier","getMultiplier","isNegative","fragments","split","some","fragment","whole","fraction","padEnd","exports","undefined","ten","message","Error_1","code","BIG_NUMBER_ERROR"],"sources":["../../../src/dataTypes/BigNumber/BigNumberParser.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}