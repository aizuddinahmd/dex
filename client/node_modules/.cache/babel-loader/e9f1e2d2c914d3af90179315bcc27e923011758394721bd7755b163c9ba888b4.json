{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LogDocumentBuilder = void 0;\nvar LogDocumentValueFormatter_1 = require(\"./LogDocumentValueFormatter\");\nvar ParamNameResolver_1 = require(\"./ParamNameResolver\");\nvar LogRelatedId_1 = require(\"../common/LogRelatedId\");\nvar paramNames = ['id', 'name', 'logIndex', 'transactionHash', 'address', 'blockHash', 'blockTimestamp', 'blockNumber', 'confirmed', 'chainId'];\nvar restrictedParamNames = __spreadArray(__spreadArray([], paramNames, true), [\n// Some extra names\n'_id', 'uniqueId', 'updatedAt', 'createdAt', 'user', 'userId'], false);\nvar LogDocumentBuilder = /** @class */function () {\n  function LogDocumentBuilder() {}\n  LogDocumentBuilder.build = function (log, parsedLog, block, confirmed, chainId) {\n    var nameResolver = new ParamNameResolver_1.ParamNameResolver(restrictedParamNames);\n    var chain = Number(chainId);\n    var document = {\n      id: LogRelatedId_1.LogRelatedId.create(chain, log.transactionHash, log.logIndex),\n      name: parsedLog.name,\n      logIndex: parseInt(log.logIndex, 10),\n      transactionHash: log.transactionHash,\n      address: log.address,\n      blockHash: block.hash,\n      blockTimestamp: parseInt(block.timestamp, 10),\n      blockNumber: parseInt(block.number, 10),\n      confirmed: confirmed,\n      chainId: chain\n    };\n    nameResolver.iterate(parsedLog.params, function (safeParamName, paramValue) {\n      document[safeParamName] = LogDocumentValueFormatter_1.LogDocumentValueFormatter.format(paramValue);\n    });\n    return document;\n  };\n  return LogDocumentBuilder;\n}();\nexports.LogDocumentBuilder = LogDocumentBuilder;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAGA;AACA;AAEA;AAqBA,IAAMA,UAAU,GAA8B,CAC5C,IAAI,EACJ,MAAM,EACN,UAAU,EACV,iBAAiB,EACjB,SAAS,EACT,WAAW,EACX,gBAAgB,EAChB,aAAa,EACb,WAAW,EACX,SAAS,CACV;AAED,IAAMC,oBAAoB,mCACrBD,UAAU;AACb;AACA,KAAK,EACL,UAAU,EACV,WAAW,EACX,WAAW,EACX,MAAM,EACN,QAAQ,SACT;AAED;EAAA,+BAuBA;EAtBgBE,wBAAK,GAAnB,UAAoBC,GAAQ,EAAEC,SAAoB,EAAEC,KAAY,EAAEC,SAAkB,EAAEC,OAAe;IACnG,IAAMC,YAAY,GAAG,IAAIC,qCAAiB,CAACR,oBAAoB,CAAC;IAChE,IAAMS,KAAK,GAAGC,MAAM,CAACJ,OAAO,CAAC;IAE7B,IAAMK,QAAQ,GAAgB;MAC5BC,EAAE,EAAEC,2BAAY,CAACC,MAAM,CAACL,KAAK,EAAEP,GAAG,CAACa,eAAe,EAAEb,GAAG,CAACc,QAAQ,CAAC;MACjEC,IAAI,EAAEd,SAAS,CAACc,IAAI;MACpBD,QAAQ,EAAEE,QAAQ,CAAChB,GAAG,CAACc,QAAQ,EAAE,EAAE,CAAC;MACpCD,eAAe,EAAEb,GAAG,CAACa,eAAe;MACpCI,OAAO,EAAEjB,GAAG,CAACiB,OAAO;MACpBC,SAAS,EAAEhB,KAAK,CAACiB,IAAI;MACrBC,cAAc,EAAEJ,QAAQ,CAACd,KAAK,CAACmB,SAAS,EAAE,EAAE,CAAC;MAC7CC,WAAW,EAAEN,QAAQ,CAACd,KAAK,CAACqB,MAAM,EAAE,EAAE,CAAC;MACvCpB,SAAS;MACTC,OAAO,EAAEG;KACV;IAEDF,YAAY,CAACmB,OAAO,CAACvB,SAAS,CAACwB,MAAM,EAAE,UAACC,aAAa,EAAEC,UAAU;MAC/DlB,QAAQ,CAACiB,aAAa,CAAC,GAAGE,qDAAyB,CAACC,MAAM,CAACF,UAAU,CAAC;IACxE,CAAC,CAAC;IACF,OAAOlB,QAAQ;EACjB,CAAC;EACH,yBAAC;AAAD,CAAC,EAvBD;AAAaqB","names":["paramNames","restrictedParamNames","LogDocumentBuilder","log","parsedLog","block","confirmed","chainId","nameResolver","ParamNameResolver_1","chain","Number","document","id","LogRelatedId_1","create","transactionHash","logIndex","name","parseInt","address","blockHash","hash","blockTimestamp","timestamp","blockNumber","number","iterate","params","safeParamName","paramValue","LogDocumentValueFormatter_1","format","exports"],"sources":["../../../src/mapping/logs-processor/LogDocumentBuilder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}