{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBlockOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get the contents of a block given the block hash. */\nexports.getBlockOperation = {\n  method: 'GET',\n  name: 'getBlock',\n  id: 'getBlock',\n  groupName: 'block',\n  isNullable: true,\n  urlPathPattern: '/block/{blockNumberOrHash}',\n  urlPathParamNames: ['blockNumberOrHash'],\n  urlSearchParamNames: ['chain'],\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    blockNumberOrHash: request.blockNumberOrHash\n  };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n  var _a;\n  var data = (0, common_core_1.toCamelCase)(jsonResponse);\n  var chain = EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core);\n  // TODO: account for changes in api, now we have unknown types for addresses\n  // OR fix the types correctly in api\n  // I noticed that the docs comes with a type of \"string | unknown\" which automatically resolves to \"unknown\". I think we should fix this in the api, casting for now\n  return dataTypes_1.EvmBlock.create(__assign(__assign({}, data), {\n    chain: chain,\n    transactions: ((_a = data.transactions) !== null && _a !== void 0 ? _a : []).map(function (transaction) {\n      var _a;\n      return dataTypes_1.EvmTransaction.create({\n        cumulativeGasUsed: transaction.receiptCumulativeGasUsed,\n        gasPrice: transaction.gasPrice,\n        gasUsed: transaction.receiptGasUsed,\n        index: transaction.transactionIndex,\n        contractAddress: transaction.receiptContractAddress,\n        receiptRoot: transaction.receiptRoot,\n        receiptStatus: +transaction.receiptStatus,\n        chain: chain,\n        data: transaction.input,\n        from: transaction.fromAddress,\n        hash: transaction.hash,\n        nonce: transaction.nonce,\n        value: transaction.value,\n        blockHash: transaction.blockHash,\n        blockNumber: +transaction.blockNumber,\n        blockTimestamp: new Date(transaction.blockTimestamp),\n        gas: transaction.gas,\n        to: transaction.toAddress,\n        logs: ((_a = transaction.logs) !== null && _a !== void 0 ? _a : []).map(function (jsonLog) {\n          var log = (0, common_core_1.toCamelCase)(jsonLog);\n          return dataTypes_1.EvmTransactionLog.create({\n            chain: chain,\n            address: log.address,\n            blockHash: log.blockHash,\n            blockNumber: +log.blockNumber,\n            data: log.data,\n            topics: [log.topic0, log.topic1, log.topic2, log.topic3],\n            transactionHash: log.transactionHash,\n            blockTimestamp: log.blockTimestamp,\n            logIndex: +log.logIndex,\n            transactionIndex: +log.transactionIndex\n          });\n        })\n      }, core);\n    })\n  }), core);\n}\nfunction serializeRequest(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    blockNumberOrHash: request.blockNumberOrHash\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    blockNumberOrHash: jsonRequest.blockNumberOrHash\n  };\n}","map":{"version":3,"mappings":"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","names":["exports","method","name","id","groupName","isNullable","urlPathPattern","urlPathParamNames","urlSearchParamNames","getRequestUrlParams","serializeRequest","deserializeRequest","deserializeResponse","request","core","chain","EvmChainResolver_1","resolve","apiHex","blockNumberOrHash","jsonResponse","data","dataTypes_1","create","transactions","map","transaction","cumulativeGasUsed","receiptCumulativeGasUsed","gasPrice","gasUsed","receiptGasUsed","index","transactionIndex","contractAddress","receiptContractAddress","receiptRoot","receiptStatus","input","from","fromAddress","hash","nonce","value","blockHash","blockNumber","blockTimestamp","Date","gas","to","toAddress","logs","jsonLog","log","address","topics","topic0","topic1","topic2","topic3","transactionHash","logIndex","jsonRequest"],"sources":["../../../src/operations/block/getBlockOperation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}