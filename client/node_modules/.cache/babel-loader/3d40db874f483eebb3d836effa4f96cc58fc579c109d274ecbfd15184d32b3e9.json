{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvmStreamResultParser = void 0;\nvar common_evm_utils_1 = require(\"@moralisweb3/common-evm-utils\");\nvar StreamErc1155Approval_1 = require(\"../StreamErc1155Approval/StreamErc1155Approval\");\nvar StreamErc20Approval_1 = require(\"../StreamErc20Approval/StreamErc20Approval\");\nvar StreamErc20Transfer_1 = require(\"../StreamErc20Transfer/StreamErc20Transfer\");\nvar StreamErc721Approval_1 = require(\"../StreamErc721Approval/StreamErc721Approval\");\nvar StreamEvmInternalTransaction_1 = require(\"../StreamEvmInternalTransaction/StreamEvmInternalTransaction\");\nvar StreamEvmNftTransfer_1 = require(\"../StreamEvmNftTransfer/StreamEvmNftTransfer\");\nvar StreamEvmTransaction_1 = require(\"../StreamEvmTransaction/StreamEvmTransaction\");\nvar StreamEvmTransactionLog_1 = require(\"../StreamEvmTransactionLog/StreamEvmTransactionLog\");\nvar StreamNativeBalance_1 = require(\"../StreamNativeBalance\");\nvar EvmStreamResultParser = /** @class */function () {\n  function EvmStreamResultParser() {}\n  EvmStreamResultParser.parseChainId = function (value, core) {\n    // Only needed for the initial test-response where we get an empty string as chain\n    return value === '' ? common_evm_utils_1.EvmChain.ETHEREUM : common_evm_utils_1.EvmChain.create(value, core);\n  };\n  EvmStreamResultParser.parseErc20Transfers = function (value, chain) {\n    return value.map(function (transfer) {\n      return StreamErc20Transfer_1.StreamErc20Transfer.create(__assign({\n        chain: chain\n      }, transfer));\n    });\n  };\n  EvmStreamResultParser.parseErc20Approvals = function (value, chain) {\n    return value.map(function (approval) {\n      return StreamErc20Approval_1.StreamErc20Approval.create(__assign({\n        chain: chain\n      }, approval));\n    });\n  };\n  EvmStreamResultParser.parseNftTransfers = function (value, chain) {\n    return value.map(function (transfer) {\n      return StreamEvmNftTransfer_1.StreamEvmNftTransfer.create(__assign({\n        chain: chain\n      }, transfer));\n    });\n  };\n  EvmStreamResultParser.parseNftApprovals = function (value, chain) {\n    return {\n      ERC721: value.ERC721.map(function (approval) {\n        return StreamErc721Approval_1.StreamErc721Approval.create(__assign({\n          chain: chain\n        }, approval));\n      }),\n      ERC1155: value.ERC1155.map(function (approval) {\n        return StreamErc1155Approval_1.StreamErc1155Approval.create(__assign({\n          chain: chain\n        }, approval));\n      })\n    };\n  };\n  EvmStreamResultParser.parseBlock = function (value, chain) {\n    if (value.number === '') {\n      return common_evm_utils_1.EvmSimpleBlock.create({\n        chain: chain,\n        number: 0,\n        hash: '',\n        timestamp: '0'\n      });\n    }\n    return common_evm_utils_1.EvmSimpleBlock.create(__assign({\n      chain: chain\n    }, value));\n  };\n  EvmStreamResultParser.parseLogs = function (value, chain) {\n    return value.map(function (log) {\n      return StreamEvmTransactionLog_1.StreamEvmTransactionLog.create(__assign({\n        chain: chain\n      }, log));\n    });\n  };\n  EvmStreamResultParser.parseTransactions = function (value, chain) {\n    return value.map(function (transaction) {\n      return StreamEvmTransaction_1.StreamEvmTransaction.create(__assign({\n        chain: chain\n      }, transaction));\n    });\n  };\n  EvmStreamResultParser.parseInternalTransactions = function (value, chain) {\n    return value.map(function (transaction) {\n      return StreamEvmInternalTransaction_1.StreamEvmInternalTransaction.create(__assign({\n        chain: chain\n      }, transaction));\n    });\n  };\n  EvmStreamResultParser.parseNativeBalances = function (value) {\n    return value.map(function (nativeBalance) {\n      return StreamNativeBalance_1.StreamNativeBalance.create(nativeBalance);\n    });\n  };\n  var _a;\n  _a = EvmStreamResultParser;\n  EvmStreamResultParser.parse = function (value, core) {\n    var chain = _a.parseChainId(value.chainId, core);\n    return {\n      chain: chain,\n      erc20Transfers: _a.parseErc20Transfers(value.erc20Transfers, chain),\n      erc20Approvals: _a.parseErc20Approvals(value.erc20Approvals, chain),\n      nftTransfers: _a.parseNftTransfers(value.nftTransfers, chain),\n      /**\n       * @deprecated Will be removed. Use nftTokenApprovals\n       */\n      nftApprovals: _a.parseNftApprovals(value.nftApprovals, chain),\n      block: _a.parseBlock(value.block, chain),\n      logs: _a.parseLogs(value.logs, chain),\n      txs: _a.parseTransactions(value.txs, chain),\n      txsInternal: _a.parseInternalTransactions(value.txsInternal, chain),\n      abi: value.abi,\n      retries: value.retries,\n      confirmed: value.confirmed,\n      streamId: value.streamId,\n      tag: value.tag,\n      nativeBalances: _a.parseNativeBalances(value.nativeBalances)\n    };\n  };\n  return EvmStreamResultParser;\n}();\nexports.EvmStreamResultParser = EvmStreamResultParser;","map":{"version":3,"mappings":"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","names":["EvmStreamResultParser","value","core","common_evm_utils_1","ETHEREUM","create","chain","map","transfer","approval","StreamErc20Approval_1","ERC721","ERC1155","number","hash","timestamp","log","transaction","nativeBalance","_a","parseChainId","chainId","erc20Transfers","parseErc20Transfers","erc20Approvals","parseErc20Approvals","nftTransfers","parseNftTransfers","nftApprovals","parseNftApprovals","block","parseBlock","logs","parseLogs","txs","parseTransactions","txsInternal","parseInternalTransactions","abi","retries","confirmed","streamId","tag","nativeBalances","parseNativeBalances","exports"],"sources":["../../../src/dataTypes/EvmStreamResult/EvmStreamResultParser.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}