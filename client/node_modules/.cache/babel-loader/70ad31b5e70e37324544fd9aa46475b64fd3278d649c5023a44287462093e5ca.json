{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvmSignature = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar bytes_1 = require(\"@ethersproject/bytes\");\n/**\n * Represents of a signed EVM signature\n * Can be created with a valid r,s,v signature or a hex string\n */\nvar EvmSignature = /** @class */function () {\n  function EvmSignature(data) {\n    this._data = EvmSignature.parse(data);\n  }\n  EvmSignature.create = function (data) {\n    if (data instanceof EvmSignature) {\n      return data;\n    }\n    return new EvmSignature(data);\n  };\n  EvmSignature.equals = function (dataA, dataB) {\n    var signatureA = EvmSignature.create(dataA);\n    var signatureB = EvmSignature.create(dataB);\n    return signatureA.serialized === signatureB.serialized;\n  };\n  /**\n   * Checks the equality of the current transfer instance with another nft transfer\n   * @param data - the transfer to compare with\n   * @example transaction.equals(data)\n   * @returns true if the transfers are equal, false otherwise\n   */\n  EvmSignature.prototype.equals = function (data) {\n    return EvmSignature.equals(this, data);\n  };\n  Object.defineProperty(EvmSignature.prototype, \"r\", {\n    get: function () {\n      return this._data.r;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmSignature.prototype, \"s\", {\n    get: function () {\n      return this._data.s;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmSignature.prototype, \"v\", {\n    get: function () {\n      return this._data.v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmSignature.prototype, \"serialized\", {\n    get: function () {\n      return (0, bytes_1.joinSignature)(this._data);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  EvmSignature.prototype.toJSON = function () {\n    return {\n      r: this.r,\n      s: this.s,\n      v: this.v.toString()\n    };\n  };\n  EvmSignature.prototype.format = function () {\n    return this.serialized;\n  };\n  EvmSignature.parse = function (data) {\n    if (typeof data === 'string') {\n      return (0, bytes_1.splitSignature)(data);\n    }\n    return (0, bytes_1.splitSignature)({\n      r: (0, bytes_1.hexlify)(common_core_1.BigNumber.create(data.r).toBigInt()),\n      s: (0, bytes_1.hexlify)(common_core_1.BigNumber.create(data.s).toBigInt()),\n      v: +data.v\n    });\n  };\n  return EvmSignature;\n}();\nexports.EvmSignature = EvmSignature;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAOA;;;;AAIA;EAUE,sBAAYA,IAAuB;IACjC,IAAI,CAACC,KAAK,GAAGC,YAAY,CAACC,KAAK,CAACH,IAAI,CAAC;EACvC;EAXOE,mBAAM,GAAb,UAAcF,IAAqB;IACjC,IAAIA,IAAI,YAAYE,YAAY,EAAE;MAChC,OAAOF,IAAI;;IAEb,OAAO,IAAIE,YAAY,CAACF,IAAI,CAAC;EAC/B,CAAC;EAoBME,mBAAM,GAAb,UAAcE,KAAsB,EAAEC,KAAsB;IAC1D,IAAMC,UAAU,GAAGJ,YAAY,CAACK,MAAM,CAACH,KAAK,CAAC;IAC7C,IAAMI,UAAU,GAAGN,YAAY,CAACK,MAAM,CAACF,KAAK,CAAC;IAE7C,OAAOC,UAAU,CAACG,UAAU,KAAKD,UAAU,CAACC,UAAU;EACxD,CAAC;EAED;;;;;;EAMAP,6BAAM,GAAN,UAAOF,IAAqB;IAC1B,OAAOE,YAAY,CAACQ,MAAM,CAAC,IAAI,EAAEV,IAAI,CAAC;EACxC,CAAC;EAEDW,sBAAIT,2BAAC;SAAL;MACE,OAAO,IAAI,CAACD,KAAK,CAACW,CAAC;IACrB,CAAC;;;;EAEDD,sBAAIT,2BAAC;SAAL;MACE,OAAO,IAAI,CAACD,KAAK,CAACY,CAAC;IACrB,CAAC;;;;EAEDF,sBAAIT,2BAAC;SAAL;MACE,OAAO,IAAI,CAACD,KAAK,CAACa,CAAC;IACrB,CAAC;;;;EAEDH,sBAAIT,oCAAU;SAAd;MACE,OAAO,yBAAa,EAAC,IAAI,CAACD,KAAK,CAAC;IAClC,CAAC;;;;EAEDC,6BAAM,GAAN;IACE,OAAO;MACLU,CAAC,EAAE,IAAI,CAACA,CAAC;MACTC,CAAC,EAAE,IAAI,CAACA,CAAC;MACTC,CAAC,EAAE,IAAI,CAACA,CAAC,CAACC,QAAQ;KACnB;EACH,CAAC;EAEDb,6BAAM,GAAN;IACE,OAAO,IAAI,CAACO,UAAU;EACxB,CAAC;EAvDMP,kBAAK,GAAG,UAACF,IAAuB;IACrC,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MAC5B,OAAO,0BAAc,EAACA,IAAI,CAAC;;IAG7B,OAAO,0BAAc,EAAC;MACpBY,CAAC,EAAE,mBAAO,EAACI,uBAAS,CAACT,MAAM,CAACP,IAAI,CAACY,CAAC,CAAC,CAACK,QAAQ,EAAE,CAAC;MAC/CJ,CAAC,EAAE,mBAAO,EAACG,uBAAS,CAACT,MAAM,CAACP,IAAI,CAACa,CAAC,CAAC,CAACI,QAAQ,EAAE,CAAC;MAC/CH,CAAC,EAAE,CAACd,IAAI,CAACc;KACV,CAAC;EACJ,CAAC;EA8CH,mBAAC;CAAA,EAtED;AAAaI","names":["data","_data","EvmSignature","parse","dataA","dataB","signatureA","create","signatureB","serialized","equals","Object","r","s","v","toString","common_core_1","toBigInt","exports"],"sources":["../../../src/dataTypes/EvmSignature/EvmSignature.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}