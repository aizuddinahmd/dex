{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Erc20Value = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar Erc20_1 = require(\"../Erc20/Erc20\");\nvar EVM_ERC20_DEFAULT_DECIMALS = 18;\n/**\n * The Erc20Value class is a MoralisData that references to a the value of an Erc20Token\n * It holds data about the data about the amount of tokens and the number of decimals.\n *\n * @category DataType\n */\nvar Erc20Value = /** @class */function () {\n  function Erc20Value(amount, options, core) {\n    var _this = this;\n    var _a, _b, _c;\n    /**\n     * Displays the token in text format\n     * @returns the value and also the token symbol if available\n     * @example value.display();\n     */\n    this.display = function () {\n      if (!_this._token) {\n        return \"\".concat(_this.value);\n      }\n      return \"\".concat(_this.value, \" \").concat(_this._token.symbol);\n    };\n    this._value = Erc20Value.parse({\n      amount: amount,\n      decimals: (_c = (_a = options === null || options === void 0 ? void 0 : options.decimals) !== null && _a !== void 0 ? _a : (_b = options === null || options === void 0 ? void 0 : options.token) === null || _b === void 0 ? void 0 : _b.decimals) !== null && _c !== void 0 ? _c : EVM_ERC20_DEFAULT_DECIMALS,\n      token: options === null || options === void 0 ? void 0 : options.token\n    });\n    if (options === null || options === void 0 ? void 0 : options.token) {\n      this._token = Erc20_1.Erc20Token.create(options.token, core);\n    }\n  }\n  /**\n   * Create a new instance of Erc20Value from any valid input\n   * @param value - The value to create\n   * @param options - The options for the token\n   * @param core - The MoralisCore instance\n   * @example Erc20Value.create(1000, { decimals: 3 });\n   * @returns The created value\n   * @throws CoreError if the value is invalid\n   */\n  Erc20Value.create = function (value, options, core) {\n    if (value instanceof Erc20Value) {\n      return value;\n    }\n    return new Erc20Value(value, options, core);\n  };\n  /**\n   * Compares two Erc20Valueish instances.\n   * @param valueA - The first value to compare\n   * @param valueB - The second value to compare\n   * @returns True if the values are equal\n   * @example\n   * ```ts\n   * const valueA = Erc20Value.create(1000, { decimals: 3 });\n   * const valueB = Erc20Value.create(10000, { decimals: 4 });\n   * Erc20Value.equals(valueA, valueB); // true\n   * ```\n   */\n  Erc20Value.equals = function (valueA, valueB) {\n    var erc20ValueA = Erc20Value.create(valueA);\n    var erc20ValueB = Erc20Value.create(valueB);\n    return erc20ValueA.value === erc20ValueB.value;\n  };\n  /**\n   * Compares Erc20Value with current instance.\n   * @param value - The value to compare\n   * @returns True if the values are equal\n   * @example value.equals(valueA);\n   */\n  Erc20Value.prototype.equals = function (value) {\n    return Erc20Value.equals(this, value);\n  };\n  /**\n   * Convert the value to a number\n   * @returns the value in number format\n   * @example value.toNumber();\n   */\n  Erc20Value.prototype.toNumber = function () {\n    return +this.value;\n  };\n  /**\n   * Convert the value to a string\n   * @returns the value in string format\n   * @example value.toString();\n   */\n  Erc20Value.prototype.toString = function () {\n    return this.value;\n  };\n  /**\n   * Convert the value to a string\n   * @returns the value in string format\n   * @example value.format();\n   */\n  Erc20Value.prototype.format = function () {\n    return this.toString();\n  };\n  /**\n   * Displays the token in JSON format\n   * @returns the value and also the token if available\n   * @example value.toJSON();\n   */\n  Erc20Value.prototype.toJSON = function () {\n    if (this.token) {\n      return {\n        value: this.value,\n        token: this.token.toJSON()\n      };\n    }\n    return {\n      value: this.value\n    };\n  };\n  Object.defineProperty(Erc20Value.prototype, \"decimals\", {\n    /**\n     * @returns the token decimals\n     * @example value.decimals; // 15\n     */\n    get: function () {\n      return this._value.decimals;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Value.prototype, \"amount\", {\n    /**\n     * @returns the token amount\n     * @example value.amount; // BigNumber\n     */\n    get: function () {\n      return this._value.amount;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Value.prototype, \"value\", {\n    /**\n     * @returns the token value\n     * @example value.value; // \"1000\"\n     */\n    get: function () {\n      return this._value.amount.toDecimal(this.decimals);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Value.prototype, \"token\", {\n    /**\n     * @returns the token\n     * @example value.token; // Erc20Token\n     */\n    get: function () {\n      var _a;\n      return (_a = this._token) !== null && _a !== void 0 ? _a : null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Erc20Value.parse = function (_a) {\n    var amount = _a.amount,\n      decimals = _a.decimals,\n      token = _a.token;\n    if (token && token.decimals && +token.decimals !== +decimals) {\n      throw new common_core_1.CoreError({\n        code: common_core_1.CoreErrorCode.INVALID_DATA,\n        message: 'Decimals do not match'\n      });\n    }\n    return {\n      amount: common_core_1.BigNumber.create(amount),\n      decimals: +decimals\n    };\n  };\n  return Erc20Value;\n}();\nexports.Erc20Value = Erc20Value;","map":{"version":3,"mappings":"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","names":["EVM_ERC20_DEFAULT_DECIMALS","amount","options","core","_this","_token","value","symbol","_value","Erc20Value","parse","decimals","token","Erc20_1","create","valueA","valueB","erc20ValueA","erc20ValueB","equals","toString","toJSON","Object","toDecimal","_a","common_core_1","code","INVALID_DATA","message","exports"],"sources":["../../../src/dataTypes/Erc20Value/Erc20Value.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}