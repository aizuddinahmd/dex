{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SolAddress = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar PublicKey_1 = require(\"../../utils/PublicKey\");\n/**\n * A representation of an address on the Solana network.\n *\n * Use this class any time you work with an address.\n *\n * @category DataType\n */\nvar SolAddress = /** @class */function () {\n  function SolAddress(address) {\n    this.address = address;\n  }\n  /**\n   * Create a new instance of SolAddress from any valid address input.\n   *\n   * @example `const address = SolAddress.create(\"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\")`\n   * @throws an error when a passed address is invalid.\n   */\n  SolAddress.create = function (address) {\n    return address instanceof SolAddress ? address : new SolAddress(SolAddress.parse(address));\n  };\n  SolAddress.parse = function (address) {\n    try {\n      var publicKey = new PublicKey_1.PublicKey(address);\n      return publicKey.toBase58();\n    } catch (e) {\n      throw new common_core_1.CoreError({\n        code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n        message: \"Invalid Solana address provided: \".concat(address),\n        cause: e\n      });\n    }\n  };\n  /**\n   * Formats the address to a specific format.\n   * Currently returns a string representing the address.\n   * @example address.format(); // \"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\"\n   */\n  SolAddress.prototype.format = function () {\n    // TODO: add `format` argument\n    return this.address;\n  };\n  /**\n   * Checks the equality of the current address with another Solana address.\n   * @example `address.equals(\"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\")`\n   * @example `address.equals(SolAddress.create(\"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\"))`\n   */\n  SolAddress.prototype.equals = function (address) {\n    return this.address === SolAddress.create(address).address;\n  };\n  /**\n   * @returns a string representing the address.\n   * @example address.toString(); // \"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\"\n   */\n  SolAddress.prototype.toString = function () {\n    return this.address;\n  };\n  /**\n   * @returns a string representing the address.\n   * @example address.toJSON(); // \"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\"\n   */\n  SolAddress.prototype.toJSON = function () {\n    return this.address;\n  };\n  return SolAddress;\n}();\nexports.SolAddress = SolAddress;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAWA;;;;;;;AAOA;EAwBE,oBAAmCA,OAAe;IAAf,YAAO,GAAPA,OAAO;EAAW;EAvBrD;;;;;;EAMcC,iBAAM,GAApB,UAAqBD,OAAsB;IACzC,OAAOA,OAAO,YAAYC,UAAU,GAAGD,OAAO,GAAG,IAAIC,UAAU,CAACA,UAAU,CAACC,KAAK,CAACF,OAAO,CAAC,CAAC;EAC5F,CAAC;EAEcC,gBAAK,GAApB,UAAqBD,OAAe;IAClC,IAAI;MACF,IAAMG,SAAS,GAAG,IAAIC,qBAAS,CAACJ,OAAO,CAAC;MACxC,OAAOG,SAAS,CAACE,QAAQ,EAAE;KAC5B,CAAC,OAAOC,CAAC,EAAE;MACV,MAAM,IAAIC,uBAAS,CAAC;QAClBC,IAAI,EAAED,2BAAa,CAACE,gBAAgB;QACpCC,OAAO,EAAE,2CAAoCV,OAAO,CAAE;QACtDW,KAAK,EAAEL;OACR,CAAC;;EAEN,CAAC;EAID;;;;;EAKOL,2BAAM,GAAb;IACE;IACA,OAAO,IAAI,CAACD,OAAO;EACrB,CAAC;EAED;;;;;EAKOC,2BAAM,GAAb,UAAcD,OAAsB;IAClC,OAAO,IAAI,CAACA,OAAO,KAAKC,UAAU,CAACW,MAAM,CAACZ,OAAO,CAAC,CAACA,OAAO;EAC5D,CAAC;EAED;;;;EAIOC,6BAAQ,GAAf;IACE,OAAO,IAAI,CAACD,OAAO;EACrB,CAAC;EAED;;;;EAIOC,2BAAM,GAAb;IACE,OAAO,IAAI,CAACD,OAAO;EACrB,CAAC;EACH,iBAAC;AAAD,CAAC,EA5DD;AAAaa","names":["address","SolAddress","parse","publicKey","PublicKey_1","toBase58","e","common_core_1","code","INVALID_ARGUMENT","message","cause","create","exports"],"sources":["../../../src/dataTypes/SolAddress/SolAddress.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}