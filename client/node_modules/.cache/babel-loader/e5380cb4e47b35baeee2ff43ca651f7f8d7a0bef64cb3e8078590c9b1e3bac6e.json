{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPairAddressOperation = void 0;\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/**\n * Fetch the pair data of the provided token0+token1 combination.\n * The token0 and token1 options are interchangable (ie. there is no different outcome in \"token0=WETH and token1=USDT\" or \"token0=USDT and token1=WETH\")\n */\nexports.getPairAddressOperation = {\n  method: 'GET',\n  name: 'getPairAddress',\n  id: 'getPairAddress',\n  groupName: 'defi',\n  urlPathPattern: '/{token0Address}/{token1Address}/pairAddress',\n  urlPathParamNames: ['token0Address', 'token1Address'],\n  urlSearchParamNames: ['chain', 'toBlock', 'toDate', 'exchange'],\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    to_block: request.toBlock,\n    to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,\n    exchange: request.exchange,\n    token0Address: dataTypes_1.EvmAddress.create(request.token0Address, core).lowercase,\n    token1Address: dataTypes_1.EvmAddress.create(request.token1Address, core).lowercase\n  };\n}\nfunction createErc20Token(token, core, chain) {\n  var _a, _b, _c;\n  return dataTypes_1.Erc20Token.create({\n    contractAddress: (token === null || token === void 0 ? void 0 : token.address) ? dataTypes_1.EvmAddress.create(token === null || token === void 0 ? void 0 : token.address, core) : '',\n    decimals: (_a = token === null || token === void 0 ? void 0 : token.decimals) !== null && _a !== void 0 ? _a : 0,\n    name: (_b = token === null || token === void 0 ? void 0 : token.name) !== null && _b !== void 0 ? _b : '',\n    symbol: (_c = token === null || token === void 0 ? void 0 : token.symbol) !== null && _c !== void 0 ? _c : '',\n    logo: token === null || token === void 0 ? void 0 : token.logo,\n    thumbnail: token === null || token === void 0 ? void 0 : token.thumbnail,\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(chain, core)\n  }, core);\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n  var _a, _b, _c, _d, _e, _f, _g, _h;\n  return {\n    //   ApiResult types generated all come as undefined which should not be the case TODO:\n    token0: {\n      token: createErc20Token(jsonResponse.token0, core, request.chain),\n      blockNumber: (_a = jsonResponse.token0) === null || _a === void 0 ? void 0 : _a.block_number,\n      validated: (_b = jsonResponse.token0) === null || _b === void 0 ? void 0 : _b.validated,\n      createdAt: ((_c = jsonResponse.token0) === null || _c === void 0 ? void 0 : _c.created_at) ? new Date((_d = jsonResponse.token0) === null || _d === void 0 ? void 0 : _d.created_at) : undefined\n    },\n    token1: {\n      token: createErc20Token(jsonResponse.token1, core, request.chain),\n      blockNumber: (_e = jsonResponse.token1) === null || _e === void 0 ? void 0 : _e.block_number,\n      validated: (_f = jsonResponse.token1) === null || _f === void 0 ? void 0 : _f.validated,\n      createdAt: ((_g = jsonResponse.token1) === null || _g === void 0 ? void 0 : _g.created_at) ? new Date((_h = jsonResponse.token1) === null || _h === void 0 ? void 0 : _h.created_at) : undefined\n    },\n    pairAddress: jsonResponse.pairAddress ? dataTypes_1.EvmAddress.create(jsonResponse.pairAddress, core) : undefined\n  };\n}\nfunction serializeRequest(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    toBlock: request.toBlock,\n    toDate: request.toDate ? new Date(request.toDate).toISOString() : undefined,\n    exchange: request.exchange,\n    token0Address: dataTypes_1.EvmAddress.create(request.token0Address, core).lowercase,\n    token1Address: dataTypes_1.EvmAddress.create(request.token1Address, core).lowercase\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    toBlock: jsonRequest.toBlock,\n    toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : undefined,\n    exchange: jsonRequest.exchange,\n    token0Address: dataTypes_1.EvmAddress.create(jsonRequest.token0Address, core),\n    token1Address: dataTypes_1.EvmAddress.create(jsonRequest.token1Address, core)\n  };\n}","map":{"version":3,"mappings":"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","names":["exports","method","name","id","groupName","urlPathPattern","urlPathParamNames","urlSearchParamNames","getRequestUrlParams","serializeRequest","deserializeRequest","deserializeResponse","request","core","chain","EvmChainResolver_1","resolve","apiHex","to_block","toBlock","to_date","toDate","Date","toISOString","undefined","exchange","token0Address","dataTypes_1","create","lowercase","token1Address","createErc20Token","token","contractAddress","address","decimals","symbol","logo","thumbnail","jsonResponse","token0","blockNumber","block_number","validated","createdAt","created_at","token1","pairAddress","jsonRequest"],"sources":["../../../src/operations/defi/getPairAddressOperation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}