{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPairReservesOperation = void 0;\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get the liquidity reserves for a given pair address. Only Uniswap V2 based exchanges supported at the moment. */\nexports.getPairReservesOperation = {\n  method: 'GET',\n  name: 'getPairReserves',\n  id: 'getPairReserves',\n  groupName: 'defi',\n  urlPathPattern: '/{pairAddress}/reserves',\n  urlPathParamNames: ['pairAddress'],\n  urlSearchParamNames: ['chain', 'toBlock', 'toDate'],\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    pairAddress: dataTypes_1.EvmAddress.create(request.pairAddress, core).lowercase,\n    to_block: request.toBlock,\n    to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined\n  };\n}\nfunction serializeRequest(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    toBlock: request.toBlock,\n    toDate: request.toDate ? new Date(request.toDate).toISOString() : undefined,\n    pairAddress: dataTypes_1.EvmAddress.create(request.pairAddress, core).lowercase\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    toBlock: jsonRequest.toBlock,\n    toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : undefined,\n    pairAddress: dataTypes_1.EvmAddress.create(jsonRequest.pairAddress, core)\n  };\n}\nfunction deserializeResponse(jsonResponse) {\n  return jsonResponse;\n}","map":{"version":3,"mappings":";;;;;;AACA;AACA;AA4BA;AACaA,gCAAwB,GAKjC;EACFC,MAAM,EAAE,KAAK;EACbC,IAAI,EAAE,iBAAiB;EACvBC,EAAE,EAAE,iBAAiB;EACrBC,SAAS,EAAE,MAAM;EACjBC,cAAc,EAAE,yBAAyB;EACzCC,iBAAiB,EAAE,CAAC,aAAa,CAAC;EAClCC,mBAAmB,EAAE,CAAC,OAAO,EAAE,SAAS,EAAE,QAAQ,CAAC;EAEnDC,mBAAmB;EACnBC,gBAAgB;EAChBC,kBAAkB;EAClBC,mBAAmB;CACpB;AAED;AAEA,SAASH,mBAAmB,CAACI,OAA+B,EAAEC,IAAU;EACtE,OAAO;IACLC,KAAK,EAAEC,mCAAgB,CAACC,OAAO,CAACJ,OAAO,CAACE,KAAK,EAAED,IAAI,CAAC,CAACI,MAAM;IAC3DC,WAAW,EAAEC,sBAAU,CAACC,MAAM,CAACR,OAAO,CAACM,WAAW,EAAEL,IAAI,CAAC,CAACQ,SAAS;IACnEC,QAAQ,EAAEV,OAAO,CAACW,OAAO;IACzBC,OAAO,EAAEZ,OAAO,CAACa,MAAM,GAAG,IAAIC,IAAI,CAACd,OAAO,CAACa,MAAM,CAAC,CAACE,WAAW,EAAE,GAAGC;GACpE;AACH;AAEA,SAASnB,gBAAgB,CAACG,OAA+B,EAAEC,IAAU;EACnE,OAAO;IACLC,KAAK,EAAEC,mCAAgB,CAACC,OAAO,CAACJ,OAAO,CAACE,KAAK,EAAED,IAAI,CAAC,CAACI,MAAM;IAC3DM,OAAO,EAAEX,OAAO,CAACW,OAAO;IACxBE,MAAM,EAAEb,OAAO,CAACa,MAAM,GAAG,IAAIC,IAAI,CAACd,OAAO,CAACa,MAAM,CAAC,CAACE,WAAW,EAAE,GAAGC,SAAS;IAC3EV,WAAW,EAAEC,sBAAU,CAACC,MAAM,CAACR,OAAO,CAACM,WAAW,EAAEL,IAAI,CAAC,CAACQ;GAC3D;AACH;AAEA,SAASX,kBAAkB,CAACmB,WAAuC,EAAEhB,IAAU;EAC7E,OAAO;IACLC,KAAK,EAAEK,oBAAQ,CAACC,MAAM,CAACS,WAAW,CAACf,KAAK,EAAED,IAAI,CAAC;IAC/CU,OAAO,EAAEM,WAAW,CAACN,OAAO;IAC5BE,MAAM,EAAEI,WAAW,CAACJ,MAAM,GAAG,IAAIC,IAAI,CAACG,WAAW,CAACJ,MAAM,CAAC,GAAGG,SAAS;IACrEV,WAAW,EAAEC,sBAAU,CAACC,MAAM,CAACS,WAAW,CAACX,WAAW,EAAEL,IAAI;GAC7D;AACH;AAEA,SAASF,mBAAmB,CAACmB,YAAyC;EACpE,OAAOA,YAAY;AACrB","names":["exports","method","name","id","groupName","urlPathPattern","urlPathParamNames","urlSearchParamNames","getRequestUrlParams","serializeRequest","deserializeRequest","deserializeResponse","request","core","chain","EvmChainResolver_1","resolve","apiHex","pairAddress","dataTypes_1","create","lowercase","to_block","toBlock","to_date","toDate","Date","toISOString","undefined","jsonRequest","jsonResponse"],"sources":["../../../src/operations/defi/getPairReservesOperation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}