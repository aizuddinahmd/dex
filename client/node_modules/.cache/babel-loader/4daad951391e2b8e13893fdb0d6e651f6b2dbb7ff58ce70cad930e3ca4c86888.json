{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getWalletNFTsOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/**\n * Get NFTs owned by a given address.\n * * The response will include status [SYNCED/SYNCING] based on the contracts being indexed.\n * * Use the token_address param to get results for a specific contract only\n * * Note results will include all indexed NFTs\n * * Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.\n */\nexports.getWalletNFTsOperation = {\n  method: 'GET',\n  name: 'getWalletNFTs',\n  id: 'getWalletNFTs',\n  groupName: 'nft',\n  firstPageIndex: 1,\n  urlPathPattern: '/{address}/nft',\n  urlPathParamNames: ['address'],\n  urlSearchParamNames: ['chain', 'format', 'limit', 'tokenAddresses', 'cursor', 'normalizeMetadata', 'disableTotal'],\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  var _a;\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,\n    format: request.format,\n    limit: (0, common_core_1.maybe)(request.limit, String),\n    token_addresses: (_a = request.tokenAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) {\n      return dataTypes_1.EvmAddress.create(address, core).lowercase;\n    }),\n    cursor: request.cursor,\n    normalizeMetadata: request.normalizeMetadata,\n    disable_total: request.disableTotal\n  };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n  var _a;\n  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (nft) {\n    return dataTypes_1.EvmNft.create({\n      chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),\n      contractType: nft.contract_type,\n      tokenAddress: nft.token_address,\n      tokenId: nft.token_id,\n      tokenUri: nft.token_uri,\n      metadata: nft.metadata,\n      name: nft.name,\n      symbol: nft.symbol,\n      amount: nft.amount ? parseInt(nft.amount, 10) : undefined,\n      blockNumberMinted: nft.block_number_minted,\n      blockNumber: nft.block_number,\n      ownerOf: dataTypes_1.EvmAddress.create(nft.owner_of, core),\n      tokenHash: nft.token_hash,\n      lastMetadataSync: (0, common_core_1.dateInputToDate)(nft.last_metadata_sync),\n      lastTokenUriSync: (0, common_core_1.dateInputToDate)(nft.last_token_uri_sync)\n    });\n  });\n}\nfunction serializeRequest(request, core) {\n  var _a;\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    format: request.format,\n    limit: request.limit,\n    tokenAddresses: (_a = request.tokenAddresses) === null || _a === void 0 ? void 0 : _a.map(function (address) {\n      return dataTypes_1.EvmAddress.create(address, core).checksum;\n    }),\n    cursor: request.cursor,\n    address: dataTypes_1.EvmAddress.create(request.address, core).checksum,\n    normalizeMetadata: request.normalizeMetadata,\n    disableTotal: request.disableTotal\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    format: jsonRequest.format,\n    limit: jsonRequest.limit,\n    tokenAddresses: (0, common_core_1.maybe)(jsonRequest.tokenAddresses, function (addresses) {\n      return addresses.map(function (address) {\n        return dataTypes_1.EvmAddress.create(address, core);\n      });\n    }),\n    cursor: jsonRequest.cursor,\n    address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),\n    normalizeMetadata: jsonRequest.normalizeMetadata,\n    disableTotal: jsonRequest.disableTotal\n  };\n}","map":{"version":3,"mappings":"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","names":["exports","method","name","id","groupName","firstPageIndex","urlPathPattern","urlPathParamNames","urlSearchParamNames","getRequestUrlParams","serializeRequest","deserializeRequest","deserializeResponse","request","core","chain","EvmChainResolver_1","resolve","apiHex","address","dataTypes_1","create","lowercase","format","limit","String","token_addresses","tokenAddresses","map","cursor","normalizeMetadata","disable_total","disableTotal","jsonResponse","result","nft","contractType","contract_type","tokenAddress","token_address","tokenId","token_id","tokenUri","token_uri","metadata","symbol","amount","parseInt","undefined","blockNumberMinted","block_number_minted","blockNumber","block_number","ownerOf","owner_of","tokenHash","token_hash","lastMetadataSync","last_metadata_sync","lastTokenUriSync","last_token_uri_sync","checksum","jsonRequest","addresses"],"sources":["../../../src/operations/nft/getWalletNFTsOperation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}