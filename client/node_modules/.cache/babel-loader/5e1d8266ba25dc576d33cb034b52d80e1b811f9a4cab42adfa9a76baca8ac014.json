{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNFTContractMetadataOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/**\n * Get the collection / contract level metadata for a given contract (name, symbol, base token uri).\n * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n */\nexports.getNFTContractMetadataOperation = {\n  method: 'GET',\n  name: 'getNFTContractMetadata',\n  id: 'getNFTContractMetadata',\n  groupName: 'nft',\n  isNullable: true,\n  urlPathPattern: '/nft/{address}/metadata',\n  urlPathParamNames: ['address'],\n  urlSearchParamNames: ['chain'],\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    address: dataTypes_1.EvmAddress.create(request.address, core).lowercase\n  };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n  return dataTypes_1.EvmNftMetadata.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(jsonResponse)), {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),\n    tokenAddress: dataTypes_1.EvmAddress.create(jsonResponse.token_address, core),\n    syncedAt: jsonResponse.synced_at ? new Date(jsonResponse.synced_at) : null,\n    contractType: (0, common_core_1.maybe)(jsonResponse.contract_type)\n  }));\n}\nfunction serializeRequest(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    address: dataTypes_1.EvmAddress.create(request.address, core).checksum\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    address: dataTypes_1.EvmAddress.create(jsonRequest.address, core)\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AA2BA;;;;AAIaA,uCAA+B,GAKxC;EACFC,MAAM,EAAE,KAAK;EACbC,IAAI,EAAE,wBAAwB;EAC9BC,EAAE,EAAE,wBAAwB;EAC5BC,SAAS,EAAE,KAAK;EAChBC,UAAU,EAAE,IAAI;EAChBC,cAAc,EAAE,yBAAyB;EACzCC,iBAAiB,EAAE,CAAC,SAAS,CAAC;EAC9BC,mBAAmB,EAAE,CAAC,OAAO,CAAC;EAE9BC,mBAAmB;EACnBC,gBAAgB;EAChBC,kBAAkB;EAClBC,mBAAmB;CACpB;AAED;AAEA,SAASH,mBAAmB,CAACI,OAAsC,EAAEC,IAAU;EAC7E,OAAO;IACLC,KAAK,EAAEC,mCAAgB,CAACC,OAAO,CAACJ,OAAO,CAACE,KAAK,EAAED,IAAI,CAAC,CAACI,MAAM;IAC3DC,OAAO,EAAEC,sBAAU,CAACC,MAAM,CAACR,OAAO,CAACM,OAAO,EAAEL,IAAI,CAAC,CAACQ;GACnD;AACH;AAEA,SAASV,mBAAmB,CAC1BW,YAAgD,EAChDV,OAAsC,EACtCC,IAAU;EAEV,OAAOM,0BAAc,CAACC,MAAM,uBACvB,6BAAW,EAACE,YAAY,CAAC;IAC5BR,KAAK,EAAEC,mCAAgB,CAACC,OAAO,CAACJ,OAAO,CAACE,KAAK,EAAED,IAAI,CAAC;IACpDU,YAAY,EAAEJ,sBAAU,CAACC,MAAM,CAACE,YAAY,CAACE,aAAa,EAAEX,IAAI,CAAC;IACjEY,QAAQ,EAAEH,YAAY,CAACI,SAAS,GAAG,IAAIC,IAAI,CAACL,YAAY,CAACI,SAAS,CAAC,GAAG,IAAI;IAC1EE,YAAY,EAAE,uBAAK,EAACN,YAAY,CAACO,aAAa;EAAC,GAC/C;AACJ;AAEA,SAASpB,gBAAgB,CAACG,OAAsC,EAAEC,IAAU;EAC1E,OAAO;IACLC,KAAK,EAAEC,mCAAgB,CAACC,OAAO,CAACJ,OAAO,CAACE,KAAK,EAAED,IAAI,CAAC,CAACI,MAAM;IAC3DC,OAAO,EAAEC,sBAAU,CAACC,MAAM,CAACR,OAAO,CAACM,OAAO,EAAEL,IAAI,CAAC,CAACiB;GACnD;AACH;AAEA,SAASpB,kBAAkB,CAACqB,WAA8C,EAAElB,IAAU;EACpF,OAAO;IACLC,KAAK,EAAEK,oBAAQ,CAACC,MAAM,CAACW,WAAW,CAACjB,KAAK,EAAED,IAAI,CAAC;IAC/CK,OAAO,EAAEC,sBAAU,CAACC,MAAM,CAACW,WAAW,CAACb,OAAO,EAAEL,IAAI;GACrD;AACH","names":["exports","method","name","id","groupName","isNullable","urlPathPattern","urlPathParamNames","urlSearchParamNames","getRequestUrlParams","serializeRequest","deserializeRequest","deserializeResponse","request","core","chain","EvmChainResolver_1","resolve","apiHex","address","dataTypes_1","create","lowercase","jsonResponse","tokenAddress","token_address","syncedAt","synced_at","Date","contractType","contract_type","checksum","jsonRequest"],"sources":["../../../src/operations/nft/getNFTContractMetadataOperation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}