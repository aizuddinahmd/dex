{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SolNetwork = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar solNetworkNames = ['mainnet', 'devnet'];\n/**\n * A representation of a Solana network.\n *\n * @category DataType\n */\nvar SolNetwork = /** @class */function () {\n  function SolNetwork(network) {\n    this.network = network;\n  }\n  Object.defineProperty(SolNetwork, \"MAINNET\", {\n    /**\n     * Returns MAINNET network\n     *\n     * @example SolNetwork.MAINNET\n     */\n    get: function () {\n      return SolNetwork.create('mainnet');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SolNetwork, \"DEVNET\", {\n    /**\n     * Returns DEVNET network\n     *\n     * @example SolNetwork.MAINNET\n     */\n    get: function () {\n      return SolNetwork.create('devnet');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Create a new instance of SolNetwork from any valid network input.\n   *\n   * @example `const network = SolNetwork.create(\"mainnet\")`\n   * @throws an error when a passed network is invalid.\n   */\n  SolNetwork.create = function (network) {\n    return network instanceof SolNetwork ? network : new SolNetwork(SolNetwork.parse(network));\n  };\n  SolNetwork.parse = function (network) {\n    if (typeof network === 'string') {\n      if (!solNetworkNames.includes(network)) {\n        throw new common_core_1.CoreError({\n          code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n          message: \"Solana network is not supported: \".concat(network)\n        });\n      }\n    }\n    return network;\n  };\n  /**\n   * Formats the network to a specific format.\n   * Currently returns a string representing the network.\n   * @example network.format(); // \"mainnet\"\n   */\n  SolNetwork.prototype.format = function () {\n    // TODO: add `format` argument\n    return this.network;\n  };\n  /**\n   * Checks the equality of the current network with another Solana network.\n   * @example `network.equals(\"mainnet\")`\n   * @example `network.equals(SolNetwork.create(\"mainnet\"))`\n   */\n  SolNetwork.prototype.equals = function (network) {\n    return this.network === SolNetwork.create(network).network;\n  };\n  /**\n   * @returns a string representing the network.\n   * @example network.toJSON(); // \"mainnet\"\n   */\n  SolNetwork.prototype.toJSON = function () {\n    return this.network;\n  };\n  /**\n   * @returns a string representing the network.\n   * @example network.toString(); // \"mainnet\"\n   */\n  SolNetwork.prototype.toString = function () {\n    return this.network;\n  };\n  return SolNetwork;\n}();\nexports.SolNetwork = SolNetwork;","map":{"version":3,"mappings":";;;;;;AAAA;AAEA,IAAMA,eAAe,GAAG,CAAC,SAAS,EAAE,QAAQ,CAAU;AA4BtD;;;;;AAKA;EAyCE,oBAAoCC,OAAuB;IAAvB,YAAO,GAAPA,OAAO;EAAmB;EAnC9DC,sBAAkBC,qBAAO;IALzB;;;;;SAKA;MACE,OAAOA,UAAU,CAACC,MAAM,CAAC,SAAS,CAAC;IACrC,CAAC;;;;EAODF,sBAAkBC,oBAAM;IALxB;;;;;SAKA;MACE,OAAOA,UAAU,CAACC,MAAM,CAAC,QAAQ,CAAC;IACpC,CAAC;;;;EAED;;;;;;EAMcD,iBAAM,GAApB,UAAqBF,OAAsB;IACzC,OAAOA,OAAO,YAAYE,UAAU,GAAGF,OAAO,GAAG,IAAIE,UAAU,CAACA,UAAU,CAACE,KAAK,CAACJ,OAAO,CAAC,CAAC;EAC5F,CAAC;EAEcE,gBAAK,GAApB,UAAqBF,OAA0B;IAC7C,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;MAC/B,IAAI,CAACD,eAAe,CAACM,QAAQ,CAACL,OAAyB,CAAC,EAAE;QACxD,MAAM,IAAIM,uBAAS,CAAC;UAClBC,IAAI,EAAED,2BAAa,CAACE,gBAAgB;UACpCC,OAAO,EAAE,2CAAoCT,OAAO;SACrD,CAAC;;;IAGN,OAAOA,OAAyB;EAClC,CAAC;EAID;;;;;EAKOE,2BAAM,GAAb;IACE;IACA,OAAO,IAAI,CAACF,OAAO;EACrB,CAAC;EAED;;;;;EAKOE,2BAAM,GAAb,UAAcF,OAAsB;IAClC,OAAO,IAAI,CAACA,OAAO,KAAKE,UAAU,CAACC,MAAM,CAACH,OAAO,CAAC,CAACA,OAAO;EAC5D,CAAC;EAED;;;;EAIOE,2BAAM,GAAb;IACE,OAAO,IAAI,CAACF,OAAO;EACrB,CAAC;EAED;;;;EAIOE,6BAAQ,GAAf;IACE,OAAO,IAAI,CAACF,OAAO;EACrB,CAAC;EACH,iBAAC;AAAD,CAAC,EA7ED;AAAaU","names":["solNetworkNames","network","Object","SolNetwork","create","parse","includes","common_core_1","code","INVALID_ARGUMENT","message","exports"],"sources":["../../../src/dataTypes/SolNetwork/SolNetwork.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}