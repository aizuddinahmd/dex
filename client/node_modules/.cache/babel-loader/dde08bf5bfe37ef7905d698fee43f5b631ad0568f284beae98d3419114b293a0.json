{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTokenPriceOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar SolNetworkResolver_1 = require(\"../../SolNetworkResolver\");\n/** Gets the token price (usd and native) for a given contract address and network */\nexports.getTokenPriceOperation = {\n  method: 'GET',\n  name: 'getTokenPrice',\n  id: 'getTokenPrice',\n  groupName: 'token',\n  urlPathParamNames: ['network', 'address'],\n  urlPathPattern: '/token/{network}/{address}/price',\n  getRequestUrlParams: getRequestUrlParams,\n  deserializeResponse: deserializeResponse,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  var network = SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core);\n  if (network !== 'mainnet') {\n    throw new common_core_1.MoralisApiError({\n      message: \"Incorrct value for 'network', getTokenPrice is only available on mainnet\",\n      code: common_core_1.ApiErrorCode.INVALID_PARAMS\n    });\n  }\n  return {\n    network: SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core),\n    address: dataTypes_1.SolAddress.create(request.address).address\n  };\n}\nfunction deserializeResponse(jsonResponse) {\n  return {\n    nativePrice: {\n      value: dataTypes_1.SolNative.create(jsonResponse.nativePrice.value, 'solana'),\n      decimals: jsonResponse.nativePrice.decimals,\n      name: jsonResponse.nativePrice.name,\n      symbol: jsonResponse.nativePrice.symbol\n    },\n    usdPrice: jsonResponse.usdPrice,\n    exchangeAddress: dataTypes_1.SolAddress.create(jsonResponse.exchangeAddress),\n    exchangeName: jsonResponse.exchangeName\n  };\n}\nfunction serializeRequest(request, core) {\n  return {\n    address: dataTypes_1.SolAddress.create(request.address).address,\n    network: SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core)\n  };\n}\nfunction deserializeRequest(jsonRequest) {\n  return {\n    network: dataTypes_1.SolNetwork.create(jsonRequest.network),\n    address: dataTypes_1.SolAddress.create(jsonRequest.address)\n  };\n}","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AAuBA;AACaA,8BAAsB,GAK/B;EACFC,MAAM,EAAE,KAAK;EACbC,IAAI,EAAE,eAAe;EACrBC,EAAE,EAAE,eAAe;EACnBC,SAAS,EAAE,OAAO;EAClBC,iBAAiB,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;EACzCC,cAAc,EAAE,kCAAkC;EAElDC,mBAAmB;EACnBC,mBAAmB;EACnBC,gBAAgB;EAChBC,kBAAkB;CACnB;AAED;AAEA,SAASH,mBAAmB,CAACI,OAA6B,EAAEC,IAAU;EACpE,IAAMC,OAAO,GAAGC,uCAAkB,CAACC,OAAO,CAACJ,OAAO,CAACE,OAAO,EAAED,IAAI,CAAC;EAEjE,IAAIC,OAAO,KAAK,SAAS,EAAE;IACzB,MAAM,IAAIG,6BAAe,CAAC;MACxBC,OAAO,EAAE,0EAA0E;MACnFC,IAAI,EAAEF,0BAAY,CAACG;KACpB,CAAC;;EAGJ,OAAO;IACLN,OAAO,EAAEC,uCAAkB,CAACC,OAAO,CAACJ,OAAO,CAACE,OAAO,EAAED,IAAI,CAAC;IAC1DQ,OAAO,EAAEC,sBAAU,CAACC,MAAM,CAACX,OAAO,CAACS,OAAO,CAAC,CAACA;GAC7C;AACH;AAEA,SAASZ,mBAAmB,CAACe,YAAuC;EAClE,OAAO;IACLC,WAAW,EAAE;MACXC,KAAK,EAAEJ,qBAAS,CAACC,MAAM,CAACC,YAAY,CAACC,WAAW,CAACC,KAAK,EAAE,QAAQ,CAAC;MACjEC,QAAQ,EAAEH,YAAY,CAACC,WAAW,CAACE,QAAQ;MAC3CxB,IAAI,EAAEqB,YAAY,CAACC,WAAW,CAACtB,IAAI;MACnCyB,MAAM,EAAEJ,YAAY,CAACC,WAAW,CAACG;KAClC;IACDC,QAAQ,EAAEL,YAAY,CAACK,QAAQ;IAC/BC,eAAe,EAAER,sBAAU,CAACC,MAAM,CAACC,YAAY,CAACM,eAAe,CAAC;IAChEC,YAAY,EAAEP,YAAY,CAACO;GAC5B;AACH;AAEA,SAASrB,gBAAgB,CAACE,OAA6B,EAAEC,IAAU;EACjE,OAAO;IACLQ,OAAO,EAAEC,sBAAU,CAACC,MAAM,CAACX,OAAO,CAACS,OAAO,CAAC,CAACA,OAAO;IACnDP,OAAO,EAAEC,uCAAkB,CAACC,OAAO,CAACJ,OAAO,CAACE,OAAO,EAAED,IAAI;GAC1D;AACH;AAEA,SAASF,kBAAkB,CAACqB,WAAqC;EAC/D,OAAO;IACLlB,OAAO,EAAEQ,sBAAU,CAACC,MAAM,CAACS,WAAW,CAAClB,OAAO,CAAC;IAC/CO,OAAO,EAAEC,sBAAU,CAACC,MAAM,CAACS,WAAW,CAACX,OAAO;GAC/C;AACH","names":["exports","method","name","id","groupName","urlPathParamNames","urlPathPattern","getRequestUrlParams","deserializeResponse","serializeRequest","deserializeRequest","request","core","network","SolNetworkResolver_1","resolve","common_core_1","message","code","INVALID_PARAMS","address","dataTypes_1","create","jsonResponse","nativePrice","value","decimals","symbol","usdPrice","exchangeAddress","exchangeName","jsonRequest"],"sources":["../../../src/operations/token/getTokenPriceOperation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}