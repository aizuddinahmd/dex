{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvmStream = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar common_evm_utils_1 = require(\"@moralisweb3/common-evm-utils\");\nvar StreamTrigger_1 = require(\"../StreamTrigger\");\n/**\n * The EvmStream class is a representation of Moralis Stream that is returned by the Moralis Stream API\n *\n * @category DataType\n */\nvar EvmStream = /** @class */function () {\n  function EvmStream(data, core) {\n    this._data = EvmStream.parse(data, core);\n  }\n  /**\n   * Create a new instance of EvmStream\n   *\n   * @param data - the EvmStreamish type\n   * @param core - the Core instance\n   * @example\n   * ```ts\n   * const evmStream = EvmStream.create(data);\n   * ```\n   * @returns an instance of EvmStream\n   */\n  EvmStream.create = function (data, core) {\n    if (data instanceof EvmStream) {\n      return data;\n    }\n    var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n    return new EvmStream(data, finalCore);\n  };\n  /**\n   * Compares two EvmStream data. It checks a deep equality check of both values.\n   * @param valueA - the first EvmStreamish data to compare\n   * @param valueB - the second EvmStreamish data to compare\n   * @returns true if the values are equal, false otherwise\n   * @example\n   * ```ts\n   *  EvmStream.equals(valueA, valueB);\n   * ```\n   */\n  EvmStream.equals = function (valueA, valueB) {\n    var _a, _b;\n    var evmStreamA = EvmStream.create(valueA);\n    var evmStreamB = EvmStream.create(valueB);\n    if (evmStreamA.id !== evmStreamB.id) {\n      return false;\n    }\n    if (((_a = evmStreamA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = evmStreamB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTrigger_1.StreamTrigger.arrayEquals(evmStreamA.triggers || [], evmStreamB.triggers || [])) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Compares an EvmStreamish data to this EvmStream instance.\n   * @param value - the value to compare\n   * @returns true if the value is equal to the current instance, false otherwise\n   * @example\n   * ```ts\n   * evmStream.equals(value);\n   * ```\n   */\n  EvmStream.prototype.equals = function (value) {\n    return EvmStream.equals(this, value);\n  };\n  /**\n   * Converts the EvmStream instance to a JSON object.\n   * @returns JSON object of the EvmStream instance\n   * @example `evmStream.toJSON()`\n   */\n  EvmStream.prototype.toJSON = function () {\n    var _a = this._data,\n      chains = _a.chains,\n      triggers = _a.triggers,\n      data = __rest(_a, [\"chains\", \"triggers\"]);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return __assign(__assign({}, data), {\n      chainIds: chains.map(function (chain) {\n        return chain.format();\n      }),\n      triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function (trigger) {\n        return trigger.format();\n      })\n    });\n  };\n  /**\n   * Converts the EvmStream instance to a JSON object.\n   * @returns JSON object of the EvmStream instance\n   * @example `evmStream.format()`\n   */\n  EvmStream.prototype.format = function () {\n    return this.toJSON();\n  };\n  Object.defineProperty(EvmStream.prototype, \"chains\", {\n    get: function () {\n      return this._data.chains;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmStream.prototype, \"chainIds\", {\n    get: function () {\n      return this._data.chains.map(function (chain) {\n        return chain.format();\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmStream.prototype, \"webhookUrl\", {\n    get: function () {\n      return this._data.webhookUrl;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmStream.prototype, \"description\", {\n    get: function () {\n      return this._data.description;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmStream.prototype, \"tag\", {\n    get: function () {\n      return this._data.tag;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmStream.prototype, \"topic0\", {\n    get: function () {\n      return this._data.topic0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmStream.prototype, \"allAddresses\", {\n    get: function () {\n      return this._data.allAddresses;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmStream.prototype, \"includeNativeTxs\", {\n    get: function () {\n      return this._data.includeNativeTxs;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmStream.prototype, \"includeContractLogs\", {\n    get: function () {\n      return this._data.includeContractLogs;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmStream.prototype, \"includeInternalTxs\", {\n    get: function () {\n      return this._data.includeInternalTxs;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmStream.prototype, \"abi\", {\n    get: function () {\n      return this._data.abi;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmStream.prototype, \"advancedOptions\", {\n    get: function () {\n      return this._data.advancedOptions;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmStream.prototype, \"id\", {\n    get: function () {\n      return this._data.id;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmStream.prototype, \"status\", {\n    get: function () {\n      return this._data.status;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmStream.prototype, \"statusMessage\", {\n    get: function () {\n      return this._data.statusMessage;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmStream.prototype, \"triggers\", {\n    get: function () {\n      return this._data.triggers;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmStream.prototype, \"getNativeBalances\", {\n    get: function () {\n      return this._data.getNativeBalances;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  EvmStream.parse = function (data, core) {\n    var _a, _b, _c, _d;\n    return __assign(__assign({}, data), {\n      chains: data.chainIds.map(function (chainId) {\n        return common_evm_utils_1.EvmChain.create(chainId, core);\n      }),\n      topic0: (0, common_core_1.maybe)(data.topic0),\n      allAddresses: (_a = data.allAddresses) !== null && _a !== void 0 ? _a : false,\n      includeContractLogs: (_b = data.includeContractLogs) !== null && _b !== void 0 ? _b : false,\n      includeInternalTxs: (_c = data.includeInternalTxs) !== null && _c !== void 0 ? _c : false,\n      includeNativeTxs: (_d = data.includeNativeTxs) !== null && _d !== void 0 ? _d : false,\n      advancedOptions: (0, common_core_1.maybe)(data.advancedOptions),\n      abi: (0, common_core_1.maybe)(data.abi),\n      triggers: (0, common_core_1.maybe)(data.triggers, function (triggers) {\n        return triggers.map(function (trigger) {\n          return StreamTrigger_1.StreamTrigger.create(trigger, core);\n        });\n      }),\n      getNativeBalances: (0, common_core_1.maybe)(data.getNativeBalances)\n    });\n  };\n  return EvmStream;\n}();\nexports.EvmStream = EvmStream;","map":{"version":3,"mappings":"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","names":["data","core","_data","EvmStream","parse","finalCore","common_core_1","getDefault","valueA","valueB","evmStreamA","create","evmStreamB","id","triggers","length","StreamTrigger_1","arrayEquals","value","equals","_a","chains","chainIds","map","chain","format","trigger","toJSON","Object","webhookUrl","description","tag","topic0","allAddresses","includeNativeTxs","includeContractLogs","includeInternalTxs","abi","advancedOptions","status","statusMessage","getNativeBalances","chainId","exports"],"sources":["../../../src/dataTypes/EvmStream/EvmStream.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}