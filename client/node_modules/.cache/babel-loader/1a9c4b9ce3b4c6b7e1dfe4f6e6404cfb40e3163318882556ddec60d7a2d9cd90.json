{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvmEvent = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar EvmAddress_1 = require(\"../EvmAddress\");\nvar EvmChain_1 = require(\"../EvmChain\");\nvar EvmNative_1 = require(\"../EvmNative\");\n/**\n * The EvmEvent is a representation of an event.\n *\n * Use this class any time you work with an event.\n *\n * @category DataType\n */\nvar EvmEvent = /** @class */function () {\n  function EvmEvent(_data) {\n    this._data = _data;\n  }\n  /**\n   * Create a new instance of EvmEvent from any valid event input\n   * @param data - the EvmEventish type\n   * @example\n   * ```\n   * const event = EvmEventish.create(data);\n   *```\n   */\n  EvmEvent.create = function (data, core) {\n    if (data instanceof EvmEvent) {\n      return data;\n    }\n    var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n    return new EvmEvent(EvmEvent.parse(data, finalCore));\n  };\n  /**\n   * Check the equality between two Evm events. It checks if the chain, block number, address and data are equal.\n   * @param dataA - The first event\n   * @param dataB - The second event\n   * @example\n   * ```ts\n   * EvmEvent.equals(dataA, dataB)\n   * ```\n   * @returns true if the events are equal, false otherwise\n   */\n  EvmEvent.equals = function (dataA, dataB) {\n    var eventA = EvmEvent.create(dataA);\n    var eventB = EvmEvent.create(dataB);\n    if (!eventA._data.chain.equals(eventB._data.chain)) {\n      return false;\n    }\n    if (!eventA._data.blockNumber.equals(eventB._data.blockNumber)) {\n      return false;\n    }\n    if (!eventA._data.address.equals(eventB._data.address)) {\n      return false;\n    }\n    if (eventA._data.data !== eventB._data.data) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Checks the equality of the current event instance with another evm event\n   * @param data - the event to compare with\n   * @example\n   * ```ts\n   * event.equals(data)\n   * ```\n   * @returns true if the events are equal, false otherwise\n   */\n  EvmEvent.prototype.equals = function (data) {\n    return EvmEvent.equals(this, data);\n  };\n  /**\n   * @returns a JSON represention of the event.\n   * @example\n   * ```\n   * event.toJSON()\n   * ```\n   */\n  EvmEvent.prototype.toJSON = function () {\n    var _a, _b, _c;\n    var data = this._data;\n    return __assign(__assign({}, data), {\n      chain: data.chain.format(),\n      address: data.address.format(),\n      blockNumber: data.blockNumber.toString(),\n      data: {\n        from: (_a = data.data.from) === null || _a === void 0 ? void 0 : _a.format(),\n        to: (_b = data.data.to) === null || _b === void 0 ? void 0 : _b.format(),\n        value: (_c = data.data.value) === null || _c === void 0 ? void 0 : _c.format()\n      }\n    });\n  };\n  /**\n   * @returns a JSON represention of the event.\n   * @example event.format()\n   */\n  EvmEvent.prototype.format = function () {\n    return this.toJSON();\n  };\n  Object.defineProperty(EvmEvent.prototype, \"result\", {\n    /**\n     * @returns all the data without casting it to JSON.\n     * @example event.result\n     */\n    get: function () {\n      return this._data;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmEvent.prototype, \"chain\", {\n    /**\n     * @returns the event chain\n     * @example event.chain // EvmChain\n     */\n    get: function () {\n      return this._data.chain;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmEvent.prototype, \"address\", {\n    /**\n     * @returns the event address\n     * @example event.address // EvmAddress\n     */\n    get: function () {\n      return this._data.address;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmEvent.prototype, \"blockNumber\", {\n    /**\n     * @returns the event block number\n     * @example event.blockNumber // BigNumber\n     */\n    get: function () {\n      return this._data.blockNumber;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmEvent.prototype, \"blockTimestamp\", {\n    /**\n     * @returns the event block timestamp\n     * @example event.blockTimestamp // Date\n     */\n    get: function () {\n      return this._data.blockTimestamp;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmEvent.prototype, \"data\", {\n    /**\n     * @returns the event data with from address, to address and value\n     * @example event.data\n     */\n    get: function () {\n      return this._data.data;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmEvent.prototype, \"transactionHash\", {\n    /**\n     * @returns the event block trannsaciton hash\n     * @example event.transactionHash // \"0xc9f62f4f6ab505a96c1a84ec2899c6bfd86245ef1effaa689fc997798be763d5\"\n     */\n    get: function () {\n      return this._data.transactionHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmEvent.prototype, \"blockHash\", {\n    /**\n     * @returns the event block hash\n     * @example event.blockHash // \"0xc9f62f4f6ab505a96c1a84ec2899c6bfd86245ef1effaa689fc997798be763d5\"\n     */\n    get: function () {\n      return this._data.blockHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  EvmEvent.parse = function (data, core) {\n    return __assign(__assign({}, data), {\n      chain: EvmChain_1.EvmChain.create(data.chain, core),\n      address: EvmAddress_1.EvmAddress.create(data.address, core),\n      blockNumber: common_core_1.BigNumber.create(data.blockNumber),\n      blockTimestamp: (0, common_core_1.dateInputToDate)(data.blockTimestamp),\n      data: {\n        from: (0, common_core_1.maybe)(data.data.from, function (from) {\n          return EvmAddress_1.EvmAddress.create(from, core);\n        }),\n        to: (0, common_core_1.maybe)(data.data.to, function (to) {\n          return EvmAddress_1.EvmAddress.create(to, core);\n        }),\n        value: (0, common_core_1.maybe)(data.data.value, EvmNative_1.EvmNative.create)\n      }\n    });\n  };\n  return EvmEvent;\n}();\nexports.EvmEvent = EvmEvent;","map":{"version":3,"mappings":"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","names":["_data","EvmEvent","data","core","finalCore","common_core_1","getDefault","parse","dataA","dataB","eventA","create","eventB","chain","equals","blockNumber","address","format","toString","from","to","value","toJSON","Object","blockTimestamp","transactionHash","blockHash","EvmChain_1","EvmAddress_1","EvmNative_1","exports"],"sources":["../../../src/dataTypes/EvmEvent/EvmEvent.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}