{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNFTContractTransfersOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get transfers of NFTs for a given contract and other parameters. */\nexports.getNFTContractTransfersOperation = {\n  method: 'GET',\n  name: 'getNFTContractTransfers',\n  id: 'getNFTContractTransfers',\n  groupName: 'nft',\n  urlPathPattern: '/nft/{address}/transfers',\n  urlPathParamNames: ['address'],\n  urlSearchParamNames: ['chain', 'format', 'limit', 'cursor', 'fromBlock', 'fromDate', 'toBlock', 'toDate', 'disableTotal'],\n  firstPageIndex: 0,\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,\n    format: request.format,\n    limit: (0, common_core_1.maybe)(request.limit, String),\n    from_block: (0, common_core_1.maybe)(request.fromBlock, String),\n    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,\n    to_block: (0, common_core_1.maybe)(request.toBlock, String),\n    to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,\n    cursor: request.cursor,\n    disable_total: request.disableTotal\n  };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n  var _a;\n  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {\n    return dataTypes_1.EvmNftTransfer.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(transfer)), {\n      chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),\n      tokenAddress: dataTypes_1.EvmAddress.create(transfer.to_address, core),\n      toAddress: dataTypes_1.EvmAddress.create(transfer.to_address, core),\n      operator: transfer.operator ? dataTypes_1.EvmAddress.create(transfer.operator, core) : null,\n      fromAddress: transfer.from_address ? dataTypes_1.EvmAddress.create(transfer.from_address, core) : null,\n      value: transfer.value ? dataTypes_1.EvmNative.create(transfer.value) : null,\n      blockTimestamp: new Date(transfer.block_timestamp)\n    }), core);\n  });\n}\nfunction serializeRequest(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    format: request.format,\n    limit: request.limit,\n    cursor: request.cursor,\n    address: dataTypes_1.EvmAddress.create(request.address, core).checksum,\n    fromBlock: request.fromBlock,\n    toBlock: request.toBlock,\n    fromDate: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,\n    toDate: request.toDate ? new Date(request.toDate).toISOString() : undefined,\n    disableTotal: request.disableTotal\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    format: jsonRequest.format,\n    limit: jsonRequest.limit,\n    cursor: jsonRequest.cursor,\n    address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),\n    fromBlock: jsonRequest.fromBlock,\n    toBlock: jsonRequest.toBlock,\n    fromDate: jsonRequest.fromDate ? new Date(jsonRequest.fromDate) : undefined,\n    toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : undefined,\n    disableTotal: jsonRequest.disableTotal\n  };\n}","map":{"version":3,"mappings":"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","names":["exports","method","name","id","groupName","urlPathPattern","urlPathParamNames","urlSearchParamNames","firstPageIndex","getRequestUrlParams","serializeRequest","deserializeRequest","deserializeResponse","request","core","chain","EvmChainResolver_1","resolve","apiHex","address","dataTypes_1","create","lowercase","format","limit","String","from_block","fromBlock","from_date","fromDate","Date","toISOString","undefined","to_block","toBlock","to_date","toDate","cursor","disable_total","disableTotal","jsonResponse","result","map","transfer","tokenAddress","to_address","toAddress","operator","fromAddress","from_address","value","blockTimestamp","block_timestamp","checksum","jsonRequest"],"sources":["../../../src/operations/nft/getNFTContractTransfersOperation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}