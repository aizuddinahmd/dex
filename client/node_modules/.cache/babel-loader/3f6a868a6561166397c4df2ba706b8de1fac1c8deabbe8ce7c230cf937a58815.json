{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.searchNFTsOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get NFTs that match a given metadata search query. */\nexports.searchNFTsOperation = {\n  method: 'GET',\n  name: 'searchNFTs',\n  id: 'searchNFTs',\n  groupName: 'nft',\n  urlPathPattern: '/nft/search',\n  urlSearchParamNames: ['chain', 'format', 'q', 'filter', 'fromBlock', 'toBlock', 'fromDate', 'toDate', 'addresses', 'cursor', 'limit', 'disableTotal'],\n  firstPageIndex: 0,\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  var _a;\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    format: request.format,\n    q: request.q,\n    filter: request.filter,\n    from_block: (0, common_core_1.maybe)(request.fromBlock, String),\n    to_block: (0, common_core_1.maybe)(request.toBlock, String),\n    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : undefined,\n    to_date: request.toDate ? new Date(request.toDate).toISOString() : undefined,\n    addresses: (_a = request.addresses) === null || _a === void 0 ? void 0 : _a.map(function (address) {\n      return dataTypes_1.EvmAddress.create(address, core).lowercase;\n    }),\n    cursor: request.cursor,\n    limit: (0, common_core_1.maybe)(request.limit, String),\n    disable_total: request.disableTotal\n  };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n  var _a;\n  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (nft) {\n    return {\n      token: dataTypes_1.EvmNft.create({\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),\n        contractType: nft.contract_type,\n        tokenAddress: nft.token_address,\n        tokenId: nft.token_id,\n        tokenUri: nft.token_uri,\n        metadata: nft.metadata,\n        tokenHash: nft.token_hash\n      }, core),\n      tokenHash: nft.token_hash,\n      blockNumberMinted: nft.block_number_minted,\n      lastMetadataSync: nft.last_metadata_sync ? new Date(nft.last_metadata_sync) : undefined,\n      lastTokenUriSync: nft.last_token_uri_sync ? new Date(nft.last_token_uri_sync) : undefined,\n      batchId: nft.batch_id,\n      frozen: nft.frozen,\n      frozenLogIndex: nft.frozen_log_index,\n      imported: nft.imported,\n      isValid: nft.is_valid,\n      openseaLookup: nft.opensea_lookup,\n      resyncing: nft.resyncing,\n      syncing: nft.syncing,\n      updatedAt: new Date(nft.updatedAt)\n    };\n  });\n}\nfunction serializeRequest(request, core) {\n  var _a;\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    format: request.format,\n    q: request.q,\n    filter: request.filter,\n    fromBlock: request.fromBlock,\n    toBlock: request.toBlock,\n    fromDate: request.fromDate,\n    toDate: request.toDate,\n    addresses: (_a = request.addresses) === null || _a === void 0 ? void 0 : _a.map(function (address) {\n      return dataTypes_1.EvmAddress.create(address, core).checksum;\n    }),\n    cursor: request.cursor,\n    limit: request.limit,\n    disableTotal: request.disableTotal\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    format: jsonRequest.format,\n    q: jsonRequest.q,\n    filter: jsonRequest.filter,\n    fromBlock: jsonRequest.fromBlock,\n    toBlock: jsonRequest.toBlock,\n    fromDate: jsonRequest.fromDate,\n    toDate: jsonRequest.toDate,\n    addresses: (0, common_core_1.maybe)(jsonRequest.addresses, function (addresses) {\n      return addresses.map(function (address) {\n        return dataTypes_1.EvmAddress.create(address, core);\n      });\n    }),\n    cursor: jsonRequest.cursor,\n    limit: jsonRequest.limit,\n    disableTotal: jsonRequest.disableTotal\n  };\n}","map":{"version":3,"mappings":"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","names":["exports","method","name","id","groupName","urlPathPattern","urlSearchParamNames","firstPageIndex","getRequestUrlParams","serializeRequest","deserializeRequest","deserializeResponse","request","core","chain","EvmChainResolver_1","resolve","apiHex","format","q","filter","from_block","fromBlock","String","to_block","toBlock","from_date","fromDate","Date","toISOString","undefined","to_date","toDate","addresses","map","address","create","lowercase","cursor","limit","disable_total","disableTotal","jsonResponse","result","nft","token","dataTypes_1","contractType","contract_type","tokenAddress","token_address","tokenId","token_id","tokenUri","token_uri","metadata","tokenHash","token_hash","blockNumberMinted","block_number_minted","lastMetadataSync","last_metadata_sync","lastTokenUriSync","last_token_uri_sync","batchId","batch_id","frozen","frozenLogIndex","frozen_log_index","imported","isValid","is_valid","openseaLookup","opensea_lookup","resyncing","syncing","updatedAt","checksum","jsonRequest"],"sources":["../../../src/operations/nft/searchNFTsOperation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}