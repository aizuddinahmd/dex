{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BigNumber = void 0;\nvar BigNumberFormatter_1 = require(\"./BigNumberFormatter\");\nvar BigNumberParser_1 = require(\"./BigNumberParser\");\n/**\n * The BigNumber class is a MoralisData that references to a the value of a BigNumber\n *\n * @category DataType\n */\nvar BigNumber = /** @class */function () {\n  function BigNumber(value) {\n    this.value = value;\n  }\n  /**\n   * Create a new instance of BigNumber from any valid address input.\n   *\n   * @param value - the BigNumberish type\n   * @example BigNumber.create(12);\n   * @example BigNumber.create(\"20\");\n   * @returns a new BigNumber instance\n   */\n  BigNumber.create = function (value) {\n    if (value instanceof BigNumber) {\n      return value;\n    }\n    return new BigNumber(BigNumberParser_1.BigNumberParser.parseInt(value));\n  };\n  /**\n   * Creates a new BigNumber from given decimals.\n   * @param value\n   * @param decimals - This is optional and defaults to 0\n   * @example BigNumber.fromDecimal(\"1.23456789\", 18);\n   */\n  BigNumber.fromDecimal = function (value, decimals) {\n    if (decimals === void 0) {\n      decimals = 0;\n    }\n    return new BigNumber(BigNumberParser_1.BigNumberParser.parseDecimal(value, decimals));\n  };\n  /**\n   * @returns the value of this BigNumber as a BigInt\n   * @example BigNumber.create(12).toBigInt();\n   */\n  BigNumber.prototype.toBigInt = function () {\n    return this.value;\n  };\n  /**\n   * Adds a BigNumber to current BigNumber instance.\n   * @param value - the BigNumberish to add\n   * @returns the result of the addition\n   * @example BigNumber.create(12).add(7);\n   * @example BigNumber.create(12).add(\"1000000000000000000\");\n   */\n  BigNumber.prototype.add = function (value) {\n    return new BigNumber(this.value + asBigInt(value));\n  };\n  /**\n   * Subtracts a BigNumber from current BigNumber instance.\n   * @param value - the BigNumberish to subtract\n   * @returns the result of the subtraction\n   * @example BigNumber.create(12).sub(7);\n   * @example BigNumber.create(\"1000000000000000000\").sub(20);\n   */\n  BigNumber.prototype.sub = function (value) {\n    return new BigNumber(this.value - asBigInt(value));\n  };\n  /**\n   * Multiplies a BigNumber with current BigNumber instance.\n   * @param value - the BigNumberish to multiply\n   * @returns the result of the multiplication\n   * @example BigNumber.create(12).mul(7);\n   * @example BigNumber.create(12).mul(\"1000000000000000000\");\n   */\n  BigNumber.prototype.mul = function (value) {\n    return new BigNumber(this.value * asBigInt(value));\n  };\n  /**\n   * Divides a BigNumber with current BigNumber instance.\n   * @param value - the BigNumberish to divide\n   * @returns the result of the division\n   * @example BigNumber.create(12).div(7);\n   * @example BigNumber.create(1).div(\"1000000000000000000\");\n   */\n  BigNumber.prototype.div = function (value) {\n    return new BigNumber(this.value / asBigInt(value));\n  };\n  /**\n   * Checks the equality of the current BigNumber with another BigNumber.\n   * @param value - the BigNumberish to compare\n   * @returns true if the BigNumbers are equal\n   * @example BigNumber.create(12).equals(BigNumber.create(12)); // true\n   */\n  BigNumber.prototype.equals = function (value) {\n    return this.value === value.toBigInt();\n  };\n  /**\n   * Converts BigNumber instance to value in given decimals.\n   * @param decimals - The decimals to convert to\n   * @example BigNumber.create(12).toDecimal(18);\n   */\n  BigNumber.prototype.toDecimal = function (decimals) {\n    return BigNumberFormatter_1.BigNumberFormatter.toDecimal(this.value, decimals);\n  };\n  /**\n   * Converts BigNumber instance to string.\n   * @example BigNumber.create(12).toString();\n   */\n  BigNumber.prototype.toString = function () {\n    return this.value.toString();\n  };\n  /**\n   * Converts BigNumber instance to hex string.\n   * @example BigNumber.create(12).toHex();\n   */\n  BigNumber.prototype.toHex = function () {\n    return BigNumberFormatter_1.BigNumberFormatter.toHex(this.value);\n  };\n  /**\n   * Converts BigNumber instance to hex string.\n   * @example BigNumber.create(12).toJSON();\n   */\n  BigNumber.prototype.toJSON = function () {\n    return this.toHex();\n  };\n  return BigNumber;\n}();\nexports.BigNumber = BigNumber;\nfunction asBigInt(value) {\n  return BigNumber.create(value).toBigInt();\n}","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAQA;;;;;AAKA;EAgBE,mBAAqCA,KAAa;IAAb,UAAK,GAALA,KAAK;EAAW;EAfrD;;;;;;;;EAQcC,gBAAM,GAApB,UAAqBD,KAAmB;IACtC,IAAIA,KAAK,YAAYC,SAAS,EAAE;MAC9B,OAAOD,KAAK;;IAEd,OAAO,IAAIC,SAAS,CAACC,iCAAe,CAACC,QAAQ,CAACH,KAAK,CAAC,CAAC;EACvD,CAAC;EAID;;;;;;EAMcC,qBAAW,GAAzB,UAA0BD,KAAyB,EAAEI,QAAY;IAAZ;MAAAA,YAAY;IAAA;IAC/D,OAAO,IAAIH,SAAS,CAACC,iCAAe,CAACG,YAAY,CAACL,KAAK,EAAEI,QAAQ,CAAC,CAAC;EACrE,CAAC;EAED;;;;EAIOH,4BAAQ,GAAf;IACE,OAAO,IAAI,CAACD,KAAK;EACnB,CAAC;EAED;;;;;;;EAOOC,uBAAG,GAAV,UAAWD,KAAmB;IAC5B,OAAO,IAAIC,SAAS,CAAC,IAAI,CAACD,KAAK,GAAGM,QAAQ,CAACN,KAAK,CAAC,CAAC;EACpD,CAAC;EAED;;;;;;;EAOOC,uBAAG,GAAV,UAAWD,KAAmB;IAC5B,OAAO,IAAIC,SAAS,CAAC,IAAI,CAACD,KAAK,GAAGM,QAAQ,CAACN,KAAK,CAAC,CAAC;EACpD,CAAC;EAED;;;;;;;EAOOC,uBAAG,GAAV,UAAWD,KAAmB;IAC5B,OAAO,IAAIC,SAAS,CAAC,IAAI,CAACD,KAAK,GAAGM,QAAQ,CAACN,KAAK,CAAC,CAAC;EACpD,CAAC;EAED;;;;;;;EAOOC,uBAAG,GAAV,UAAWD,KAAmB;IAC5B,OAAO,IAAIC,SAAS,CAAC,IAAI,CAACD,KAAK,GAAGM,QAAQ,CAACN,KAAK,CAAC,CAAC;EACpD,CAAC;EAED;;;;;;EAMOC,0BAAM,GAAb,UAAcD,KAAgB;IAC5B,OAAO,IAAI,CAACA,KAAK,KAAKA,KAAK,CAACO,QAAQ,EAAE;EACxC,CAAC;EAED;;;;;EAKON,6BAAS,GAAhB,UAAiBG,QAAgB;IAC/B,OAAOI,uCAAkB,CAACC,SAAS,CAAC,IAAI,CAACT,KAAK,EAAEI,QAAQ,CAAC;EAC3D,CAAC;EAED;;;;EAIOH,4BAAQ,GAAf;IACE,OAAO,IAAI,CAACD,KAAK,CAACU,QAAQ,EAAE;EAC9B,CAAC;EAED;;;;EAIOT,yBAAK,GAAZ;IACE,OAAOO,uCAAkB,CAACG,KAAK,CAAC,IAAI,CAACX,KAAK,CAAC;EAC7C,CAAC;EAED;;;;EAIOC,0BAAM,GAAb;IACE,OAAO,IAAI,CAACU,KAAK,EAAE;EACrB,CAAC;EACH,gBAAC;AAAD,CAAC,EA1HD;AAAaC;AA4Hb,SAASN,QAAQ,CAACN,KAAmB;EACnC,OAAOC,SAAS,CAACY,MAAM,CAACb,KAAK,CAAC,CAACO,QAAQ,EAAE;AAC3C","names":["value","BigNumber","BigNumberParser_1","parseInt","decimals","parseDecimal","asBigInt","toBigInt","BigNumberFormatter_1","toDecimal","toString","toHex","exports","create"],"sources":["../../../src/dataTypes/BigNumber/BigNumber.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}