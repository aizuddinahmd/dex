{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPortfolioOperation = void 0;\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar SolNetworkResolver_1 = require(\"../../SolNetworkResolver\");\n/** Gets the portfolio of the given network and address */\nexports.getPortfolioOperation = {\n  method: 'GET',\n  name: 'getPortfolio',\n  id: 'getPortfolio',\n  groupName: 'account',\n  urlPathParamNames: ['network', 'address'],\n  urlPathPattern: '/account/{network}/{address}/portfolio',\n  getRequestUrlParams: getRequestUrlParams,\n  deserializeResponse: deserializeResponse,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    network: SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core),\n    address: dataTypes_1.SolAddress.create(request.address).address\n  };\n}\nfunction deserializeResponse(jsonResponse) {\n  return {\n    nativeBalance: dataTypes_1.SolNative.create(jsonResponse.nativeBalance.lamports, 'lamports'),\n    nfts: jsonResponse.nfts.map(function (nft) {\n      return {\n        associatedTokenAddress: dataTypes_1.SolAddress.create(nft.associatedTokenAddress),\n        mint: dataTypes_1.SolAddress.create(nft.mint)\n      };\n    }),\n    tokens: jsonResponse.tokens.map(function (token) {\n      return {\n        associatedTokenAddress: dataTypes_1.SolAddress.create(token.associatedTokenAddress),\n        mint: dataTypes_1.SolAddress.create(token.mint),\n        amount: dataTypes_1.SolNative.create(token.amountRaw, 'lamports')\n      };\n    })\n  };\n}\nfunction serializeRequest(request, core) {\n  return {\n    address: dataTypes_1.SolAddress.create(request.address).address,\n    network: SolNetworkResolver_1.SolNetworkResolver.resolve(request.network, core)\n  };\n}\nfunction deserializeRequest(jsonRequest) {\n  return {\n    network: dataTypes_1.SolNetwork.create(jsonRequest.network),\n    address: dataTypes_1.SolAddress.create(jsonRequest.address)\n  };\n}","map":{"version":3,"mappings":";;;;;;AACA;AACA;AAsBA;AACaA,6BAAqB,GAK9B;EACFC,MAAM,EAAE,KAAK;EACbC,IAAI,EAAE,cAAc;EACpBC,EAAE,EAAE,cAAc;EAClBC,SAAS,EAAE,SAAS;EACpBC,iBAAiB,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;EACzCC,cAAc,EAAE,wCAAwC;EAExDC,mBAAmB;EACnBC,mBAAmB;EACnBC,gBAAgB;EAChBC,kBAAkB;CACnB;AAED;AAEA,SAASH,mBAAmB,CAACI,OAA4B,EAAEC,IAAU;EACnE,OAAO;IACLC,OAAO,EAAEC,uCAAkB,CAACC,OAAO,CAACJ,OAAO,CAACE,OAAO,EAAED,IAAI,CAAC;IAC1DI,OAAO,EAAEC,sBAAU,CAACC,MAAM,CAACP,OAAO,CAACK,OAAO,CAAC,CAACA;GAC7C;AACH;AAEA,SAASR,mBAAmB,CAACW,YAAsC;EACjE,OAAO;IACLC,aAAa,EAAEH,qBAAS,CAACC,MAAM,CAACC,YAAY,CAACC,aAAa,CAACC,QAAQ,EAAE,UAAU,CAAC;IAChFC,IAAI,EAAEH,YAAY,CAACG,IAAI,CAACC,GAAG,CAAC,UAACC,GAAG;MAC9B,OAAO;QACLC,sBAAsB,EAAER,sBAAU,CAACC,MAAM,CAACM,GAAG,CAACC,sBAAsB,CAAC;QACrEC,IAAI,EAAET,sBAAU,CAACC,MAAM,CAACM,GAAG,CAACE,IAAI;OACjC;IACH,CAAC,CAAC;IACFC,MAAM,EAAER,YAAY,CAACQ,MAAM,CAACJ,GAAG,CAAC,UAACK,KAAK;MACpC,OAAO;QACLH,sBAAsB,EAAER,sBAAU,CAACC,MAAM,CAACU,KAAK,CAACH,sBAAsB,CAAC;QACvEC,IAAI,EAAET,sBAAU,CAACC,MAAM,CAACU,KAAK,CAACF,IAAI,CAAC;QACnCG,MAAM,EAAEZ,qBAAS,CAACC,MAAM,CAACU,KAAK,CAACE,SAAS,EAAE,UAAU;OACrD;IACH,CAAC;GACF;AACH;AAEA,SAASrB,gBAAgB,CAACE,OAA4B,EAAEC,IAAU;EAChE,OAAO;IACLI,OAAO,EAAEC,sBAAU,CAACC,MAAM,CAACP,OAAO,CAACK,OAAO,CAAC,CAACA,OAAO;IACnDH,OAAO,EAAEC,uCAAkB,CAACC,OAAO,CAACJ,OAAO,CAACE,OAAO,EAAED,IAAI;GAC1D;AACH;AAEA,SAASF,kBAAkB,CAACqB,WAAoC;EAC9D,OAAO;IACLlB,OAAO,EAAEI,sBAAU,CAACC,MAAM,CAACa,WAAW,CAAClB,OAAO,CAAC;IAC/CG,OAAO,EAAEC,sBAAU,CAACC,MAAM,CAACa,WAAW,CAACf,OAAO;GAC/C;AACH","names":["exports","method","name","id","groupName","urlPathParamNames","urlPathPattern","getRequestUrlParams","deserializeResponse","serializeRequest","deserializeRequest","request","core","network","SolNetworkResolver_1","resolve","address","dataTypes_1","create","jsonResponse","nativeBalance","lamports","nfts","map","nft","associatedTokenAddress","mint","tokens","token","amount","amountRaw","jsonRequest"],"sources":["../../../src/operations/account/getPortfolioOperation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}