{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvmSimpleBlock = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar EvmChain_1 = require(\"../EvmChain\");\n/**\n * The EvmSimpleBlock is a representation of a block.\n *\n * @category DataType\n */\nvar EvmSimpleBlock = /** @class */function () {\n  function EvmSimpleBlock(data, core) {\n    this._data = EvmSimpleBlock.parse(data, core);\n  }\n  /**\n   * Create a new instance of EvmSimpleBlock from any valid transaction input\n   * @param data - the EvmSimpleBlockish type\n   * @example const transaction = EvmTransaction.create(data);\n   */\n  EvmSimpleBlock.create = function (data, core) {\n    if (data instanceof EvmSimpleBlock) {\n      return data;\n    }\n    var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n    return new EvmSimpleBlock(data, finalCore);\n  };\n  /**\n   * Check the equality between two Evm blocks. It compares their hashes and blocks.\n   * @param dataA - The first block to compare\n   * @param dataB - The second block to compare\n   * @example EvmTransaction.equals(dataA, dataB)\n   */\n  EvmSimpleBlock.equals = function (dataA, dataB) {\n    var blockA = EvmSimpleBlock.create(dataA);\n    var blockB = EvmSimpleBlock.create(dataB);\n    if (!blockA.chain.equals(blockB.chain)) {\n      return false;\n    }\n    if (blockA.hash !== blockB.hash) {\n      return false;\n    }\n    if (!blockA.number.equals(blockB.number)) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Checks the equality of the current block with another evm block\n   * @param data - the block to compare with\n   * @example\n   * ```ts\n   * block.equals(data)\n   * ```\n   */\n  EvmSimpleBlock.prototype.equals = function (data) {\n    return EvmSimpleBlock.equals(this, data);\n  };\n  /**\n   * @returns a JSON represention of the block.\n   * @example\n   * ```\n   * block.toJSON()\n   * ```\n   */\n  EvmSimpleBlock.prototype.toJSON = function () {\n    var data = this._data;\n    return __assign(__assign({}, data), {\n      number: data.number.toString(),\n      chain: data.chain.format()\n    });\n  };\n  /**\n   * @returns a JSON represention of the block.\n   * @example\n   * ```\n   * block.format()\n   * ```\n   */\n  EvmSimpleBlock.prototype.format = function () {\n    return this.toJSON();\n  };\n  Object.defineProperty(EvmSimpleBlock.prototype, \"result\", {\n    /**\n     * @returns all the data without casting it to JSON.\n     * @example block.result\n     */\n    get: function () {\n      return this._data;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmSimpleBlock.prototype, \"number\", {\n    /**\n     * @returns the block number.\n     * @example block.number // BigNumber\n     */\n    get: function () {\n      return this._data.number;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmSimpleBlock.prototype, \"hash\", {\n    /**\n     * @returns the block hash.\n     * @example block.hash // \"0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171\"\n     */\n    get: function () {\n      return this._data.hash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmSimpleBlock.prototype, \"timestamp\", {\n    /**\n     * @returns the block timestamp.\n     * @example block.timestamp // Date\n     */\n    get: function () {\n      return this._data.timestamp;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmSimpleBlock.prototype, \"chain\", {\n    /**\n     * @returns the block chain.\n     * @example block.chain // EvmChain\n     */\n    get: function () {\n      return this._data.chain;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  EvmSimpleBlock.parse = function (data, core) {\n    return {\n      timestamp: (0, common_core_1.dateInputToDate)(data.timestamp),\n      number: common_core_1.BigNumber.create(data.number),\n      chain: EvmChain_1.EvmChain.create(data.chain, core),\n      hash: data.hash\n    };\n  };\n  return EvmSimpleBlock;\n}();\nexports.EvmSimpleBlock = EvmSimpleBlock;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AAUA;;;;;AAKA;EAgBE,wBAAYA,IAAyB,EAAEC,IAAU;IAC/C,IAAI,CAACC,KAAK,GAAGC,cAAc,CAACC,KAAK,CAACJ,IAAI,EAAEC,IAAI,CAAC;EAC/C;EAjBA;;;;;EAKOE,qBAAM,GAAb,UAAcH,IAAuB,EAAEC,IAAW;IAChD,IAAID,IAAI,YAAYG,cAAc,EAAE;MAClC,OAAOH,IAAI;;IAEb,IAAMK,SAAS,GAAGJ,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAIK,0BAAY,CAACC,UAAU,EAAE;IACnD,OAAO,IAAIJ,cAAc,CAACH,IAAI,EAAEK,SAAS,CAAC;EAC5C,CAAC;EAeD;;;;;;EAMOF,qBAAM,GAAb,UAAcK,KAAsC,EAAEC,KAAsC;IAC1F,IAAMC,MAAM,GAAGP,cAAc,CAACQ,MAAM,CAACH,KAAK,CAAC;IAC3C,IAAMI,MAAM,GAAGT,cAAc,CAACQ,MAAM,CAACF,KAAK,CAAC;IAE3C,IAAI,CAACC,MAAM,CAACG,KAAK,CAACC,MAAM,CAACF,MAAM,CAACC,KAAK,CAAC,EAAE;MACtC,OAAO,KAAK;;IAGd,IAAIH,MAAM,CAACK,IAAI,KAAKH,MAAM,CAACG,IAAI,EAAE;MAC/B,OAAO,KAAK;;IAGd,IAAI,CAACL,MAAM,CAACM,MAAM,CAACF,MAAM,CAACF,MAAM,CAACI,MAAM,CAAC,EAAE;MACxC,OAAO,KAAK;;IAGd,OAAO,IAAI;EACb,CAAC;EAED;;;;;;;;EAQAb,+BAAM,GAAN,UAAOH,IAAuB;IAC5B,OAAOG,cAAc,CAACW,MAAM,CAAC,IAAI,EAAEd,IAAI,CAAC;EAC1C,CAAC;EAED;;;;;;;EAOAG,+BAAM,GAAN;IACE,IAAMH,IAAI,GAAG,IAAI,CAACE,KAAK;IACvB,6BACKF,IAAI;MACPgB,MAAM,EAAEhB,IAAI,CAACgB,MAAM,CAACC,QAAQ,EAAE;MAC9BJ,KAAK,EAAEb,IAAI,CAACa,KAAK,CAACK,MAAM;IAAE;EAE9B,CAAC;EAED;;;;;;;EAOAf,+BAAM,GAAN;IACE,OAAO,IAAI,CAACgB,MAAM,EAAE;EACtB,CAAC;EAMDC,sBAAIjB,kCAAM;IAJV;;;;SAIA;MACE,OAAO,IAAI,CAACD,KAAK;IACnB,CAAC;;;;EAMDkB,sBAAIjB,kCAAM;IAJV;;;;SAIA;MACE,OAAO,IAAI,CAACD,KAAK,CAACc,MAAM;IAC1B,CAAC;;;;EAMDI,sBAAIjB,gCAAI;IAJR;;;;SAIA;MACE,OAAO,IAAI,CAACD,KAAK,CAACa,IAAI;IACxB,CAAC;;;;EAMDK,sBAAIjB,qCAAS;IAJb;;;;SAIA;MACE,OAAO,IAAI,CAACD,KAAK,CAACmB,SAAS;IAC7B,CAAC;;;;EAMDD,sBAAIjB,iCAAK;IAJT;;;;SAIA;MACE,OAAO,IAAI,CAACD,KAAK,CAACW,KAAK;IACzB,CAAC;;;;EA7GMV,oBAAK,GAAG,UAACH,IAAyB,EAAEC,IAAU;IAAyB,OAAC;MAC7EoB,SAAS,EAAE,iCAAe,EAACrB,IAAI,CAACqB,SAAS,CAAC;MAC1CL,MAAM,EAAEV,uBAAS,CAACK,MAAM,CAACX,IAAI,CAACgB,MAAM,CAAC;MACrCH,KAAK,EAAES,mBAAQ,CAACX,MAAM,CAACX,IAAI,CAACa,KAAK,EAAEZ,IAAI,CAAC;MACxCc,IAAI,EAAEf,IAAI,CAACe;KACZ;EAL6E,CAK5E;EAyGJ,qBAAC;CAAA,EAlID;AAAaQ","names":["data","core","_data","EvmSimpleBlock","parse","finalCore","common_core_1","getDefault","dataA","dataB","blockA","create","blockB","chain","equals","hash","number","toString","format","toJSON","Object","timestamp","EvmChain_1","exports"],"sources":["../../../src/dataTypes/EvmBlock/EvmSimpleBlock.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}