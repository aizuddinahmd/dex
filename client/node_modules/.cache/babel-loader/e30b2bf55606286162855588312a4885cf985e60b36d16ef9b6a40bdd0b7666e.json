{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvmChainParser = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar INVALID_VALUES = ['0x', '0x0', '0', 0];\nvar EvmChainParser = /** @class */function () {\n  function EvmChainParser() {}\n  EvmChainParser.parse = function (chain) {\n    if (INVALID_VALUES.includes(chain)) {\n      throw new common_core_1.CoreError({\n        code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n        message: \"Invalid provided chain, value must be a positive number, or a hex-string starting with '0x'\"\n      });\n    }\n    if (typeof chain === 'string') {\n      if (chain.startsWith('0x')) {\n        return chain;\n      }\n      try {\n        var parsed = parseInt(chain, 10);\n        if (Number.isNaN(parsed)) {\n          throw new Error('Cannot parse the provided string value to a valid chain number');\n        }\n        return \"0x\".concat(parsed.toString(16));\n      } catch (error) {\n        throw new common_core_1.CoreError({\n          code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n          message: \"Invalid provided chain, value must be a positive number, or a hex-string starting with '0x'\"\n        });\n      }\n    }\n    if (chain <= 0) {\n      throw new common_core_1.CoreError({\n        code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n        message: \"Invalid provided chain, value must be a positive number, or a hex-string starting with '0x'\"\n      });\n    }\n    return \"0x\".concat(chain.toString(16));\n  };\n  return EvmChainParser;\n}();\nexports.EvmChainParser = EvmChainParser;","map":{"version":3,"mappings":";;;;;;AAAA;AAGA,IAAMA,cAAc,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;AAE5C;EAAA,2BAoCA;EAnCgBC,oBAAK,GAAnB,UAAoBC,KAAmB;IACrC,IAAIF,cAAc,CAACG,QAAQ,CAACD,KAAK,CAAC,EAAE;MAClC,MAAM,IAAIE,uBAAS,CAAC;QAClBC,IAAI,EAAED,2BAAa,CAACE,gBAAgB;QACpCC,OAAO,EAAE;OACV,CAAC;;IAGJ,IAAI,OAAOL,KAAK,KAAK,QAAQ,EAAE;MAC7B,IAAIA,KAAK,CAACM,UAAU,CAAC,IAAI,CAAC,EAAE;QAC1B,OAAON,KAAK;;MAGd,IAAI;QACF,IAAMO,MAAM,GAAGC,QAAQ,CAACR,KAAK,EAAE,EAAE,CAAC;QAClC,IAAIS,MAAM,CAACC,KAAK,CAACH,MAAM,CAAC,EAAE;UACxB,MAAM,IAAII,KAAK,CAAC,gEAAgE,CAAC;;QAEnF,OAAO,YAAKJ,MAAM,CAACK,QAAQ,CAAC,EAAE,CAAC,CAAE;OAClC,CAAC,OAAOC,KAAK,EAAE;QACd,MAAM,IAAIX,uBAAS,CAAC;UAClBC,IAAI,EAAED,2BAAa,CAACE,gBAAgB;UACpCC,OAAO,EAAE;SACV,CAAC;;;IAIN,IAAIL,KAAK,IAAI,CAAC,EAAE;MACd,MAAM,IAAIE,uBAAS,CAAC;QAClBC,IAAI,EAAED,2BAAa,CAACE,gBAAgB;QACpCC,OAAO,EAAE;OACV,CAAC;;IAEJ,OAAO,YAAKL,KAAK,CAACY,QAAQ,CAAC,EAAE,CAAC,CAAE;EAClC,CAAC;EACH,qBAAC;AAAD,CAAC,EApCD;AAAaE","names":["INVALID_VALUES","EvmChainParser","chain","includes","common_core_1","code","INVALID_ARGUMENT","message","startsWith","parsed","parseInt","Number","isNaN","Error","toString","error","exports"],"sources":["../../../src/dataTypes/EvmChain/EvmChainParser.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}