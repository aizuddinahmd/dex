{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMultipleNFTsOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/**\n * Get NFTs for a given contract address, including metadata for all NFTs (where available).\n * * Results are limited to 100 per page by default\n * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.\n */\nexports.getMultipleNFTsOperation = {\n  method: 'POST',\n  name: 'getMultipleNFTs',\n  id: 'getMultipleNFTs',\n  groupName: 'nft',\n  urlPathPattern: '/nft/getMultipleNFTs',\n  urlSearchParamNames: ['chain'],\n  bodyType: 'properties',\n  bodyParamNames: ['tokens', 'normalizeMetadata'],\n  getRequestUrlParams: getRequestUrlParams,\n  getRequestBody: getRequestBody,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex\n  };\n}\nfunction getRequestBody(request, core) {\n  return {\n    tokens: request.tokens.map(function (token) {\n      return {\n        token_address: dataTypes_1.EvmAddress.create(token.tokenAddress, core).lowercase,\n        token_id: token.tokenId\n      };\n    }),\n    normalizeMetadata: request.normalizeMetadata\n  };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n  return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function (nft) {\n    if (nft === null) {\n      return null;\n    }\n    return dataTypes_1.EvmNft.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(nft)), {\n      chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),\n      amount: nft.amount ? parseInt(nft.amount, 10) : undefined,\n      ownerOf: dataTypes_1.EvmAddress.create(nft.owner_of, core),\n      lastMetadataSync: (0, common_core_1.dateInputToDate)(nft.last_metadata_sync),\n      lastTokenUriSync: (0, common_core_1.dateInputToDate)(nft.last_token_uri_sync)\n    }), core);\n  });\n}\nfunction serializeRequest(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    normalizeMetadata: request.normalizeMetadata,\n    tokens: request.tokens.map(function (token) {\n      return {\n        tokenAddress: dataTypes_1.EvmAddress.create(token.tokenAddress, core).lowercase,\n        tokenId: token.tokenId\n      };\n    })\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    normalizeMetadata: jsonRequest.normalizeMetadata,\n    tokens: jsonRequest.tokens.map(function (token) {\n      return {\n        tokenAddress: dataTypes_1.EvmAddress.create(token.tokenAddress, core),\n        tokenId: token.tokenId\n      };\n    })\n  };\n}","map":{"version":3,"mappings":"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","names":["exports","method","name","id","groupName","urlPathPattern","urlSearchParamNames","bodyType","bodyParamNames","getRequestUrlParams","getRequestBody","serializeRequest","deserializeRequest","deserializeResponse","request","core","chain","EvmChainResolver_1","resolve","apiHex","tokens","map","token","token_address","dataTypes_1","create","tokenAddress","lowercase","token_id","tokenId","normalizeMetadata","jsonResponse","nft","amount","parseInt","undefined","ownerOf","owner_of","lastMetadataSync","last_metadata_sync","lastTokenUriSync","last_token_uri_sync","jsonRequest"],"sources":["../../../src/operations/nft/getMultipleNFTsOperation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}