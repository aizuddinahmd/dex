{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Module = void 0;\nvar LoggerController_1 = require(\"../controllers/LoggerController\");\nvar ModuleType_1 = require(\"./ModuleType\");\n/**\n * The base class of every Moralis class that gets registered as a module via MoralisModules\n * It should always be created with:\n * - `name`: name of the module (should be unique)\n * - `core`: the Core instance\n * - `type`: (optional) CoreModuleType, defaults to CoreModuleType.DEFAULT\n *\n * When creating an api, or network module, you should use the ApiModule or NetworkModule\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nvar Module = /** @class */function () {\n  function Module(name, core, type) {\n    if (type === void 0) {\n      type = ModuleType_1.ModuleType.DEFAULT;\n    }\n    this.name = name;\n    this.core = core;\n    this.type = type;\n    this.logger = LoggerController_1.LoggerController.create(this.name, this.core);\n  }\n  /**\n   * Any cleanup that needs to be done for removing this module.\n   * It also should remove the module via `this.core.modules.remove(this.name)`\n   */\n  Module.prototype.cleanUp = function () {\n    this.core.modules.remove(this.name);\n  };\n  return Module;\n}();\nexports.Module = Module;","map":{"version":3,"mappings":";;;;;;AACA;AACA;AAEA;;;;;;;;;AASA;AACA;EAGE,gBACkBA,IAAY,EACTC,IAAU,EACbC,IAAqC;IAArC;MAAAA,OAAmBC,uBAAU,CAACC,OAAO;IAAA;IAFrC,SAAI,GAAJJ,IAAI;IACD,SAAI,GAAJC,IAAI;IACP,SAAI,GAAJC,IAAI;IALH,WAAM,GAAGG,mCAAgB,CAACC,MAAM,CAAC,IAAI,CAACN,IAAI,EAAE,IAAI,CAACC,IAAI,CAAC;EAMtE;EAUH;;;;EAIOM,wBAAO,GAAd;IACE,IAAI,CAACN,IAAI,CAACO,OAAO,CAACC,MAAM,CAAC,IAAI,CAACT,IAAI,CAAC;EACrC,CAAC;EACH,aAAC;AAAD,CAAC,EAxBD;AAAsBU","names":["name","core","type","ModuleType_1","DEFAULT","LoggerController_1","create","Module","modules","remove","exports"],"sources":["../../src/Modules/Module.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}