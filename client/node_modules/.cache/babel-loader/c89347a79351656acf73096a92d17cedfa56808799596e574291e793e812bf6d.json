{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamTrigger = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar common_evm_utils_1 = require(\"@moralisweb3/common-evm-utils\");\nvar StreamSelector_1 = require(\"../StreamSelector\");\n/**\n * The StreamTrigger class is a representation of a stream trigger that is used by the Moralis Stream API\n *\n * @category DataType\n */\nvar StreamTrigger = /** @class */function () {\n  function StreamTrigger(data, core) {\n    this._data = StreamTrigger.parse(data, core);\n  }\n  StreamTrigger.create = function (data, core) {\n    if (data instanceof StreamTrigger) {\n      return data;\n    }\n    var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n    return new StreamTrigger(data, finalCore);\n  };\n  StreamTrigger.parseSelectorOrAddress = function (input, core) {\n    var result;\n    // If it is not an EvmAddress, it can be a string, but only the ones that are selectors should be treated that way\n    if (!(input instanceof common_evm_utils_1.EvmAddress) && StreamSelector_1.StreamSelector.isSelectorString(input)) {\n      result = StreamSelector_1.StreamSelector.create(input);\n    } else {\n      result = common_evm_utils_1.EvmAddress.create(input, core);\n    }\n    return result;\n  };\n  // eslint-disable-next-line complexity\n  StreamTrigger.equals = function (valueA, valueB) {\n    var _a, _b;\n    var streamTriggerA = StreamTrigger.create(valueA);\n    var streamTriggerB = StreamTrigger.create(valueB);\n    if (streamTriggerA.type !== streamTriggerB.type) {\n      return false;\n    }\n    // contractAddress can be a StreamSelector or an EvmAddress. It is easier to compare them as strings\n    if (streamTriggerA.contractAddress.format() !== streamTriggerB.contractAddress.format()) {\n      return false;\n    }\n    if (streamTriggerA.functionAbi !== streamTriggerB.functionAbi) {\n      return false;\n    }\n    if (((_a = streamTriggerA.inputs) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = streamTriggerB.inputs) === null || _b === void 0 ? void 0 : _b.length)) {\n      return false;\n    }\n    var triggerInputsA = streamTriggerA.inputs || [];\n    var triggerInputsB = streamTriggerB.inputs || [];\n    for (var i = 0; i < (triggerInputsA === null || triggerInputsA === void 0 ? void 0 : triggerInputsA.length); i++) {\n      if (triggerInputsA[i] !== triggerInputsB[i]) {\n        return false;\n      }\n    }\n    if (streamTriggerA.topic0 !== streamTriggerB.topic0) {\n      return false;\n    }\n    if (streamTriggerA.callFrom !== streamTriggerB.callFrom) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Compares two StreamTrigger arrays. It checks a deep equality check of both values, meaning that all the values have to be on both arrays.\n   * @param valueA - the first StreamTriggerish[] data to compare\n   * @param valueB - the second StreamTriggerish[] data to compare\n   * @returns true if all values are equal, false otherwise\n   * @example\n   * ```ts\n   *  StreamTrigger.arrayEquals(valueA, valueB);\n   * ```\n   */\n  StreamTrigger.arrayEquals = function (valueA, valueB) {\n    if (valueA.length !== valueB.length) {\n      return false;\n    }\n    var triggersA = valueA.map(function (trigger) {\n      return StreamTrigger.create(trigger);\n    });\n    var triggersB = valueB.map(function (trigger) {\n      return StreamTrigger.create(trigger);\n    });\n    var seenTriggersB = Array(triggersB.length).fill(false);\n    var _loop_1 = function (i) {\n      var indexB = triggersB.findIndex(function (triggerB) {\n        return triggerB.equals(triggersA[i]);\n      });\n      if (indexB < 0) {\n        return {\n          value: false\n        };\n      }\n      seenTriggersB[indexB] = true;\n    };\n    for (var i = 0; i < triggersA.length; i++) {\n      var state_1 = _loop_1(i);\n      if (typeof state_1 === \"object\") return state_1.value;\n    }\n    if (seenTriggersB.some(function (seen) {\n      return !seen;\n    })) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Compares an StreamTrigger data to this StreamTrigger instance.\n   * @param value - the value to compare\n   * @returns true if the value is equal to the current instance, false otherwise\n   * @example\n   * ```ts\n   * streamTrigger.equals(value);\n   * ```\n   */\n  StreamTrigger.prototype.equals = function (value) {\n    return StreamTrigger.equals(this, value);\n  };\n  /**\n   * Converts the StreamTrigger instance to a JSON object.\n   * @returns JSON object of the StreamTrigger instance\n   * @example `streamTrigger.toJSON()`\n   */\n  StreamTrigger.prototype.toJSON = function () {\n    var _a = this._data,\n      contractAddress = _a.contractAddress,\n      callFrom = _a.callFrom,\n      data = __rest(_a, [\"contractAddress\", \"callFrom\"]);\n    return __assign(__assign({}, data), {\n      contractAddress: contractAddress.format(),\n      callFrom: callFrom === null || callFrom === void 0 ? void 0 : callFrom.format()\n    });\n  };\n  /**\n   * Converts the StreamTrigger instance to a JSON object.\n   * @returns JSON object of the StreamTrigger instance\n   * @example `streamTrigger.format()`\n   */\n  StreamTrigger.prototype.format = function () {\n    return this.toJSON();\n  };\n  Object.defineProperty(StreamTrigger.prototype, \"type\", {\n    get: function () {\n      return this._data.type;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamTrigger.prototype, \"contractAddress\", {\n    get: function () {\n      return this._data.contractAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamTrigger.prototype, \"functionAbi\", {\n    get: function () {\n      return this._data.functionAbi;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamTrigger.prototype, \"inputs\", {\n    get: function () {\n      return this._data.inputs;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamTrigger.prototype, \"topic0\", {\n    get: function () {\n      return this._data.topic0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamTrigger.prototype, \"callFrom\", {\n    get: function () {\n      return this._data.callFrom;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  StreamTrigger.parse = function (data, core) {\n    var contractAddressInput = data.contractAddress,\n      callFromInput = data.callFrom,\n      input = __rest(data, [\"contractAddress\", \"callFrom\"]);\n    var contractAddress = StreamTrigger.parseSelectorOrAddress(contractAddressInput, core);\n    var callFrom = (0, common_core_1.maybe)(callFromInput, function (value) {\n      return StreamTrigger.parseSelectorOrAddress(value, core);\n    });\n    return __assign(__assign({}, input), {\n      contractAddress: contractAddress,\n      callFrom: callFrom\n    });\n  };\n  return StreamTrigger;\n}();\nexports.StreamTrigger = StreamTrigger;","map":{"version":3,"mappings":"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","names":["data","core","_data","StreamTrigger","parse","finalCore","common_core_1","getDefault","input","result","common_evm_utils_1","StreamSelector_1","isSelectorString","create","valueA","valueB","streamTriggerA","streamTriggerB","type","contractAddress","format","functionAbi","inputs","length","triggerInputsA","triggerInputsB","i","topic0","callFrom","triggersA","map","trigger","triggersB","seenTriggersB","Array","fill","indexB","findIndex","triggerB","equals","some","seen","value","_a","toJSON","Object","contractAddressInput","callFromInput","parseSelectorOrAddress","exports"],"sources":["../../../src/dataTypes/StreamTrigger/StreamTrigger.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}