{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvmNftMetadata = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar EvmAddress_1 = require(\"../EvmAddress\");\nvar EvmChain_1 = require(\"../EvmChain\");\n/**\n * The EvmNftMetadata contains metadata of an NFT.\n *\n * @category DataType\n */\nvar EvmNftMetadata = /** @class */function () {\n  function EvmNftMetadata(data) {\n    this._data = EvmNftMetadata.parse(data);\n  }\n  /**\n   *  Create a new instance of EvmNftMetadata from any valid EvmNftMetadata input\n   *\n   * @param data - the EvmNftMetadataish type\n   * @example\n   * ```ts\n   * const token = EvmNftMetadataish.create(value);\n   * ```\n   */\n  EvmNftMetadata.create = function (data) {\n    if (data instanceof EvmNftMetadata) {\n      return data;\n    }\n    return new EvmNftMetadata(data);\n  };\n  /**\n   * Compares two EvmNftMetadata instances. This checks if the chain and tokenAddress of both meatdatas are equal.\n   *\n   * @param dataA - the first EvmNftMetadataish to compare\n   * @param dataB - the second EvmNftMetadataish to compare\n   * @returns true if the two EvmNftMetadataData are equal\n   * @example\n   * ```ts\n   * EvmNftMetadata.equals(dataA, dataB);\n   * ```\n   */\n  EvmNftMetadata.equals = function (dataA, dataB) {\n    var metadataA = EvmNftMetadata.create(dataA);\n    var metadataB = EvmNftMetadata.create(dataB);\n    if (!metadataA._data.chain.equals(metadataB._data.chain)) {\n      return false;\n    }\n    if (!metadataA._data.tokenAddress.equals(metadataB._data.tokenAddress)) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Compares EvmNftMetadata instance to current instance\n   *\n   * @param data - the EvmNftMetadataish to compare\n   * @returns true if the EvmNftMetadataish is equals given metadata\n   * @example\n   * ```ts\n   * metadata.equals(data);\n   * ```\n   */\n  EvmNftMetadata.prototype.equals = function (data) {\n    return EvmNftMetadata.equals(this, data);\n  };\n  /**\n   * @returns the data as JSON.\n   * @example metadata.toJSON();\n   */\n  EvmNftMetadata.prototype.toJSON = function () {\n    var data = this._data;\n    return __assign(__assign({}, data), {\n      chain: data.chain.format(),\n      tokenAddress: data.tokenAddress.format()\n    });\n  };\n  /**\n   * @returns the data as JSON.\n   * @example metadata.format();\n   */\n  EvmNftMetadata.prototype.format = function () {\n    return this.toJSON();\n  };\n  Object.defineProperty(EvmNftMetadata.prototype, \"result\", {\n    /**\n     * @returns all the data without casting it to JSON.\n     * @example metadata.result;\n     */\n    get: function () {\n      return this._data;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftMetadata.prototype, \"name\", {\n    /**\n     * @returns the name in the metadata.\n     * @example metadata.name; // \"Baby Ape Mutant Club\"\n     */\n    get: function () {\n      return this._data.name;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftMetadata.prototype, \"symbol\", {\n    /**\n     * @returns the symbol in the metadata.\n     * @example metadata.symbol; // \"BAMC\"\n     */\n    get: function () {\n      return this._data.symbol;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftMetadata.prototype, \"contractType\", {\n    /**\n     * @returns the contract type of the NFT.\n     * @example metadata.contractType; // \"ERC721\"\n     */\n    get: function () {\n      return this._data.contractType;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftMetadata.prototype, \"chain\", {\n    /**\n     * @returns the chain in the metadata.\n     * @example metadata.chain; // EvmChain\n     */\n    get: function () {\n      return this._data.chain;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftMetadata.prototype, \"tokenAddress\", {\n    /**\n     * @returns the token address in the metadata.\n     * @example metadata.tokenAddress; // EvmAddress\n     */\n    get: function () {\n      return this._data.tokenAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftMetadata.prototype, \"syncedAt\", {\n    /**\n     * @returns the date the metadata was synced.\n     * @example metadata.syncedAt; // Date\n     */\n    get: function () {\n      return this._data.syncedAt;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  EvmNftMetadata.parse = function (data) {\n    return __assign(__assign({}, data), {\n      chain: EvmChain_1.EvmChain.create(data.chain),\n      tokenAddress: EvmAddress_1.EvmAddress.create(data.tokenAddress),\n      syncedAt: (0, common_core_1.maybe)(data.syncedAt, common_core_1.dateInputToDate)\n    });\n  };\n  return EvmNftMetadata;\n}();\nexports.EvmNftMetadata = EvmNftMetadata;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAQA;;;;;AAKA;EAoBE,wBAAYA,IAAyB;IACnC,IAAI,CAACC,KAAK,GAAGC,cAAc,CAACC,KAAK,CAACH,IAAI,CAAC;EACzC;EArBA;;;;;;;;;EASOE,qBAAM,GAAb,UAAcF,IAAuB;IACnC,IAAIA,IAAI,YAAYE,cAAc,EAAE;MAClC,OAAOF,IAAI;;IAGb,OAAO,IAAIE,cAAc,CAACF,IAAI,CAAC;EACjC,CAAC;EAeD;;;;;;;;;;;EAWOE,qBAAM,GAAb,UAAcE,KAAwB,EAAEC,KAAwB;IAC9D,IAAMC,SAAS,GAAGJ,cAAc,CAACK,MAAM,CAACH,KAAK,CAAC;IAC9C,IAAMI,SAAS,GAAGN,cAAc,CAACK,MAAM,CAACF,KAAK,CAAC;IAE9C,IAAI,CAACC,SAAS,CAACL,KAAK,CAACQ,KAAK,CAACC,MAAM,CAACF,SAAS,CAACP,KAAK,CAACQ,KAAK,CAAC,EAAE;MACxD,OAAO,KAAK;;IAGd,IAAI,CAACH,SAAS,CAACL,KAAK,CAACU,YAAY,CAACD,MAAM,CAACF,SAAS,CAACP,KAAK,CAACU,YAAY,CAAC,EAAE;MACtE,OAAO,KAAK;;IAGd,OAAO,IAAI;EACb,CAAC;EAED;;;;;;;;;;EAUAT,+BAAM,GAAN,UAAOF,IAAuB;IAC5B,OAAOE,cAAc,CAACQ,MAAM,CAAC,IAAI,EAAEV,IAAI,CAAC;EAC1C,CAAC;EAED;;;;EAIAE,+BAAM,GAAN;IACE,IAAMF,IAAI,GAAG,IAAI,CAACC,KAAK;IACvB,6BACKD,IAAI;MACPS,KAAK,EAAET,IAAI,CAACS,KAAK,CAACG,MAAM,EAAE;MAC1BD,YAAY,EAAEX,IAAI,CAACW,YAAY,CAACC,MAAM;IAAE;EAE5C,CAAC;EAED;;;;EAIAV,+BAAM,GAAN;IACE,OAAO,IAAI,CAACW,MAAM,EAAE;EACtB,CAAC;EAMDC,sBAAIZ,kCAAM;IAJV;;;;SAIA;MACE,OAAO,IAAI,CAACD,KAAK;IACnB,CAAC;;;;EAMDa,sBAAIZ,gCAAI;IAJR;;;;SAIA;MACE,OAAO,IAAI,CAACD,KAAK,CAACc,IAAI;IACxB,CAAC;;;;EAMDD,sBAAIZ,kCAAM;IAJV;;;;SAIA;MACE,OAAO,IAAI,CAACD,KAAK,CAACe,MAAM;IAC1B,CAAC;;;;EAMDF,sBAAIZ,wCAAY;IAJhB;;;;SAIA;MACE,OAAO,IAAI,CAACD,KAAK,CAACgB,YAAY;IAChC,CAAC;;;;EAMDH,sBAAIZ,iCAAK;IAJT;;;;SAIA;MACE,OAAO,IAAI,CAACD,KAAK,CAACQ,KAAK;IACzB,CAAC;;;;EAMDK,sBAAIZ,wCAAY;IAJhB;;;;SAIA;MACE,OAAO,IAAI,CAACD,KAAK,CAACU,YAAY;IAChC,CAAC;;;;EAMDG,sBAAIZ,oCAAQ;IAJZ;;;;SAIA;MACE,OAAO,IAAI,CAACD,KAAK,CAACiB,QAAQ;IAC5B,CAAC;;;;EA1HMhB,oBAAK,GAAG,UAACF,IAAyB;IAAyB,6BAC7DA,IAAI;MACPS,KAAK,EAAEU,mBAAQ,CAACZ,MAAM,CAACP,IAAI,CAACS,KAAK,CAAC;MAClCE,YAAY,EAAES,uBAAU,CAACb,MAAM,CAACP,IAAI,CAACW,YAAY,CAAC;MAClDO,QAAQ,EAAE,uBAAK,EAAClB,IAAI,CAACkB,QAAQ,EAAEG,6BAAe;IAAC;EAJiB,CAKhE;EAsHJ,qBAAC;CAAA,EAnJD;AAAaC","names":["data","_data","EvmNftMetadata","parse","dataA","dataB","metadataA","create","metadataB","chain","equals","tokenAddress","format","toJSON","Object","name","symbol","contractType","syncedAt","EvmChain_1","EvmAddress_1","common_core_1","exports"],"sources":["../../../src/dataTypes/EvmNftMetadata/EvmNftMetadata.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}