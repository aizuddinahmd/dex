{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvmTransactionLog = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar EvmAddress_1 = require(\"../EvmAddress\");\nvar EvmChain_1 = require(\"../EvmChain\");\n/**\n * The EvmTransactionLog class is a MoralisData that references an EVM transaction log.\n *\n * @category DataType\n */\nvar EvmTransactionLog = /** @class */function () {\n  function EvmTransactionLog(value, core) {\n    this._value = EvmTransactionLog.parse(value, core);\n  }\n  /**\n   * Create a new instance of EvmTransactionLog from any valid address input\n   *\n   * @example\n   * ```\n   * const log = EvmTransactionLog.create(value, core);\n   * ```\n   * @param value - A valid EvmTransactionLogish\n   * @param core - The Core instance\n   */\n  EvmTransactionLog.create = function (value, core) {\n    if (value instanceof EvmTransactionLog) {\n      return value;\n    }\n    var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n    return new EvmTransactionLog(value, finalCore);\n  };\n  EvmTransactionLog.parse = function (value, core) {\n    return {\n      chain: EvmChain_1.EvmChain.create(value.chain, core),\n      logIndex: (0, common_core_1.maybe)(value.logIndex, function (index) {\n        return +index;\n      }),\n      transactionHash: value.transactionHash,\n      transactionIndex: (0, common_core_1.maybe)(value.transactionIndex),\n      data: value.data,\n      topics: value.topics,\n      blockHash: value.blockHash,\n      blockNumber: value.blockNumber,\n      blockTimestamp: value.blockTimestamp,\n      address: EvmAddress_1.EvmAddress.create(value.address, core)\n    };\n  };\n  /**\n   * Compares the log to another log for equality.\n   *\n   * @param value - The value to compare with\n   * @returns true if the logs are equal, otherwise false\n   * @example\n   * ```ts\n   * log.equals(log);\n   * ```\n   */\n  EvmTransactionLog.prototype.equals = function (value) {\n    return value._value.transactionHash === this._value.transactionHash && value._value.address.equals(this._value.address) && value._value.logIndex === this._value.logIndex && value._value.chain.equals(this._value.chain);\n  };\n  /**\n   * Converts the log to a JSON object.\n   *\n   * @returns the EvmTransactionLog as a JSON object\n   * @example\n   * ```ts\n   * log.toJSON();\n   * ```\n   */\n  EvmTransactionLog.prototype.toJSON = function () {\n    var value = this._value;\n    return __assign(__assign({}, value), {\n      address: value.address.format(),\n      chain: value.chain.format()\n    });\n  };\n  /**\n   * Converts the log to a JSON object.\n   *\n   * @returns the EvmTransactionLog as a JSON object\n   * @example\n   * ```ts\n   * log.format();\n   * ```\n   */\n  EvmTransactionLog.prototype.format = function () {\n    return this.toJSON();\n  };\n  Object.defineProperty(EvmTransactionLog.prototype, \"result\", {\n    /**\n     * Returns the processed Erc20Token.\n     *\n     * @returns the EvmTransactionLog value\n     * @example\n     * ```ts\n     * log.result;\n     *  ```\n     */\n    get: function () {\n      return this._value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmTransactionLog.prototype, \"transactionHash\", {\n    /**\n     * @returns the transaction hash of the log.\n     *\n     * @example\n     * ```ts\n     * log.transactionHash; // \"0xdd9006489e46670e0e85d1fb88823099e7f596b08aeaac023e9da0851f26fdd5\"\n     * ```\n     */\n    get: function () {\n      return this._value.transactionHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmTransactionLog.prototype, \"address\", {\n    /**\n     * Returns the address of the log.\n     *\n     * @example\n     * ```ts\n     * log.address; // EvmAddress\n     * ```\n     */\n    get: function () {\n      return this._value.address;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmTransactionLog.prototype, \"chain\", {\n    /**\n     * Returns the chain of the log.\n     *\n     * @example\n     * ```ts\n     * log.chain; // EvmChain\n     * ```\n     */\n    get: function () {\n      return this._value.chain;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmTransactionLog.prototype, \"logIndex\", {\n    /**\n     * @returns the log index of the log.\n     *\n     * @example\n     * ```ts\n     * log.logIndex; // 273\n     * ```\n     */\n    get: function () {\n      return this._value.logIndex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmTransactionLog.prototype, \"data\", {\n    /**\n     * @returns the data of the log.\n     *\n     * @example\n     * ```ts\n     * log.data; // \"0x00000000000000000000000000000000000000000000000de05239bccd4d537400000000000000000000000000024dbc80a9f80e3d5fc0a0ee30e2693781a443\"\n     * ```\n     */\n    get: function () {\n      return this._value.data;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmTransactionLog.prototype, \"topics\", {\n    /**\n     * @returns the topics of the log.\n     *\n     * @example\n     * ```ts\n     * log.topic0; // [\"0x0000000000000000000000000000000000000000000000000000000000000001\", \"0x0000000000000000000000000000000000000000000000000000000000000002\"]\n     * ```\n     */\n    get: function () {\n      return this._value.topics;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmTransactionLog.prototype, \"blockHash\", {\n    /**\n     * @returns the block hash of the log.\n     *\n     * @example\n     * ```ts\n     * log.blockHash; // \"0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171\"\n     * ```\n     */\n    get: function () {\n      return this._value.blockHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmTransactionLog.prototype, \"blockNumber\", {\n    /**\n     * @returns the block number of the log.\n     *\n     * @example\n     * ```ts\n     * log.blockNumber; // 12386788\n     * ```\n     */\n    get: function () {\n      return this._value.blockNumber;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmTransactionLog.prototype, \"blockTimestamp\", {\n    /**\n     * @returns the block timestamp of the log.\n     *\n     * @example\n     * ```ts\n     * log.blockTimestamp; // \"2021-05-07T11:08:35.000Z\"\n     * ```\n     */\n    get: function () {\n      return this._value.blockTimestamp;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return EvmTransactionLog;\n}();\nexports.EvmTransactionLog = EvmTransactionLog;","map":{"version":3,"mappings":"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","names":["value","core","_value","EvmTransactionLog","parse","finalCore","common_core_1","getDefault","chain","EvmChain_1","create","logIndex","index","transactionHash","transactionIndex","data","topics","blockHash","blockNumber","blockTimestamp","address","EvmAddress_1","equals","format","toJSON","Object","exports"],"sources":["../../../src/dataTypes/EvmTransactionLog/EvmTransactionLog.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}