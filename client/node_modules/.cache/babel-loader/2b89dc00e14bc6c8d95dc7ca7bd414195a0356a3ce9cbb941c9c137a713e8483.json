{"ast":null,"code":"\"use strict\";\n\n/**\n * Copied (and remove obsolete functionalities) from https://github.com/aptos-labs/aptos-core/blob/main/ecosystem/typescript/sdk/src/hex_string.ts because\n * - We only care about address validation and conversion, this is a dependency for AccountAddress\n * - Resolving this dependency in UMD gives dependency errors\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HexString = void 0;\nvar utils_1 = require(\"@noble/hashes/utils\");\n/**\n * A util class for working with hex strings.\n * Hex strings are strings that are prefixed with `0x`\n */\nvar HexString = /** @class */function () {\n  /**\n   * Creates new HexString instance from regular string. If specified string already starts with \"0x\" prefix,\n   * it will not add another one\n   * @param hexString String to convert\n   * @example\n   * ```\n   *  const string = \"string\";\n   *  new HexString(string); // \"0xstring\"\n   * ```\n   */\n  function HexString(hexString) {\n    if (hexString.startsWith('0x')) {\n      this.hexString = hexString;\n    } else {\n      this.hexString = \"0x\".concat(hexString);\n    }\n  }\n  /**\n   * Creates new hex string from Buffer\n   * @param buffer A buffer to convert\n   * @returns New HexString\n   */\n  HexString.fromBuffer = function (buffer) {\n    return HexString.fromUint8Array(buffer);\n  };\n  /**\n   * Creates new hex string from Uint8Array\n   * @param arr Uint8Array to convert\n   * @returns New HexString\n   */\n  HexString.fromUint8Array = function (arr) {\n    return new HexString((0, utils_1.bytesToHex)(arr));\n  };\n  /**\n   * Ensures `hexString` is instance of `HexString` class\n   * @param hexString String to check\n   * @returns New HexString if `hexString` is regular string or `hexString` if it is HexString instance\n   * @example\n   * ```\n   *  const regularString = \"string\";\n   *  const hexString = new HexString(\"string\"); // \"0xstring\"\n   *  HexString.ensure(regularString); // \"0xstring\"\n   *  HexString.ensure(hexString); // \"0xstring\"\n   * ```\n   */\n  HexString.ensure = function (hexString) {\n    if (typeof hexString === 'string') {\n      return new HexString(hexString);\n    }\n    return hexString;\n  };\n  /**\n   * Getter for inner hexString\n   * @returns Inner hex string\n   */\n  HexString.prototype.hex = function () {\n    return this.hexString;\n  };\n  /**\n   * Getter for inner hexString without prefix\n   * @returns Inner hex string without prefix\n   * @example\n   * ```\n   *  const hexString = new HexString(\"string\"); // \"0xstring\"\n   *  hexString.noPrefix(); // \"string\"\n   * ```\n   */\n  HexString.prototype.noPrefix = function () {\n    return this.hexString.slice(2);\n  };\n  /**\n   * Overrides default `toString` method\n   * @returns Inner hex string\n   */\n  HexString.prototype.toString = function () {\n    return this.hex();\n  };\n  /**\n   * Trimmes extra zeroes in the begining of a string\n   * @returns Inner hexString without leading zeroes\n   * @example\n   * ```\n   *  new HexString(\"0x000000string\").toShortString(); // result = \"0xstring\"\n   * ```\n   */\n  HexString.prototype.toShortString = function () {\n    var trimmed = this.hexString.replace(/^0x0*/, '');\n    return \"0x\".concat(trimmed);\n  };\n  /**\n   * Converts hex string to a Uint8Array\n   * @returns Uint8Array from inner hexString without prefix\n   */\n  HexString.prototype.toUint8Array = function () {\n    return Uint8Array.from((0, utils_1.hexToBytes)(this.noPrefix()));\n  };\n  return HexString;\n}();\nexports.HexString = HexString;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;AAMA;AAKA;;;;AAIA;EAyCE;;;;;;;;;;EAUA,mBAAYA,SAAiB;IAC3B,IAAIA,SAAS,CAACC,UAAU,CAAC,IAAI,CAAC,EAAE;MAC9B,IAAI,CAACD,SAAS,GAAGA,SAAS;KAC3B,MAAM;MACL,IAAI,CAACA,SAAS,GAAG,YAAKA,SAAS,CAAE;;EAErC;EArDA;;;;;EAKOE,oBAAU,GAAjB,UAAkBC,MAAkB;IAClC,OAAOD,SAAS,CAACE,cAAc,CAACD,MAAM,CAAC;EACzC,CAAC;EAED;;;;;EAKOD,wBAAc,GAArB,UAAsBG,GAAe;IACnC,OAAO,IAAIH,SAAS,CAAC,sBAAU,EAACG,GAAG,CAAC,CAAC;EACvC,CAAC;EAED;;;;;;;;;;;;EAYOH,gBAAM,GAAb,UAAcF,SAAyB;IACrC,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAAE;MACjC,OAAO,IAAIE,SAAS,CAACF,SAAS,CAAC;;IAEjC,OAAOA,SAAS;EAClB,CAAC;EAoBD;;;;EAIAE,uBAAG,GAAH;IACE,OAAO,IAAI,CAACF,SAAS;EACvB,CAAC;EAED;;;;;;;;;EASAE,4BAAQ,GAAR;IACE,OAAO,IAAI,CAACF,SAAS,CAACM,KAAK,CAAC,CAAC,CAAC;EAChC,CAAC;EAED;;;;EAIAJ,4BAAQ,GAAR;IACE,OAAO,IAAI,CAACK,GAAG,EAAE;EACnB,CAAC;EAED;;;;;;;;EAQAL,iCAAa,GAAb;IACE,IAAMM,OAAO,GAAG,IAAI,CAACR,SAAS,CAACS,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;IACnD,OAAO,YAAKD,OAAO,CAAE;EACvB,CAAC;EAED;;;;EAIAN,gCAAY,GAAZ;IACE,OAAOQ,UAAU,CAACC,IAAI,CAAC,sBAAU,EAAC,IAAI,CAACC,QAAQ,EAAE,CAAC,CAAC;EACrD,CAAC;EACH,gBAAC;AAAD,CAAC,EA5GD;AAAaC","names":["hexString","startsWith","HexString","buffer","fromUint8Array","arr","slice","hex","trimmed","replace","Uint8Array","from","noPrefix","exports"],"sources":["../../src/utils/HexString.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}