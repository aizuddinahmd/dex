{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Modules = void 0;\nvar utils_1 = require(\"./utils\");\nvar Error_1 = require(\"../Error\");\n/**\n * MoralisModues handles all registered modules.\n * Any package that is used in Moralis, should register itself via this class.\n * This allows cross-communication between modules and easy management of the modules\n *\n * This class is responsible for:\n * - registering new modules\n * - removing modules (in theory possible for exotic usecases, but might break the app if done after initialisation)\n * - getting individual modules by name, type or everything\n */\nvar Modules = /** @class */function () {\n  function Modules() {\n    this.modules = new Map();\n  }\n  /**\n   * Register and setup a new module by providing a module that is extended from BaseClass.\n   * This will throw an error if the name is not unique\n   * @param module the module that needs to be registered\n   */\n  Modules.prototype.register = function (module) {\n    if (this.modules.has(module.name)) {\n      throw new Error_1.CoreError({\n        code: Error_1.CoreErrorCode.DUPLICATE_MODULE,\n        message: \"The module \\\"\".concat(module.name, \"\\\" has already been registered.\")\n      });\n    }\n    this.modules.set(module.name, module);\n    module.setup();\n  };\n  /**\n   * Returns the module with the given name.\n   * This module should have been registered with `register`\n   * @param name the module name\n   * @returns a valid BaseModule\n   * @throws a CoreError if no module with the given name has been registered\n   */\n  Modules.prototype.get = function (name) {\n    var module = this.modules.get(name);\n    if (!module) {\n      throw new Error_1.CoreError({\n        code: Error_1.CoreErrorCode.MODULE_NOT_FOUND,\n        message: \"Module \\\"\".concat(name, \"\\\" does not exist.\")\n      });\n    }\n    return module;\n  };\n  /**\n   * Tries to return the module with the given name if exist. Otherwise returns null.\n   * @param name the module name\n   * @returns a valid BaseModule or null\n   */\n  Modules.prototype.tryGet = function (name) {\n    return this.modules.get(name) || null;\n  };\n  Modules.prototype.has = function (name) {\n    return this.modules.has(name);\n  };\n  /**\n   * Returns the network module with the provided name.\n   * @param name the module name\n   * @returns a valid ApiModule\n   * @throws a CoreError if no network module with the given name has been registered\n   */\n  Modules.prototype.getApi = function (name) {\n    var module = this.modules.get(name);\n    if (!module || !(0, utils_1.isApiModule)(module)) {\n      throw new Error_1.CoreError({\n        code: Error_1.CoreErrorCode.MODULE_NOT_FOUND,\n        message: \"No ApiModule found with the name \\\"\".concat(name, \"\\\"\")\n      });\n    }\n    return module;\n  };\n  /**\n   * Remove the module with the provided name, if it has been registered,\n   * @param name the module name\n   * @throws a CoreError if the module cannot be found.\n   */\n  Modules.prototype.remove = function (name) {\n    var isRemoved = this.modules.delete(name);\n    if (!isRemoved) {\n      throw new Error_1.CoreError({\n        code: Error_1.CoreErrorCode.MODULE_NOT_FOUND,\n        message: \"Module \\\"\".concat(name, \"\\\" does not exist.\")\n      });\n    }\n  };\n  /**\n   * List all the registered modules\n   * @returns an array of BaseModule that have been registered\n   */\n  Modules.prototype.list = function () {\n    return Array.from(this.modules.values());\n  };\n  /**\n   * Returns the names of all registered modules\n   */\n  Modules.prototype.listNames = function () {\n    return this.list().map(function (module) {\n      return module.name;\n    });\n  };\n  /**\n   * List all the registered api modules (eg. modules with the type CoreModuleType.API)\n   */\n  Modules.prototype.listApis = function () {\n    return this.list().filter(utils_1.isApiModule);\n  };\n  return Modules;\n}();\nexports.Modules = Modules;","map":{"version":3,"mappings":";;;;;;AACA;AAEA;AAGA;;;;;;;;;;AAUA;EAAA;IACmB,YAAO,GAAG,IAAIA,GAAG,EAAkB;EAoGtD;EAlGE;;;;;EAKOC,0BAAQ,GAAf,UAAgBC,MAAoB;IAClC,IAAI,IAAI,CAACC,OAAO,CAACC,GAAG,CAACF,MAAM,CAACG,IAAI,CAAC,EAAE;MACjC,MAAM,IAAIC,iBAAS,CAAC;QAClBC,IAAI,EAAED,qBAAa,CAACE,gBAAgB;QACpCC,OAAO,EAAE,uBAAeP,MAAM,CAACG,IAAI;OACpC,CAAC;;IAGJ,IAAI,CAACF,OAAO,CAACO,GAAG,CAACR,MAAM,CAACG,IAAI,EAAEH,MAAM,CAAC;IACrCA,MAAM,CAACS,KAAK,EAAE;EAChB,CAAC;EAED;;;;;;;EAOOV,qBAAG,GAAV,UAAkDI,IAAY;IAC5D,IAAMH,MAAM,GAAG,IAAI,CAACC,OAAO,CAACS,GAAG,CAACP,IAAI,CAAC;IACrC,IAAI,CAACH,MAAM,EAAE;MACX,MAAM,IAAII,iBAAS,CAAC;QAAEC,IAAI,EAAED,qBAAa,CAACO,gBAAgB;QAAEJ,OAAO,EAAE,mBAAWJ,IAAI;MAAmB,CAAE,CAAC;;IAE5G,OAAOH,MAAuB;EAChC,CAAC;EAED;;;;;EAKOD,wBAAM,GAAb,UAAcI,IAAY;IACxB,OAAO,IAAI,CAACF,OAAO,CAACS,GAAG,CAACP,IAAI,CAAC,IAAI,IAAI;EACvC,CAAC;EAEMJ,qBAAG,GAAV,UAAWI,IAAY;IACrB,OAAO,IAAI,CAACF,OAAO,CAACC,GAAG,CAACC,IAAI,CAAC;EAC/B,CAAC;EAED;;;;;;EAMOJ,wBAAM,GAAb,UAAcI,IAAY;IACxB,IAAMH,MAAM,GAAG,IAAI,CAACC,OAAO,CAACS,GAAG,CAACP,IAAI,CAAC;IAErC,IAAI,CAACH,MAAM,IAAI,CAAC,uBAAW,EAACA,MAAM,CAAC,EAAE;MACnC,MAAM,IAAII,iBAAS,CAAC;QAClBC,IAAI,EAAED,qBAAa,CAACO,gBAAgB;QACpCJ,OAAO,EAAE,6CAAqCJ,IAAI;OACnD,CAAC;;IAGJ,OAAOH,MAAM;EACf,CAAC;EAED;;;;;EAKOD,wBAAM,GAAb,UAAcI,IAAY;IACxB,IAAMS,SAAS,GAAG,IAAI,CAACX,OAAO,CAACY,MAAM,CAACV,IAAI,CAAC;IAE3C,IAAI,CAACS,SAAS,EAAE;MACd,MAAM,IAAIR,iBAAS,CAAC;QAAEC,IAAI,EAAED,qBAAa,CAACO,gBAAgB;QAAEJ,OAAO,EAAE,mBAAWJ,IAAI;MAAmB,CAAE,CAAC;;EAE9G,CAAC;EAED;;;;EAIOJ,sBAAI,GAAX;IACE,OAAOe,KAAK,CAACC,IAAI,CAAC,IAAI,CAACd,OAAO,CAACe,MAAM,EAAE,CAAC;EAC1C,CAAC;EAED;;;EAGOjB,2BAAS,GAAhB;IACE,OAAO,IAAI,CAACkB,IAAI,EAAE,CAACC,GAAG,CAAC,UAAClB,MAAM;MAAK,aAAM,CAACG,IAAI;IAAX,CAAW,CAAC;EACjD,CAAC;EAED;;;EAGOJ,0BAAQ,GAAf;IACE,OAAO,IAAI,CAACkB,IAAI,EAAE,CAACE,MAAM,CAACC,mBAAW,CAAC;EACxC,CAAC;EACH,cAAC;AAAD,CAAC,EArGD;AAAaC","names":["Map","Modules","module","modules","has","name","Error_1","code","DUPLICATE_MODULE","message","set","setup","get","MODULE_NOT_FOUND","isRemoved","delete","Array","from","values","list","map","filter","utils_1","exports"],"sources":["../../src/Modules/Modules.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}