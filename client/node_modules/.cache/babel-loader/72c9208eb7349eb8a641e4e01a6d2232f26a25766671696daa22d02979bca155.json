{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.verifyChallengeEvmOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar common_evm_utils_1 = require(\"@moralisweb3/common-evm-utils\");\nexports.verifyChallengeEvmOperation = {\n  method: 'POST',\n  name: 'verifyChallengeEvm',\n  id: 'verifyChallengeEvm',\n  groupName: 'evm',\n  urlPathPattern: '/challenge/verify/evm',\n  bodyParamNames: ['message', 'signature'],\n  bodyType: 'properties',\n  getRequestUrlParams: getRequestUrlParams,\n  getRequestBody: getRequestBody,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams() {\n  return {};\n}\nfunction getRequestBody(request) {\n  return {\n    message: request.message,\n    signature: request.signature\n  };\n}\nfunction deserializeResponse(_a) {\n  var chainId = _a.chainId,\n    jsonResponse = __rest(_a, [\"chainId\"]);\n  return __assign(__assign({}, jsonResponse), {\n    chain: common_evm_utils_1.EvmChain.create(chainId),\n    address: common_evm_utils_1.EvmAddress.create(jsonResponse.address),\n    expirationTime: (0, common_core_1.maybe)(jsonResponse.expirationTime, function (value) {\n      return new Date(value);\n    }),\n    notBefore: (0, common_core_1.maybe)(jsonResponse.notBefore, function (value) {\n      return new Date(value);\n    })\n  });\n}\nfunction serializeRequest(request) {\n  return {\n    message: request.message,\n    signature: request.signature\n  };\n}\nfunction deserializeRequest(jsonRequest) {\n  return {\n    message: jsonRequest.message,\n    signature: jsonRequest.signature\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAuBaA,mCAA2B,GAKpC;EACFC,MAAM,EAAE,MAAM;EACdC,IAAI,EAAE,oBAAoB;EAC1BC,EAAE,EAAE,oBAAoB;EACxBC,SAAS,EAAE,KAAK;EAChBC,cAAc,EAAE,uBAAuB;EACvCC,cAAc,EAAE,CAAC,SAAS,EAAE,WAAW,CAAC;EACxCC,QAAQ,EAAE,YAAY;EAEtBC,mBAAmB;EACnBC,cAAc;EACdC,gBAAgB;EAChBC,kBAAkB;EAClBC,mBAAmB;CACpB;AAED;AAEA,SAASJ,mBAAmB;EAC1B,OAAO,EAAE;AACX;AAEA,SAASC,cAAc,CAACI,OAAkC;EACxD,OAAO;IACLC,OAAO,EAAED,OAAO,CAACC,OAAO;IACxBC,SAAS,EAAEF,OAAO,CAACE;GACpB;AACH;AAEA,SAASH,mBAAmB,CAACI,EAA4D;EAA1D,WAAO;IAAKC,YAAY,cAA1B,WAA4B,CAAF;EACrD,6BACKA,YAAY;IACfC,KAAK,EAAEC,2BAAQ,CAACC,MAAM,CAACC,OAAO,CAAC;IAC/BC,OAAO,EAAEH,6BAAU,CAACC,MAAM,CAACH,YAAY,CAACK,OAAO,CAAC;IAChDC,cAAc,EAAE,uBAAK,EAACN,YAAY,CAACM,cAAc,EAAE,UAACC,KAAK;MAAK,WAAIC,IAAI,CAACD,KAAK,CAAC;IAAf,CAAe,CAAC;IAC9EE,SAAS,EAAE,uBAAK,EAACT,YAAY,CAACS,SAAS,EAAE,UAACF,KAAK;MAAK,WAAIC,IAAI,CAACD,KAAK,CAAC;IAAf,CAAe;EAAC;AAExE;AAEA,SAASd,gBAAgB,CAACG,OAAkC;EAC1D,OAAO;IACLC,OAAO,EAAED,OAAO,CAACC,OAAO;IACxBC,SAAS,EAAEF,OAAO,CAACE;GACpB;AACH;AAEA,SAASJ,kBAAkB,CAACgB,WAA0C;EACpE,OAAO;IACLb,OAAO,EAAEa,WAAW,CAACb,OAAO;IAC5BC,SAAS,EAAEY,WAAW,CAACZ;GACxB;AACH","names":["exports","method","name","id","groupName","urlPathPattern","bodyParamNames","bodyType","getRequestUrlParams","getRequestBody","serializeRequest","deserializeRequest","deserializeResponse","request","message","signature","_a","jsonResponse","chain","common_evm_utils_1","create","chainId","address","expirationTime","value","Date","notBefore","jsonRequest"],"sources":["../../../src/operations/evm/verifyChallengeEvmOperation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}