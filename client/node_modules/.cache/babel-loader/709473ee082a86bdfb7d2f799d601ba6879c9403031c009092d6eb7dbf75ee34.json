{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNFTTransfersOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get transfers of an NFT given a contract address and token ID. */\nexports.getNFTTransfersOperation = {\n  method: 'GET',\n  name: 'getNFTTransfers',\n  id: 'getNFTTransfers',\n  groupName: 'nft',\n  urlPathPattern: '/nft/{address}/{tokenId}/transfers',\n  urlPathParamNames: ['address', 'tokenId'],\n  urlSearchParamNames: ['chain', 'format', 'limit', 'cursor', 'disableTotal'],\n  firstPageIndex: 0,\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,\n    format: request.format,\n    limit: (0, common_core_1.maybe)(request.limit, String),\n    cursor: request.cursor,\n    tokenId: request.tokenId,\n    disable_total: request.disableTotal\n  };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n  var _a;\n  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (transfer) {\n    return dataTypes_1.EvmNftTransfer.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(transfer)), {\n      chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),\n      tokenAddress: dataTypes_1.EvmAddress.create(transfer.to_address, core),\n      toAddress: dataTypes_1.EvmAddress.create(transfer.to_address, core),\n      operator: transfer.operator ? dataTypes_1.EvmAddress.create(transfer.operator, core) : null,\n      fromAddress: transfer.from_address ? dataTypes_1.EvmAddress.create(transfer.from_address, core) : null,\n      value: transfer.value ? dataTypes_1.EvmNative.create(transfer.value) : null,\n      blockTimestamp: new Date(transfer.block_timestamp)\n    }));\n  });\n}\nfunction serializeRequest(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    format: request.format,\n    limit: request.limit,\n    cursor: request.cursor,\n    address: dataTypes_1.EvmAddress.create(request.address, core).checksum,\n    tokenId: request.tokenId,\n    disableTotal: request.disableTotal\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    format: jsonRequest.format,\n    limit: jsonRequest.limit,\n    cursor: jsonRequest.cursor,\n    address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),\n    tokenId: jsonRequest.tokenId,\n    disableTotal: jsonRequest.disableTotal\n  };\n}","map":{"version":3,"mappings":"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","names":["exports","method","name","id","groupName","urlPathPattern","urlPathParamNames","urlSearchParamNames","firstPageIndex","getRequestUrlParams","serializeRequest","deserializeRequest","deserializeResponse","request","core","chain","EvmChainResolver_1","resolve","apiHex","address","dataTypes_1","create","lowercase","format","limit","String","cursor","tokenId","disable_total","disableTotal","jsonResponse","result","map","transfer","tokenAddress","to_address","toAddress","operator","fromAddress","from_address","value","blockTimestamp","Date","block_timestamp","checksum","jsonRequest"],"sources":["../../../src/operations/nft/getNFTTransfersOperation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}