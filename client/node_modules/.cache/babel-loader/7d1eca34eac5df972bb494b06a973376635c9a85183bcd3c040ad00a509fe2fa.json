{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LoggerController = void 0;\n/* eslint-disable no-console */\nvar isMoralisError_1 = require(\"../Error/isMoralisError\");\nvar CoreConfig_1 = require(\"../Config/CoreConfig\");\nvar logLevelMap = {\n  verbose: 5,\n  debug: 4,\n  info: 3,\n  warning: 2,\n  error: 1,\n  off: 0\n};\n/**\n * LoggerController, responsible to create log messages for each module.\n * It should be created with the name of the module like `new Logger('module-name')`\n * It will then prefix any logs with that module-name for easy debugging\n * It will show only logs up to the specified `logLevel` in the MoralisConfig\n */\nvar LoggerController = /** @class */function () {\n  function LoggerController(moduleName, config) {\n    this.moduleName = moduleName;\n    this.config = config;\n  }\n  LoggerController.create = function (moduleName, core) {\n    return new LoggerController(moduleName, core.config);\n  };\n  Object.defineProperty(LoggerController.prototype, \"level\", {\n    get: function () {\n      return this.config.get(CoreConfig_1.CoreConfig.logLevel);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  LoggerController.prototype._transport = function (level, message, details) {\n    var logMessage = this._makeLogMessage(message);\n    var args = [logMessage, details].filter(function (arg) {\n      return arg != null;\n    });\n    switch (level) {\n      case 'error':\n        console.error.apply(console, args);\n        break;\n      case 'warn':\n        console.warn.apply(console, args);\n        break;\n      case 'log':\n        console.log.apply(console, args);\n        break;\n    }\n  };\n  LoggerController.prototype._shouldLog = function (logLevel) {\n    var level = logLevelMap[logLevel];\n    var acceptedLevel = logLevelMap[this.level];\n    if (level > acceptedLevel) {\n      return false;\n    }\n    return true;\n  };\n  LoggerController.prototype._makeLogMessage = function (message) {\n    return \"Moralis[\".concat(this.moduleName, \"]: \").concat(message);\n  };\n  LoggerController.prototype.error = function (error, details) {\n    if (!this._shouldLog('error')) {\n      return;\n    }\n    var message = '';\n    if (typeof error === 'string') {\n      message = error;\n    } else if ((0, isMoralisError_1.isMoralisError)(error)) {\n      message = error.message;\n      if (error.details) {\n        if (details) {\n          details._errorDetails = error.details;\n        } else {\n          details = {\n            _errorDetails: error.details\n          };\n        }\n      }\n    } else {\n      message = error.message;\n    }\n    this._transport('error', message, details);\n  };\n  LoggerController.prototype.warn = function (message, details) {\n    if (!this._shouldLog('warning')) {\n      return;\n    }\n    this._transport('warn', message, details);\n  };\n  LoggerController.prototype.info = function (message, details) {\n    if (!this._shouldLog('info')) {\n      return;\n    }\n    this._transport('log', message, details);\n  };\n  LoggerController.prototype.debug = function (message, details) {\n    if (!this._shouldLog('debug')) {\n      return;\n    }\n    this._transport('log', message, details);\n  };\n  LoggerController.prototype.verbose = function (message, details) {\n    if (!this._shouldLog('verbose')) {\n      return;\n    }\n    this._transport('log', message, details);\n  };\n  return LoggerController;\n}();\nexports.LoggerController = LoggerController;","map":{"version":3,"mappings":"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","names":["logLevelMap","verbose","debug","info","warning","error","off","moduleName","config","LoggerController","core","Object","get","CoreConfig_1","logLevel","level","message","details","logMessage","_makeLogMessage","args","filter","arg","console","warn","log","acceptedLevel","_shouldLog","_errorDetails","_transport","exports"],"sources":["../../src/controllers/LoggerController.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}