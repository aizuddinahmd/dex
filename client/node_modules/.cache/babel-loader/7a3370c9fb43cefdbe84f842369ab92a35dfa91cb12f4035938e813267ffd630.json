{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getContractNFTsOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/**\n * Get NFTs for a given contract address, including metadata for all NFTs (where available).\n * * Results are limited to 100 per page by default\n * * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.\n */\nexports.getContractNFTsOperation = {\n  method: 'GET',\n  name: 'getContractNFTs',\n  id: 'getContractNFTs',\n  groupName: 'nft',\n  urlPathPattern: '/nft/{address}',\n  urlPathParamNames: ['address'],\n  urlSearchParamNames: ['chain', 'format', 'limit', 'totalRanges', 'range', 'cursor', 'normalizeMetadata', 'disableTotal'],\n  firstPageIndex: 0,\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,\n    format: request.format,\n    limit: (0, common_core_1.maybe)(request.limit, String),\n    totalRanges: (0, common_core_1.maybe)(request.totalRanges, String),\n    range: (0, common_core_1.maybe)(request.range, String),\n    cursor: request.cursor,\n    normalizeMetadata: request.normalizeMetadata,\n    disable_total: request.disableTotal\n  };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n  var _a;\n  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (nft) {\n    return dataTypes_1.EvmNft.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(nft)), {\n      chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),\n      ownerOf: nft.owner_of ? dataTypes_1.EvmAddress.create(nft.owner_of, core) : undefined,\n      lastMetadataSync: nft.last_metadata_sync ? new Date(nft.last_metadata_sync) : undefined,\n      lastTokenUriSync: nft.last_token_uri_sync ? new Date(nft.last_token_uri_sync) : undefined\n    }), core);\n  });\n}\nfunction serializeRequest(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    format: request.format,\n    limit: request.limit,\n    totalRanges: request.totalRanges,\n    range: request.range,\n    cursor: request.cursor,\n    address: dataTypes_1.EvmAddress.create(request.address, core).checksum,\n    normalizeMetadata: request.normalizeMetadata,\n    disableTotal: request.disableTotal\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    format: jsonRequest.format,\n    limit: jsonRequest.limit,\n    totalRanges: jsonRequest.totalRanges,\n    range: jsonRequest.range,\n    cursor: jsonRequest.cursor,\n    address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),\n    normalizeMetadata: jsonRequest.normalizeMetadata,\n    disableTotal: jsonRequest.disableTotal\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA;AAQA;AACA;AA2BA;;;;;AAKaA,gCAAwB,GAKjC;EACFC,MAAM,EAAE,KAAK;EACbC,IAAI,EAAE,iBAAiB;EACvBC,EAAE,EAAE,iBAAiB;EACrBC,SAAS,EAAE,KAAK;EAChBC,cAAc,EAAE,gBAAgB;EAChCC,iBAAiB,EAAE,CAAC,SAAS,CAAC;EAC9BC,mBAAmB,EAAE,CACnB,OAAO,EACP,QAAQ,EACR,OAAO,EACP,aAAa,EACb,OAAO,EACP,QAAQ,EACR,mBAAmB,EACnB,cAAc,CACf;EACDC,cAAc,EAAE,CAAC;EAEjBC,mBAAmB;EACnBC,gBAAgB;EAChBC,kBAAkB;EAClBC,mBAAmB;CACpB;AAED;AACA,SAASH,mBAAmB,CAACI,OAA+B,EAAEC,IAAU;EACtE,OAAO;IACLC,KAAK,EAAEC,mCAAgB,CAACC,OAAO,CAACJ,OAAO,CAACE,KAAK,EAAED,IAAI,CAAC,CAACI,MAAM;IAC3DC,OAAO,EAAEC,sBAAU,CAACC,MAAM,CAACR,OAAO,CAACM,OAAO,EAAEL,IAAI,CAAC,CAACQ,SAAS;IAC3DC,MAAM,EAAEV,OAAO,CAACU,MAAM;IACtBC,KAAK,EAAE,uBAAK,EAACX,OAAO,CAACW,KAAK,EAAEC,MAAM,CAAC;IACnCC,WAAW,EAAE,uBAAK,EAACb,OAAO,CAACa,WAAW,EAAED,MAAM,CAAC;IAC/CE,KAAK,EAAE,uBAAK,EAACd,OAAO,CAACc,KAAK,EAAEF,MAAM,CAAC;IACnCG,MAAM,EAAEf,OAAO,CAACe,MAAM;IACtBC,iBAAiB,EAAEhB,OAAO,CAACgB,iBAAiB;IAC5CC,aAAa,EAAEjB,OAAO,CAACkB;GACxB;AACH;AAEA,SAASnB,mBAAmB,CAACoB,YAAyC,EAAEnB,OAA+B,EAAEC,IAAU;;EACjH,OAAO,CAAC,kBAAY,CAACmB,MAAM,mCAAI,EAAE,EAAEC,GAAG,CAAC,UAACC,GAAG;IACzC,yBAAM,CAACd,MAAM,uBAEN,6BAAW,EAACc,GAAG,CAAC;MACnBpB,KAAK,EAAEC,mCAAgB,CAACC,OAAO,CAACJ,OAAO,CAACE,KAAK,EAAED,IAAI,CAAC;MACpDsB,OAAO,EAAED,GAAG,CAACE,QAAQ,GAAGjB,sBAAU,CAACC,MAAM,CAACc,GAAG,CAACE,QAAQ,EAAEvB,IAAI,CAAC,GAAGwB,SAAS;MACzEC,gBAAgB,EAAEJ,GAAG,CAACK,kBAAkB,GAAG,IAAIC,IAAI,CAACN,GAAG,CAACK,kBAAkB,CAAC,GAAGF,SAAS;MACvFI,gBAAgB,EAAEP,GAAG,CAACQ,mBAAmB,GAAG,IAAIF,IAAI,CAACN,GAAG,CAACQ,mBAAmB,CAAC,GAAGL;IAAS,IAE3FxB,IAAI,CACL;EATD,CASC,CACF;AACH;AAEA,SAASJ,gBAAgB,CAACG,OAA+B,EAAEC,IAAU;EACnE,OAAO;IACLC,KAAK,EAAEC,mCAAgB,CAACC,OAAO,CAACJ,OAAO,CAACE,KAAK,EAAED,IAAI,CAAC,CAACI,MAAM;IAC3DK,MAAM,EAAEV,OAAO,CAACU,MAAM;IACtBC,KAAK,EAAEX,OAAO,CAACW,KAAK;IACpBE,WAAW,EAAEb,OAAO,CAACa,WAAW;IAChCC,KAAK,EAAEd,OAAO,CAACc,KAAK;IACpBC,MAAM,EAAEf,OAAO,CAACe,MAAM;IACtBT,OAAO,EAAEC,sBAAU,CAACC,MAAM,CAACR,OAAO,CAACM,OAAO,EAAEL,IAAI,CAAC,CAAC8B,QAAQ;IAC1Df,iBAAiB,EAAEhB,OAAO,CAACgB,iBAAiB;IAC5CE,YAAY,EAAElB,OAAO,CAACkB;GACvB;AACH;AAEA,SAASpB,kBAAkB,CAACkC,WAAuC,EAAE/B,IAAU;EAC7E,OAAO;IACLC,KAAK,EAAEK,oBAAQ,CAACC,MAAM,CAACwB,WAAW,CAAC9B,KAAK,EAAED,IAAI,CAAC;IAC/CS,MAAM,EAAEsB,WAAW,CAACtB,MAAM;IAC1BC,KAAK,EAAEqB,WAAW,CAACrB,KAAK;IACxBE,WAAW,EAAEmB,WAAW,CAACnB,WAAW;IACpCC,KAAK,EAAEkB,WAAW,CAAClB,KAAK;IACxBC,MAAM,EAAEiB,WAAW,CAACjB,MAAM;IAC1BT,OAAO,EAAEC,sBAAU,CAACC,MAAM,CAACwB,WAAW,CAAC1B,OAAO,EAAEL,IAAI,CAAC;IACrDe,iBAAiB,EAAEgB,WAAW,CAAChB,iBAAiB;IAChDE,YAAY,EAAEc,WAAW,CAACd;GAC3B;AACH","names":["exports","method","name","id","groupName","urlPathPattern","urlPathParamNames","urlSearchParamNames","firstPageIndex","getRequestUrlParams","serializeRequest","deserializeRequest","deserializeResponse","request","core","chain","EvmChainResolver_1","resolve","apiHex","address","dataTypes_1","create","lowercase","format","limit","String","totalRanges","range","cursor","normalizeMetadata","disable_total","disableTotal","jsonResponse","result","map","nft","ownerOf","owner_of","undefined","lastMetadataSync","last_metadata_sync","Date","lastTokenUriSync","last_token_uri_sync","checksum","jsonRequest"],"sources":["../../../src/operations/nft/getContractNFTsOperation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}