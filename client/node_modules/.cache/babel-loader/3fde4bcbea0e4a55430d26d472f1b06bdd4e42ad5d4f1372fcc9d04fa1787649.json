{"ast":null,"code":"\"use strict\";\n\n/**\n * Copied (and remove obsolete functionalities) from https://github.com/aptos-labs/aptos-core/blob/main/ecosystem/typescript/sdk/src/aptos_types/account_address.ts because\n * - We only care about address validation and conversion\n * - Resolving this dependency in UMD gives dependency errors\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AccountAddress = void 0;\nvar HexString_1 = require(\"./HexString\");\nvar AccountAddress = /** @class */function () {\n  function AccountAddress(address) {\n    if (address.length !== AccountAddress.LENGTH) {\n      throw new Error('Expected address of length 32');\n    }\n    this.address = address;\n  }\n  /**\n   * Creates AccountAddress from a hex string.\n   * @param addr Hex string can be with a prefix or without a prefix,\n   *   e.g. '0x1aa' or '1aa'. Hex string will be left padded with 0s if too short.\n   */\n  AccountAddress.fromHex = function (addr) {\n    var address = HexString_1.HexString.ensure(addr);\n    // If an address hex has odd number of digits, padd the hex string with 0\n    // e.g. '1aa' would become '01aa'.\n    if (address.noPrefix().length % 2 !== 0) {\n      address = new HexString_1.HexString(\"0\".concat(address.noPrefix()));\n    }\n    var addressBytes = address.toUint8Array();\n    if (addressBytes.length > AccountAddress.LENGTH) {\n      // eslint-disable-next-line quotes\n      throw new Error(\"Hex string is too long. Address's length is 32 bytes.\");\n    } else if (addressBytes.length === AccountAddress.LENGTH) {\n      return new AccountAddress(addressBytes);\n    }\n    var res = new Uint8Array(AccountAddress.LENGTH);\n    res.set(addressBytes, AccountAddress.LENGTH - addressBytes.length);\n    return new AccountAddress(res);\n  };\n  /**\n   * Checks if the string is a valid AccountAddress\n   * @param addr Hex string can be with a prefix or without a prefix,\n   *   e.g. '0x1aa' or '1aa'. Hex string will be left padded with 0s if too short.\n   */\n  AccountAddress.isValid = function (addr) {\n    // At least one zero is required\n    if (addr === '') {\n      return false;\n    }\n    var address = HexString_1.HexString.ensure(addr);\n    // If an address hex has odd number of digits, padd the hex string with 0\n    // e.g. '1aa' would become '01aa'.\n    if (address.noPrefix().length % 2 !== 0) {\n      address = new HexString_1.HexString(\"0\".concat(address.noPrefix()));\n    }\n    var addressBytes = address.toUint8Array();\n    return addressBytes.length <= AccountAddress.LENGTH;\n  };\n  AccountAddress.LENGTH = 32;\n  AccountAddress.CORE_CODE_ADDRESS = AccountAddress.fromHex('0x1');\n  return AccountAddress;\n}();\nexports.AccountAddress = AccountAddress;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;AAMA;AAIA;EAOE,wBAAYA,OAAc;IACxB,IAAIA,OAAO,CAACC,MAAM,KAAKC,cAAc,CAACC,MAAM,EAAE;MAC5C,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;;IAElD,IAAI,CAACJ,OAAO,GAAGA,OAAO;EACxB;EAEA;;;;;EAKOE,sBAAO,GAAd,UAAeG,IAAoB;IACjC,IAAIL,OAAO,GAAGM,qBAAS,CAACC,MAAM,CAACF,IAAI,CAAC;IAEpC;IACA;IACA,IAAIL,OAAO,CAACQ,QAAQ,EAAE,CAACP,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;MACvCD,OAAO,GAAG,IAAIM,qBAAS,CAAC,WAAIN,OAAO,CAACQ,QAAQ,EAAE,CAAE,CAAC;;IAGnD,IAAMC,YAAY,GAAGT,OAAO,CAACU,YAAY,EAAE;IAE3C,IAAID,YAAY,CAACR,MAAM,GAAGC,cAAc,CAACC,MAAM,EAAE;MAC/C;MACA,MAAM,IAAIC,KAAK,CAAC,uDAAuD,CAAC;KACzE,MAAM,IAAIK,YAAY,CAACR,MAAM,KAAKC,cAAc,CAACC,MAAM,EAAE;MACxD,OAAO,IAAID,cAAc,CAACO,YAAY,CAAC;;IAGzC,IAAME,GAAG,GAAU,IAAIC,UAAU,CAACV,cAAc,CAACC,MAAM,CAAC;IACxDQ,GAAG,CAACE,GAAG,CAACJ,YAAY,EAAEP,cAAc,CAACC,MAAM,GAAGM,YAAY,CAACR,MAAM,CAAC;IAElE,OAAO,IAAIC,cAAc,CAACS,GAAG,CAAC;EAChC,CAAC;EAED;;;;;EAKOT,sBAAO,GAAd,UAAeG,IAAoB;IACjC;IACA,IAAIA,IAAI,KAAK,EAAE,EAAE;MACf,OAAO,KAAK;;IAGd,IAAIL,OAAO,GAAGM,qBAAS,CAACC,MAAM,CAACF,IAAI,CAAC;IAEpC;IACA;IACA,IAAIL,OAAO,CAACQ,QAAQ,EAAE,CAACP,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;MACvCD,OAAO,GAAG,IAAIM,qBAAS,CAAC,WAAIN,OAAO,CAACQ,QAAQ,EAAE,CAAE,CAAC;;IAGnD,IAAMC,YAAY,GAAGT,OAAO,CAACU,YAAY,EAAE;IAE3C,OAAOD,YAAY,CAACR,MAAM,IAAIC,cAAc,CAACC,MAAM;EACrD,CAAC;EAhEeD,qBAAM,GAAW,EAAE;EAI5BA,gCAAiB,GAAmBA,cAAc,CAACY,OAAO,CAAC,KAAK,CAAC;EA6D1E,qBAAC;CAAA,EAlED;AAAaC","names":["address","length","AccountAddress","LENGTH","Error","addr","HexString_1","ensure","noPrefix","addressBytes","toUint8Array","res","Uint8Array","set","fromHex","exports"],"sources":["../../src/utils/AccountAddress.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}