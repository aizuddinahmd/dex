{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Erc20Transfer = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar EvmAddress_1 = require(\"../EvmAddress\");\nvar EvmChain_1 = require(\"../EvmChain\");\n/**\n * The Erc20Transfer is a representation of an Erc20 token transfer.\n *\n * @category DataType\n */\nvar Erc20Transfer = /** @class */function () {\n  function Erc20Transfer(data) {\n    this._data = Erc20Transfer.parse(data);\n  }\n  /**\n   * Create a new instance of Erc20Transfer from any valid input\n   * @param data - the Erc20Transferish type\n   * @example\n   * ```\n   * const transfer = Erc20Transfer.create(data);\n   *```\n   */\n  Erc20Transfer.create = function (data) {\n    if (data instanceof Erc20Transfer) {\n      return data;\n    }\n    return new Erc20Transfer(data);\n  };\n  /**\n   * Check the equality between two Erc20 transfers\n   * @param dataA - The first transfer to compare\n   * @param dataB - The second transfer to compare\n   * @example Erc20Transfer.equals(dataA, dataB)\n   * @returns true if the transfers are equal, false otherwise\n   */\n  Erc20Transfer.equals = function (dataA, dataB) {\n    var tokenA = Erc20Transfer.create(dataA);\n    var tokenB = Erc20Transfer.create(dataB);\n    return JSON.stringify(tokenA.toJSON()) === JSON.stringify(tokenB.toJSON());\n  };\n  /**\n   * Checks the equality of the current trnasfer with another erc20 trnasfer\n   * @param data - the transfer to compare with\n   * @example transfer.equals(data)\n   * @returns true if the transfers are equal, false otherwise\n   */\n  Erc20Transfer.prototype.equals = function (data) {\n    return Erc20Transfer.equals(this, data);\n  };\n  /**\n   * @returns a JSON represention of the transfer.\n   * @example transfer.toJSON()\n   */\n  Erc20Transfer.prototype.toJSON = function () {\n    var data = this._data;\n    return __assign(__assign({}, data), {\n      chain: data.chain.format(),\n      address: data.address.format(),\n      blockNumber: data.blockNumber.toString(),\n      toAddress: data.toAddress.format(),\n      fromAddress: data.fromAddress.format(),\n      value: data.value.toString()\n    });\n  };\n  /**\n   * @returns a JSON represention of the transfer.\n   * @example transfer.format()\n   */\n  Erc20Transfer.prototype.format = function () {\n    return this.toJSON();\n  };\n  Object.defineProperty(Erc20Transfer.prototype, \"result\", {\n    /**\n     * @returns all the data without casting it to JSON.\n     * @example transfer.result\n     */\n    get: function () {\n      return this._data;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Transfer.prototype, \"address\", {\n    /**\n     * @returns the address of the tranfer\n     * @example transfer.address // EvmAddress\n     */\n    get: function () {\n      return this._data.address;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Transfer.prototype, \"blockHash\", {\n    /**\n     * @returns the block hash of the tranfer\n     * @example transfer.blockHash // \"0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86\"\n     */\n    get: function () {\n      return this._data.blockHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Transfer.prototype, \"blockNumber\", {\n    /**\n     * @returns the block number of the tranfer\n     * @example transfer.blockNumber // BigNumber\n     */\n    get: function () {\n      return this._data.blockNumber;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Transfer.prototype, \"blockTimestamp\", {\n    /**\n     * @returns the block timestamp of the tranfer\n     * @example transfer.blockTimestamp // Date\n     */\n    get: function () {\n      return this._data.blockTimestamp;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Transfer.prototype, \"chain\", {\n    /**\n     * @returns the chain of the tranfer\n     * @example transfer.chain // EvmChain\n     */\n    get: function () {\n      return this._data.chain;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Transfer.prototype, \"fromAddress\", {\n    /**\n     * @returns the from address of the tranfer\n     * @example transfer.fromAddress // EvmAddress\n     */\n    get: function () {\n      return this._data.fromAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Transfer.prototype, \"toAddress\", {\n    /**\n     * @returns the to address of the tranfer\n     * @example transfer.toAddress // EvmAddress\n     */\n    get: function () {\n      return this._data.toAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Transfer.prototype, \"transactionHash\", {\n    /**\n     * @returns the transaction hash of the tranfer\n     * @example transfer.transactionHash // \"0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86\"\n     */\n    get: function () {\n      return this._data.transactionHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Transfer.prototype, \"value\", {\n    /**\n     * @returns the value of the tranfer\n     * @example transfer.value // BigNumber\n     */\n    get: function () {\n      return this._data.value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Transfer.prototype, \"transactionIndex\", {\n    /**\n     * @returns the transactionIndex of the tranfer\n     * @example transfer.transactionIndex // 3\n     */\n    get: function () {\n      return this._data.transactionIndex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Erc20Transfer.prototype, \"logIndex\", {\n    /**\n     * @returns the logIndex of the tranfer\n     * @example transfer.logIndex // 2\n     */\n    get: function () {\n      return this._data.logIndex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Erc20Transfer.parse = function (data) {\n    return __assign(__assign({}, data), {\n      chain: EvmChain_1.EvmChain.create(data.chain),\n      address: EvmAddress_1.EvmAddress.create(data.address),\n      blockTimestamp: (0, common_core_1.dateInputToDate)(data.blockTimestamp),\n      blockNumber: common_core_1.BigNumber.create(data.blockNumber),\n      toAddress: EvmAddress_1.EvmAddress.create(data.toAddress),\n      fromAddress: EvmAddress_1.EvmAddress.create(data.fromAddress),\n      value: common_core_1.BigNumber.create(data.value)\n    });\n  };\n  return Erc20Transfer;\n}();\nexports.Erc20Transfer = Erc20Transfer;","map":{"version":3,"mappings":"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","names":["data","_data","Erc20Transfer","parse","dataA","dataB","tokenA","create","tokenB","JSON","stringify","toJSON","equals","chain","format","address","blockNumber","toString","toAddress","fromAddress","value","Object","blockHash","blockTimestamp","transactionHash","transactionIndex","logIndex","EvmChain_1","EvmAddress_1","common_core_1","exports"],"sources":["../../../src/dataTypes/Erc20Transfer/Erc20Transfer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}