{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTokenMetadataBySymbolOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get metadata for a list of token symbols (name, symbol, decimals, logo). */\nexports.getTokenMetadataBySymbolOperation = {\n  method: 'GET',\n  name: 'getTokenMetadataBySymbol',\n  id: 'getTokenMetadataBySymbol',\n  groupName: 'token',\n  urlPathPattern: '/erc20/metadata/symbols',\n  urlSearchParamNames: ['chain', 'symbols'],\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    symbols: request.symbols\n  };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n  return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function (token) {\n    return {\n      token: dataTypes_1.Erc20Token.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(token)), {\n        contractAddress: token.address,\n        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core)\n      }), core),\n      blockNumber: token.block_number,\n      validated: token.validated\n    };\n  });\n}\nfunction serializeRequest(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    symbols: request.symbols\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    symbols: jsonRequest.symbols\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAyBA;AACaA,yCAAiC,GAK1C;EACFC,MAAM,EAAE,KAAK;EACbC,IAAI,EAAE,0BAA0B;EAChCC,EAAE,EAAE,0BAA0B;EAC9BC,SAAS,EAAE,OAAO;EAClBC,cAAc,EAAE,yBAAyB;EACzCC,mBAAmB,EAAE,CAAC,OAAO,EAAE,SAAS,CAAC;EAEzCC,mBAAmB;EACnBC,gBAAgB;EAChBC,kBAAkB;EAClBC,mBAAmB;CACpB;AAED;AAEA,SAASH,mBAAmB,CAACI,OAAwC,EAAEC,IAAU;EAC/E,OAAO;IACLC,KAAK,EAAEC,mCAAgB,CAACC,OAAO,CAACJ,OAAO,CAACE,KAAK,EAAED,IAAI,CAAC,CAACI,MAAM;IAC3DC,OAAO,EAAEN,OAAO,CAACM;GAClB;AACH;AAEA,SAASP,mBAAmB,CAC1BQ,YAAkD,EAClDP,OAAwC,EACxCC,IAAU;EAEV,OAAO,CAACM,YAAY,aAAZA,YAAY,cAAZA,YAAY,GAAI,EAAE,EAAEC,GAAG,CAAC,UAACC,KAAK;IACpC,OAAO;MACLA,KAAK,EAAEC,sBAAU,CAACC,MAAM,uBAEjB,6BAAW,EAACF,KAAK,CAAC;QACrBG,eAAe,EAAEH,KAAK,CAACI,OAAO;QAC9BX,KAAK,EAAEC,mCAAgB,CAACC,OAAO,CAACJ,OAAO,CAACE,KAAK,EAAED,IAAI;MAAC,IAEtDA,IAAI,CACL;MACDa,WAAW,EAAEL,KAAK,CAACM,YAAY;MAC/BC,SAAS,EAAEP,KAAK,CAACO;KAClB;EACH,CAAC,CAAC;AACJ;AAEA,SAASnB,gBAAgB,CAACG,OAAwC,EAAEC,IAAU;EAC5E,OAAO;IACLC,KAAK,EAAEC,mCAAgB,CAACC,OAAO,CAACJ,OAAO,CAACE,KAAK,EAAED,IAAI,CAAC,CAACI,MAAM;IAC3DC,OAAO,EAAEN,OAAO,CAACM;GAClB;AACH;AAEA,SAASR,kBAAkB,CACzBmB,WAAgD,EAChDhB,IAAU;EAEV,OAAO;IACLC,KAAK,EAAEQ,oBAAQ,CAACC,MAAM,CAACM,WAAW,CAACf,KAAK,EAAED,IAAI,CAAC;IAC/CK,OAAO,EAAEW,WAAW,CAACX;GACtB;AACH","names":["exports","method","name","id","groupName","urlPathPattern","urlSearchParamNames","getRequestUrlParams","serializeRequest","deserializeRequest","deserializeResponse","request","core","chain","EvmChainResolver_1","resolve","apiHex","symbols","jsonResponse","map","token","dataTypes_1","create","contractAddress","address","blockNumber","block_number","validated","jsonRequest"],"sources":["../../../src/operations/token/getTokenMetadataBySymbolOperation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}