{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AxiosRetry = void 0;\nvar axios_1 = __importDefault(require(\"axios\"));\nvar isTest_1 = require(\"../environment/isTest\");\nvar noop_1 = require(\"../utils/noop\");\nvar AxiosRetry = /** @class */function () {\n  function AxiosRetry() {}\n  // TODO: refactor to reduce complexity\n  // eslint-disable-next-line complexity\n  AxiosRetry.request = function (retryConfig, requestConfig) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var attempt, response, e_1, axiosError;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            attempt = 1;\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 5,, 6]);\n            if (!(0, isTest_1.isTest)()) return [3 /*break*/, 3];\n            /**\n             * Known issue where in Jest, axios.request() will leave open handlers.\n             * See: https://stackoverflow.com/questions/69169492/async-external-function-leaves-open-handles-jest-supertest-express\n             */\n            // eslint-disable-next-line no-await-in-loop -- we have sequential and conditional async requests\n            return [4 /*yield*/, process.nextTick(noop_1.noop)];\n          case 2:\n            /**\n             * Known issue where in Jest, axios.request() will leave open handlers.\n             * See: https://stackoverflow.com/questions/69169492/async-external-function-leaves-open-handles-jest-supertest-express\n             */\n            // eslint-disable-next-line no-await-in-loop -- we have sequential and conditional async requests\n            _b.sent();\n            _b.label = 3;\n          case 3:\n            return [4 /*yield*/, axios_1.default.request(requestConfig)];\n          case 4:\n            response = _b.sent();\n            return [2 /*return*/, response];\n          case 5:\n            e_1 = _b.sent();\n            if (attempt >= retryConfig.maxRetries) {\n              throw e_1;\n            }\n            if (!requestConfig.method || !retryConfig.allowedMethods.includes(requestConfig.method.toUpperCase())) {\n              throw e_1;\n            }\n            if (!axios_1.default.isAxiosError(e_1)) {\n              throw e_1;\n            }\n            axiosError = e_1;\n            if (!((_a = axiosError.response) === null || _a === void 0 ? void 0 : _a.status) || !retryConfig.allowedResponseStatuses.includes(axiosError.response.status)) {\n              throw e_1;\n            }\n            if (retryConfig.beforeRetry) {\n              retryConfig.beforeRetry(attempt, axiosError);\n            }\n            return [3 /*break*/, 6];\n          case 6:\n            attempt++;\n            return [3 /*break*/, 1];\n          case 7:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return AxiosRetry;\n}();\nexports.AxiosRetry = AxiosRetry;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AASA;EAAA,uBAwCA;EAvCE;EACA;EACoBA,kBAAO,GAA3B,UACEC,WAA6B,EAC7BC,aAAuC;;;;;;;YAE9BC,OAAO,GAAG,CAAC;;;;iBAEZ,mBAAM,GAAE,EAAR;YACF;;;;YAIA;YACA,qBAAMC,OAAO,CAACC,QAAQ,CAACC,WAAI,CAAC;;YAL5B;;;;YAIA;YACAC,SAA4B;;;YAGb,qBAAMC,eAAK,CAACC,OAAO,CAACP,aAAa,CAAC;;YAA7CQ,QAAQ,GAAGH,SAAkC;YACnD,sBAAOG,QAAQ;;;YAEf,IAAIP,OAAO,IAAIF,WAAW,CAACU,UAAU,EAAE;cACrC,MAAMC,GAAC;;YAET,IAAI,CAACV,aAAa,CAACW,MAAM,IAAI,CAACZ,WAAW,CAACa,cAAc,CAACC,QAAQ,CAACb,aAAa,CAACW,MAAM,CAACG,WAAW,EAAE,CAAC,EAAE;cACrG,MAAMJ,GAAC;;YAET,IAAI,CAACJ,eAAK,CAACS,YAAY,CAACL,GAAC,CAAC,EAAE;cAC1B,MAAMA,GAAC;;YAEHM,UAAU,GAAGN,GAAe;YAClC,IAAI,EAAC,gBAAU,CAACF,QAAQ,0CAAES,MAAM,KAAI,CAAClB,WAAW,CAACmB,uBAAuB,CAACL,QAAQ,CAACG,UAAU,CAACR,QAAQ,CAACS,MAAM,CAAC,EAAE;cAC7G,MAAMP,GAAC;;YAET,IAAIX,WAAW,CAACoB,WAAW,EAAE;cAC3BpB,WAAW,CAACoB,WAAW,CAAClB,OAAO,EAAEe,UAAU,CAAC;;;;YA5B1Bf,OAAO,EAAE;;;;;;;GAgClC;;EACH,iBAAC;AAAD,CAAC,EAxCD;AAAamB","names":["AxiosRetry","retryConfig","requestConfig","attempt","process","nextTick","noop_1","_b","axios_1","request","response","maxRetries","e_1","method","allowedMethods","includes","toUpperCase","isAxiosError","axiosError","status","allowedResponseStatuses","beforeRetry","exports"],"sources":["../../src/controllers/AxiosRetry.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}