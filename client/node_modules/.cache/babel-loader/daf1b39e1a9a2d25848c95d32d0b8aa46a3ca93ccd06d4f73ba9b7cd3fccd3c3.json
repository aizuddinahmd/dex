{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamEvmNftTransfer = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar common_evm_utils_1 = require(\"@moralisweb3/common-evm-utils\");\nvar StreamTriggerOutput_1 = require(\"../StreamTriggerOutput\");\n/**\n * The StreamEvmNftTransfer class is a representation of a nft transfer (EREC721 or ERC1155) that is returned by the Moralis Stream API\n *\n * @category DataType\n */\nvar StreamEvmNftTransfer = /** @class */function () {\n  function StreamEvmNftTransfer(data, core) {\n    this._data = StreamEvmNftTransfer.parse(data, core);\n  }\n  /**\n   * Create a new instance of StreamEvmNftTransferish\n   *\n   * @param data - the StreamEvmNftTransferishish type\n   * @param core - the Core instance\n   * @example\n   * ```ts\n   * const transfer = StreamEvmTransactionish.create(data);\n   * ```\n   * @returns an instance of StreamEvmNftTransfer\n   */\n  StreamEvmNftTransfer.create = function (data, core) {\n    if (data instanceof StreamEvmNftTransfer) {\n      return data;\n    }\n    var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n    return new StreamEvmNftTransfer(data, finalCore);\n  };\n  StreamEvmNftTransfer.parse = function (data, core) {\n    return __assign(__assign({}, data), {\n      chain: common_evm_utils_1.EvmChain.create(data.chain, core),\n      to: common_evm_utils_1.EvmAddress.create(data.to, core),\n      contract: common_evm_utils_1.EvmAddress.create(data.contract, core),\n      from: common_evm_utils_1.EvmAddress.create(data.from, core),\n      logIndex: +data.logIndex,\n      operator: (0, common_core_1.maybe)(data.operator, function (operator) {\n        return common_evm_utils_1.EvmAddress.create(operator, core);\n      }),\n      tokenId: data.tokenId,\n      transactionHash: data.transactionHash,\n      amount: +data.amount,\n      tokenName: data.tokenName,\n      triggers: (0, common_core_1.maybe)(data.triggers, function (triggers) {\n        return triggers.map(function (trigger) {\n          return StreamTriggerOutput_1.StreamTriggerOutput.create(trigger, core);\n        });\n      })\n    });\n  };\n  /**\n   * Compares two StreamEvmNftTransfer data. It checks a deep equality check of both values.\n   * @param valueA - the first StreamEvmNftTransferish data to compare\n   * @param valueB - the second StreamEvmNftTransferish data to compare\n   * @returns true if the values are equal, false otherwise\n   * @example\n   * ```ts\n   *  StreamEvmNftTransfer.equals(valueA, valueB);\n   * ```\n   */\n  // eslint-disable-next-line complexity\n  StreamEvmNftTransfer.equals = function (valueA, valueB) {\n    var _a, _b;\n    var transferA = StreamEvmNftTransfer.create(valueA);\n    var transferB = StreamEvmNftTransfer.create(valueB);\n    if (!transferA.chain.equals(transferB.chain)) {\n      return false;\n    }\n    if (transferA.transactionHash !== transferB.transactionHash) {\n      return false;\n    }\n    if (transferA.logIndex !== transferB.logIndex) {\n      return false;\n    }\n    if (!transferA.contract.equals(transferB.contract)) {\n      return false;\n    }\n    if (transferA.tokenId !== transferB.tokenId) {\n      return false;\n    }\n    if (((_a = transferA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = transferB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput_1.StreamTriggerOutput.arrayEquals(transferA.triggers || [], transferB.triggers || [])) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Compares an StreamEvmNftTransferish data to this StreamEvmNftTransfer instance.\n   * @param value - the value to compare\n   * @returns true if the value is equal to the current instance, false otherwise\n   * @example\n   * ```ts\n   * transfer.equals(value);\n   * ```\n   */\n  StreamEvmNftTransfer.prototype.equals = function (value) {\n    return StreamEvmNftTransfer.equals(this, value);\n  };\n  /**\n   * Converts the StreamEvmNftTransfer instance to a JSON object.\n   * @returns JSON object of the StreamEvmNftTransfer instance\n   * @example `transfer.toJSON()`\n   */\n  StreamEvmNftTransfer.prototype.toJSON = function () {\n    var _a, _b;\n    var data = this._data;\n    return __assign(__assign({}, data), {\n      chain: data.chain.format(),\n      from: data.from.format(),\n      to: data.to.format(),\n      contract: data.contract.format(),\n      operator: (_a = data.operator) === null || _a === void 0 ? void 0 : _a.format(),\n      triggers: (_b = data.triggers) === null || _b === void 0 ? void 0 : _b.map(function (trigger) {\n        return trigger.format();\n      })\n    });\n  };\n  /**\n   * Converts the StreamEvmNftTransfer instance to a JSON object.\n   * @returns JSON object of the StreamEvmNftTransfer instance\n   * @example `transfer.toJSON()`\n   */\n  StreamEvmNftTransfer.prototype.format = function () {\n    return this.toJSON();\n  };\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"chain\", {\n    get: function () {\n      return this._data.chain;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"transactionHash\", {\n    get: function () {\n      return this._data.transactionHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"from\", {\n    get: function () {\n      return this._data.from;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"to\", {\n    get: function () {\n      return this._data.to;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"contract\", {\n    get: function () {\n      return this._data.contract;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"logIndex\", {\n    get: function () {\n      return this._data.logIndex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"tokenId\", {\n    get: function () {\n      return this._data.tokenId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"amount\", {\n    get: function () {\n      return this._data.amount;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"tokenContractType\", {\n    get: function () {\n      return this._data.tokenContractType;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"tokenName\", {\n    get: function () {\n      return this._data.tokenName;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"tokenSymbol\", {\n    get: function () {\n      return this._data.tokenSymbol;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"operator\", {\n    get: function () {\n      return this._data.operator;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmNftTransfer.prototype, \"triggers\", {\n    get: function () {\n      return this._data.triggers;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return StreamEvmNftTransfer;\n}();\nexports.StreamEvmNftTransfer = StreamEvmNftTransfer;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAKA;;;;;AAKA;EAGE,8BAAYA,IAA+B,EAAEC,IAAU;IACrD,IAAI,CAACC,KAAK,GAAGC,oBAAoB,CAACC,KAAK,CAACJ,IAAI,EAAEC,IAAI,CAAC;EACrD;EAEA;;;;;;;;;;;EAWOE,2BAAM,GAAb,UAAcH,IAA6B,EAAEC,IAAW;IACtD,IAAID,IAAI,YAAYG,oBAAoB,EAAE;MACxC,OAAOH,IAAI;;IAEb,IAAMK,SAAS,GAAGJ,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAIK,0BAAY,CAACC,UAAU,EAAE;IACnD,OAAO,IAAIJ,oBAAoB,CAACH,IAAI,EAAEK,SAAS,CAAC;EAClD,CAAC;EAEcF,0BAAK,GAApB,UAAqBH,IAA+B,EAAEC,IAAU;IAC9D,6BACKD,IAAI;MACPQ,KAAK,EAAEC,2BAAQ,CAACC,MAAM,CAACV,IAAI,CAACQ,KAAK,EAAEP,IAAI,CAAC;MACxCU,EAAE,EAAEF,6BAAU,CAACC,MAAM,CAACV,IAAI,CAACW,EAAE,EAAEV,IAAI,CAAC;MACpCW,QAAQ,EAAEH,6BAAU,CAACC,MAAM,CAACV,IAAI,CAACY,QAAQ,EAAEX,IAAI,CAAC;MAChDY,IAAI,EAAEJ,6BAAU,CAACC,MAAM,CAACV,IAAI,CAACa,IAAI,EAAEZ,IAAI,CAAC;MACxCa,QAAQ,EAAE,CAACd,IAAI,CAACc,QAAQ;MACxBC,QAAQ,EAAE,uBAAK,EAACf,IAAI,CAACe,QAAQ,EAAE,UAACA,QAAQ;QAAK,oCAAU,CAACL,MAAM,CAACK,QAAQ,EAAEd,IAAI,CAAC;MAAjC,CAAiC,CAAC;MAC/Ee,OAAO,EAAEhB,IAAI,CAACgB,OAAO;MACrBC,eAAe,EAAEjB,IAAI,CAACiB,eAAe;MACrCC,MAAM,EAAE,CAAClB,IAAI,CAACkB,MAAM;MACpBC,SAAS,EAAEnB,IAAI,CAACmB,SAAS;MACzBC,QAAQ,EAAE,uBAAK,EAACpB,IAAI,CAACoB,QAAQ,EAAE,UAACA,QAAQ;QACtC,eAAQ,CAACC,GAAG,CAAC,UAACC,OAAO;UAAK,gDAAmB,CAACZ,MAAM,CAACY,OAAO,EAAErB,IAAI,CAAC;QAAzC,CAAyC,CAAC;MAApE,CAAoE;IACrE;EAEL,CAAC;EAED;;;;;;;;;;EAUA;EACOE,2BAAM,GAAb,UAAcoB,MAA+B,EAAEC,MAA+B;;IAC5E,IAAMC,SAAS,GAAGtB,oBAAoB,CAACO,MAAM,CAACa,MAAM,CAAC;IACrD,IAAMG,SAAS,GAAGvB,oBAAoB,CAACO,MAAM,CAACc,MAAM,CAAC;IAErD,IAAI,CAACC,SAAS,CAACjB,KAAK,CAACmB,MAAM,CAACD,SAAS,CAAClB,KAAK,CAAC,EAAE;MAC5C,OAAO,KAAK;;IAGd,IAAIiB,SAAS,CAACR,eAAe,KAAKS,SAAS,CAACT,eAAe,EAAE;MAC3D,OAAO,KAAK;;IAGd,IAAIQ,SAAS,CAACX,QAAQ,KAAKY,SAAS,CAACZ,QAAQ,EAAE;MAC7C,OAAO,KAAK;;IAGd,IAAI,CAACW,SAAS,CAACb,QAAQ,CAACe,MAAM,CAACD,SAAS,CAACd,QAAQ,CAAC,EAAE;MAClD,OAAO,KAAK;;IAGd,IAAIa,SAAS,CAACT,OAAO,KAAKU,SAAS,CAACV,OAAO,EAAE;MAC3C,OAAO,KAAK;;IAGd,IACE,gBAAS,CAACI,QAAQ,0CAAEQ,MAAM,OAAK,eAAS,CAACR,QAAQ,0CAAEQ,MAAM,KACzD,CAACC,yCAAmB,CAACC,WAAW,CAACL,SAAS,CAACL,QAAQ,IAAI,EAAE,EAAEM,SAAS,CAACN,QAAQ,IAAI,EAAE,CAAC,EACpF;MACA,OAAO,KAAK;;IAGd,OAAO,IAAI;EACb,CAAC;EAED;;;;;;;;;EASAjB,qCAAM,GAAN,UAAO4B,KAA8B;IACnC,OAAO5B,oBAAoB,CAACwB,MAAM,CAAC,IAAI,EAAEI,KAAK,CAAC;EACjD,CAAC;EAED;;;;;EAKA5B,qCAAM,GAAN;;IACE,IAAMH,IAAI,GAAG,IAAI,CAACE,KAAK;IACvB,6BACKF,IAAI;MACPQ,KAAK,EAAER,IAAI,CAACQ,KAAK,CAACwB,MAAM,EAAE;MAC1BnB,IAAI,EAAEb,IAAI,CAACa,IAAI,CAACmB,MAAM,EAAE;MACxBrB,EAAE,EAAEX,IAAI,CAACW,EAAE,CAACqB,MAAM,EAAE;MACpBpB,QAAQ,EAAEZ,IAAI,CAACY,QAAQ,CAACoB,MAAM,EAAE;MAChCjB,QAAQ,EAAE,UAAI,CAACA,QAAQ,0CAAEiB,MAAM,EAAE;MACjCZ,QAAQ,EAAE,UAAI,CAACA,QAAQ,0CAAEC,GAAG,CAAC,UAACC,OAAO;QAAK,cAAO,CAACU,MAAM,EAAE;MAAhB,CAAgB;IAAC;EAE/D,CAAC;EAED;;;;;EAKA7B,qCAAM,GAAN;IACE,OAAO,IAAI,CAAC8B,MAAM,EAAE;EACtB,CAAC;EAEDC,sBAAI/B,uCAAK;SAAT;MACE,OAAO,IAAI,CAACD,KAAK,CAACM,KAAK;IACzB,CAAC;;;;EAED0B,sBAAI/B,iDAAe;SAAnB;MACE,OAAO,IAAI,CAACD,KAAK,CAACe,eAAe;IACnC,CAAC;;;;EAEDiB,sBAAI/B,sCAAI;SAAR;MACE,OAAO,IAAI,CAACD,KAAK,CAACW,IAAI;IACxB,CAAC;;;;EAEDqB,sBAAI/B,oCAAE;SAAN;MACE,OAAO,IAAI,CAACD,KAAK,CAACS,EAAE;IACtB,CAAC;;;;EAEDuB,sBAAI/B,0CAAQ;SAAZ;MACE,OAAO,IAAI,CAACD,KAAK,CAACU,QAAQ;IAC5B,CAAC;;;;EAEDsB,sBAAI/B,0CAAQ;SAAZ;MACE,OAAO,IAAI,CAACD,KAAK,CAACY,QAAQ;IAC5B,CAAC;;;;EAEDoB,sBAAI/B,yCAAO;SAAX;MACE,OAAO,IAAI,CAACD,KAAK,CAACc,OAAO;IAC3B,CAAC;;;;EAEDkB,sBAAI/B,wCAAM;SAAV;MACE,OAAO,IAAI,CAACD,KAAK,CAACgB,MAAM;IAC1B,CAAC;;;;EAEDgB,sBAAI/B,mDAAiB;SAArB;MACE,OAAO,IAAI,CAACD,KAAK,CAACiC,iBAAiB;IACrC,CAAC;;;;EAEDD,sBAAI/B,2CAAS;SAAb;MACE,OAAO,IAAI,CAACD,KAAK,CAACiB,SAAS;IAC7B,CAAC;;;;EAEDe,sBAAI/B,6CAAW;SAAf;MACE,OAAO,IAAI,CAACD,KAAK,CAACkC,WAAW;IAC/B,CAAC;;;;EAEDF,sBAAI/B,0CAAQ;SAAZ;MACE,OAAO,IAAI,CAACD,KAAK,CAACa,QAAQ;IAC5B,CAAC;;;;EAEDmB,sBAAI/B,0CAAQ;SAAZ;MACE,OAAO,IAAI,CAACD,KAAK,CAACkB,QAAQ;IAC5B,CAAC;;;;EACH,2BAAC;AAAD,CAAC,EArLD;AAAaiB","names":["data","core","_data","StreamEvmNftTransfer","parse","finalCore","common_core_1","getDefault","chain","common_evm_utils_1","create","to","contract","from","logIndex","operator","tokenId","transactionHash","amount","tokenName","triggers","map","trigger","valueA","valueB","transferA","transferB","equals","length","StreamTriggerOutput_1","arrayEquals","value","format","toJSON","Object","tokenContractType","tokenSymbol","exports"],"sources":["../../../src/dataTypes/StreamEvmNftTransfer/StreamEvmNftTransfer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}