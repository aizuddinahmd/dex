{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvmNft = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar EvmAddress_1 = require(\"../EvmAddress\");\nvar EvmChain_1 = require(\"../EvmChain\");\n/**\n * The EvmNft class is a MoralisData that references to a the NFT of the type; Erc721 or Erc1155\n *\n * @category DataType\n */\nvar EvmNft = /** @class */function () {\n  function EvmNft(data, core) {\n    this._data = EvmNft.parse(data, core);\n  }\n  /**\n   * Create a new instance of EvmNft from any valid address input\n   *\n   * @param data - the EvmNftish type\n   * @param core - the Core instance\n   * @example\n   * ```ts\n   * const nft = EvmNft.create(data);\n   * ```\n   * @returns an instance of EvmNft\n   */\n  EvmNft.create = function (data, core) {\n    if (data instanceof EvmNft) {\n      return data;\n    }\n    var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n    return new EvmNft(data, finalCore);\n  };\n  // TODO: refactor to reduce complexity\n  /**\n   * Compares two EvmNftish data. verifies that the chain, tokenAddress and owner of values are equal.\n   * @param valueA - the first EvmNftish data to compare\n   * @param valueB - the second EvmNftish data to compare\n   * @returns true if the values are equal, false otherwise\n   * @example\n   * ```ts\n   *  EvmNft.equals(valueA, valueB);\n   * ```\n   */\n  // eslint-disable-next-line complexity\n  EvmNft.equals = function (valueA, valueB) {\n    var nftA = EvmNft.create(valueA);\n    var nftB = EvmNft.create(valueB);\n    if (!nftA._data.chain.equals(nftB._data.chain)) {\n      return false;\n    }\n    if (!nftA._data.tokenAddress.equals(nftB._data.tokenAddress)) {\n      return false;\n    }\n    // Owners are different between tokens\n    if (nftA._data.ownerOf && nftB._data.ownerOf && !nftA._data.ownerOf.equals(nftB._data.ownerOf)) {\n      return false;\n    }\n    // Owner is defined in only one token\n    if (nftA._data.ownerOf && !nftB._data.ownerOf || !nftA._data.ownerOf && nftB._data.ownerOf) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Compares an EvmNftish data to this EvmNft instance.\n   * @param value - the value to compare\n   * @returns true if the value is equal to the current instance, false otherwise\n   * @example\n   * ```ts\n   * nft.equals(value);\n   * ```\n   */\n  EvmNft.prototype.equals = function (value) {\n    return EvmNft.equals(this, value);\n  };\n  /**\n   * Converts the EvmNft instance to a JSON object.\n   * @returns JSON object of the EvmNft instance\n   * @example `nft.toJSON()`\n   */\n  EvmNft.prototype.toJSON = function () {\n    var _b, _c, _d;\n    var data = this._data;\n    return __assign(__assign({}, data), {\n      tokenAddress: data.tokenAddress.format(),\n      chain: data.chain.format(),\n      ownerOf: (_b = data.ownerOf) === null || _b === void 0 ? void 0 : _b.format(),\n      blockNumberMinted: (_c = data.blockNumberMinted) === null || _c === void 0 ? void 0 : _c.toString(),\n      blockNumber: (_d = data.blockNumber) === null || _d === void 0 ? void 0 : _d.toString()\n    });\n  };\n  /**\n   * Converts the EvmNft instance to a JSON object.\n   * @returns JSON object of the EvmNft instance\n   * @example `nft.format()`\n   */\n  EvmNft.prototype.format = function () {\n    return this.toJSON();\n  };\n  Object.defineProperty(EvmNft.prototype, \"result\", {\n    get: function () {\n      return this._data;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"chain\", {\n    /**\n     * @returns the NFT chain\n     * @example\n     * ```\n     * nft.chain // EvmChain\n     * ```\n     */\n    get: function () {\n      return this._data.chain;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"contractType\", {\n    /**\n     * @returns the NFT contract type\n     * @example\n     * ```\n     * nft.contractType // \"ERC721\" | \"ERC1155\"\n     * ```\n     */\n    get: function () {\n      return this._data.contractType;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"tokenAddress\", {\n    /**\n     * @returns the NFT token address\n     * @example\n     * ```\n     * nft.tokenAddress // EvmAddress\n     * ```\n     */\n    get: function () {\n      return this._data.tokenAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"metadata\", {\n    /**\n     * @returns the NFT metadata\n     * @example\n     * ```ts\n     * nft.metadata\n     * // {\n     * // name: 'Pancake',\n     * // description: 'The dessert series 1',\n     * // image: 'ipfs://QmNQFXCZ6LGzvpMW9Q5PWbCrEnLknQrPwr2r8pbQAgzQ9A/4863BD6B-6C92-4B96-BF80-8020B2F7C3A5.jpeg',\n     * // }\n     * ```\n     */\n    get: function () {\n      return this._data.metadata;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"tokenUri\", {\n    /**\n     * @returns the NFT token URI\n     * @example\n     * ```\n     * nft.tokenUri // \"https://gateway.moralisipfs.com/ipfs/QmajSqgxY3cWBgBeRm38vasJAcTit1kp5EwqVHxszJYgUC/728.json\"\n     * ```\n     */\n    get: function () {\n      return this._data.tokenUri;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"tokenHash\", {\n    /**\n     * @returns the NFT token hash\n     * @example\n     * ```\n     * nft.tokenHash // \"QmajSqgxY3cWBgBeRm38vasJAcTit1kp5EwqVHxszJYgUC\"\n     * ```\n     */\n    get: function () {\n      return this._data.tokenHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"name\", {\n    /**\n     * @returns the NFT name\n     * @example\n     * ```\n     * nft.name // \"Tether USD\"\n     * ```\n     */\n    get: function () {\n      return this._data.name;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"symbol\", {\n    /**\n     * @returns the NFT symbol\n     * @example\n     * ```\n     * nft.symbol // \"USDT\"\n     * ```\n     */\n    get: function () {\n      return this._data.symbol;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"ownerOf\", {\n    /**\n     * @returns the NFT owner of address\n     * @example\n     * ```\n     * nft.ownerOf // EvmAddress\n     * ```\n     */\n    get: function () {\n      return this._data.ownerOf;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"blockNumberMinted\", {\n    /**\n     * @returns the NFT block number minted from\n     * @example\n     * ```\n     * nft.blockNumberMinted // BigNumber\n     * ```\n     */\n    get: function () {\n      return this._data.blockNumberMinted;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"blockNumber\", {\n    /**\n     * @returns the NFT block number\n     * @example\n     * ```\n     * nft.blockNumber // BigNumber\n     * ```\n     */\n    get: function () {\n      return this._data.blockNumber;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"lastMetadataSync\", {\n    /**\n     * @returns the NFT latest metadata sync date\n     * @example\n     * ```\n     * nft.latestMetadataSync // Date\n     * ```\n     */\n    get: function () {\n      return this._data.lastMetadataSync;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"lastTokenUriSync\", {\n    /**\n     * @returns the NFT latest token URI sync date\n     * @example\n     * ```\n     * nft.latestTokenUriSync // Date\n     * ```\n     */\n    get: function () {\n      return this._data.lastTokenUriSync;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"amount\", {\n    /**\n     * @returns the NFT amount\n     * @example\n     * ```\n     * nft.amount // 2\n     * ```\n     */\n    get: function () {\n      return this._data.amount;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNft.prototype, \"tokenId\", {\n    /**\n     * @returns the token id\n     * @example\n     * ```\n     * nft.tokenId // '1234'\n     * ```\n     */\n    get: function () {\n      return this._data.tokenId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  var _a;\n  _a = EvmNft;\n  EvmNft.parse = function (data, core) {\n    return __assign(__assign({}, data), {\n      chain: EvmChain_1.EvmChain.create(data.chain, core),\n      contractType: (0, common_core_1.maybe)(data.contractType),\n      tokenAddress: EvmAddress_1.EvmAddress.create(data.tokenAddress, core),\n      metadata: (0, common_core_1.maybe)(data.metadata, _a.validateMetadata),\n      tokenUri: (0, common_core_1.maybe)(data.tokenUri),\n      tokenHash: (0, common_core_1.maybe)(data.tokenHash),\n      name: (0, common_core_1.maybe)(data.name),\n      symbol: (0, common_core_1.maybe)(data.symbol),\n      ownerOf: (0, common_core_1.maybe)(data.ownerOf, function (ownerOf) {\n        return EvmAddress_1.EvmAddress.create(ownerOf, core);\n      }),\n      blockNumberMinted: (0, common_core_1.maybe)(data.blockNumberMinted, common_core_1.BigNumber.create),\n      blockNumber: (0, common_core_1.maybe)(data.blockNumber, common_core_1.BigNumber.create),\n      lastMetadataSync: (0, common_core_1.maybe)(data.lastMetadataSync, common_core_1.dateInputToDate),\n      lastTokenUriSync: (0, common_core_1.maybe)(data.lastTokenUriSync, common_core_1.dateInputToDate),\n      amount: (0, common_core_1.maybe)(data.amount, function (value) {\n        return +value;\n      })\n    });\n  };\n  /**\n   * This function confirms that the NFT metadata is a valid JSON string.\n   *\n   * @param value - the new value for the NFT metadata\n   * @returns the parsed value of the JSON string\n   * @throws {CoreError} if the value is not a valid JSON string\n   */\n  EvmNft.validateMetadata = function (value) {\n    try {\n      return JSON.parse(value);\n    } catch (error) {\n      throw new common_core_1.CoreError({\n        code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n        message: 'Invalid metadata provided, cannot parse the value to JSON'\n      });\n    }\n  };\n  return EvmNft;\n}();\nexports.EvmNft = EvmNft;","map":{"version":3,"mappings":"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","names":["data","core","_data","EvmNft","parse","finalCore","common_core_1","getDefault","valueA","valueB","nftA","create","nftB","chain","equals","tokenAddress","ownerOf","value","format","blockNumberMinted","toString","blockNumber","toJSON","Object","contractType","metadata","tokenUri","tokenHash","name","symbol","lastMetadataSync","lastTokenUriSync","amount","tokenId","EvmChain_1","EvmAddress_1","_a","validateMetadata","JSON","error","code","INVALID_ARGUMENT","message","exports"],"sources":["../../../src/dataTypes/EvmNft/EvmNft.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}