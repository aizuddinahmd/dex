{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamEvmTransactionLog = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar common_evm_utils_1 = require(\"@moralisweb3/common-evm-utils\");\nvar StreamTriggerOutput_1 = require(\"../StreamTriggerOutput\");\n/**\n * The StreamEvmTransactionLog class is a representation of a transaction log that is returned by the Moralis Stream API\n *\n * @category DataType\n */\nvar StreamEvmTransactionLog = /** @class */function () {\n  function StreamEvmTransactionLog(_a, core) {\n    var data = __rest(_a, []);\n    this._data = StreamEvmTransactionLog.parse(data, core);\n  }\n  /**\n   * Create a new instance of StreamEvmTransactionLog\n   *\n   * @param data - the StreamEvmTransactionLogish type\n   * @param core - the Core instance\n   * @example\n   * ```ts\n   * const transactionLog = StreamEvmTransactionLog.create(data);\n   * ```\n   * @returns an instance of StreamEvmTransactionLog\n   */\n  StreamEvmTransactionLog.create = function (data, core) {\n    if (data instanceof StreamEvmTransactionLog) {\n      return data;\n    }\n    var finalCore = core !== null && core !== void 0 ? core : common_core_1.CoreProvider.getDefault();\n    return new StreamEvmTransactionLog(data, finalCore);\n  };\n  StreamEvmTransactionLog.parse = function (data, core) {\n    return __assign(__assign({}, data), {\n      chain: common_evm_utils_1.EvmChain.create(data.chain, core),\n      logIndex: +data.logIndex,\n      address: common_evm_utils_1.EvmAddress.create(data.address, core),\n      topic0: (0, common_core_1.maybe)(data.topic0),\n      topic1: (0, common_core_1.maybe)(data.topic1),\n      topic2: (0, common_core_1.maybe)(data.topic2),\n      topic3: (0, common_core_1.maybe)(data.topic3),\n      triggers: (0, common_core_1.maybe)(data.triggers, function (triggers) {\n        return triggers.map(function (trigger) {\n          return StreamTriggerOutput_1.StreamTriggerOutput.create(trigger, core);\n        });\n      })\n    });\n  };\n  /**\n   * Compares two StreamEvmTransactionLog data. It checks a deep equality check of both values.\n   * @param valueA - the first StreamEvmTransactionLogish data to compare\n   * @param valueB - the second StreamEvmTransactionLogish data to compare\n   * @returns true if the values are equal, false otherwise\n   * @example\n   * ```ts\n   *  StreamEvmTransactionLog.equals(valueA, valueB);\n   * ```\n   */\n  StreamEvmTransactionLog.equals = function (valueA, valueB) {\n    var _a, _b;\n    var transactionLogA = StreamEvmTransactionLog.create(valueA);\n    var transactionLogB = StreamEvmTransactionLog.create(valueB);\n    if (!transactionLogA.chain.equals(transactionLogB.chain)) {\n      return false;\n    }\n    if (transactionLogA.transactionHash !== transactionLogB.transactionHash) {\n      return false;\n    }\n    if (transactionLogA.logIndex !== transactionLogB.logIndex) {\n      return false;\n    }\n    if (((_a = transactionLogA.triggers) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = transactionLogB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput_1.StreamTriggerOutput.arrayEquals(transactionLogA.triggers || [], transactionLogB.triggers || [])) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Compares an StreamEvmTransactionLogish data to this StreamEvmTransactionLog instance.\n   * @param value - the value to compare\n   * @returns true if the value is equal to the current instance, false otherwise\n   * @example\n   * ```ts\n   * transactionLog.equals(value);\n   * ```\n   */\n  StreamEvmTransactionLog.prototype.equals = function (value) {\n    return StreamEvmTransactionLog.equals(this, value);\n  };\n  /**\n   * Converts the StreamEvmTransactionLog instance to a JSON object.\n   * @returns JSON object of the StreamEvmTransactionLog instance\n   * @example `transactionLog.toJSON()`\n   */\n  StreamEvmTransactionLog.prototype.toJSON = function () {\n    var _a = this._data,\n      chain = _a.chain,\n      address = _a.address,\n      triggers = _a.triggers,\n      data = __rest(_a, [\"chain\", \"address\", \"triggers\"]);\n    return __assign(__assign({}, data), {\n      chain: chain.format(),\n      address: address.format(),\n      triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function (trigger) {\n        return trigger.format();\n      })\n    });\n  };\n  /**\n   * Converts the StreamEvmTransactionLog instance to a JSON object.\n   * @returns JSON object of the StreamEvmTransactionLog instance\n   * @example `transactionLog.toJSON()`\n   */\n  StreamEvmTransactionLog.prototype.format = function () {\n    return this.toJSON();\n  };\n  Object.defineProperty(StreamEvmTransactionLog.prototype, \"chain\", {\n    get: function () {\n      return this._data.chain;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmTransactionLog.prototype, \"logIndex\", {\n    get: function () {\n      return this._data.logIndex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmTransactionLog.prototype, \"transactionHash\", {\n    get: function () {\n      return this._data.transactionHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmTransactionLog.prototype, \"address\", {\n    get: function () {\n      return this._data.address;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmTransactionLog.prototype, \"data\", {\n    get: function () {\n      return this._data.data;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmTransactionLog.prototype, \"topic0\", {\n    get: function () {\n      return this._data.topic0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmTransactionLog.prototype, \"topic1\", {\n    get: function () {\n      return this._data.topic1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmTransactionLog.prototype, \"topic2\", {\n    get: function () {\n      return this._data.topic2;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmTransactionLog.prototype, \"topic3\", {\n    get: function () {\n      return this._data.topic3;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StreamEvmTransactionLog.prototype, \"triggers\", {\n    get: function () {\n      return this._data.triggers;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return StreamEvmTransactionLog;\n}();\nexports.StreamEvmTransactionLog = StreamEvmTransactionLog;","map":{"version":3,"mappings":"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","names":["_a","core","data","_data","StreamEvmTransactionLog","parse","finalCore","common_core_1","getDefault","chain","common_evm_utils_1","create","logIndex","address","topic0","topic1","topic2","topic3","triggers","map","trigger","valueA","valueB","transactionLogA","transactionLogB","equals","transactionHash","length","StreamTriggerOutput_1","arrayEquals","value","format","toJSON","Object","exports"],"sources":["../../../src/dataTypes/StreamEvmTransactionLog/StreamEvmTransactionLog.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}