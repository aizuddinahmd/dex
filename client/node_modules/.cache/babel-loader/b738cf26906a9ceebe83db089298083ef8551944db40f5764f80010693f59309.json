{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reSyncMetadataOperation = void 0;\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/**\n * ReSync the metadata for an NFT\n * * The metadata flag will request a the NFT's metadata from the already existing token_uri\n * * The uri(default) flag will fetch the latest token_uri from the given NFT address. In sync mode the metadata will also be fetched\n * * The sync mode will make the endpoint synchronous so it will wait for the task to be completed before responding\n * * The async mode(default) will make the endpoint asynchronous so we will wait for the task to be completed before responding\n */\nexports.reSyncMetadataOperation = {\n  method: 'GET',\n  name: 'reSyncMetadata',\n  id: 'reSyncMetadata',\n  groupName: 'nft',\n  urlPathPattern: '/nft/{address}/{tokenId}/metadata/resync',\n  urlPathParamNames: ['address', 'tokenId'],\n  urlSearchParamNames: ['chain', 'flag', 'mode'],\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,\n    flag: request.flag,\n    mode: request.mode,\n    tokenId: request.tokenId\n  };\n}\nfunction serializeRequest(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    flag: request.flag,\n    mode: request.mode,\n    address: dataTypes_1.EvmAddress.create(request.address, core).checksum,\n    tokenId: request.tokenId\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    flag: jsonRequest.flag,\n    mode: jsonRequest.mode,\n    address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),\n    tokenId: jsonRequest.tokenId\n  };\n}\nfunction deserializeResponse(jsonResponse) {\n  return jsonResponse;\n}","map":{"version":3,"mappings":";;;;;;AACA;AACA;AA6BA;;;;;;;AAOaA,+BAAuB,GAKhC;EACFC,MAAM,EAAE,KAAK;EACbC,IAAI,EAAE,gBAAgB;EACtBC,EAAE,EAAE,gBAAgB;EACpBC,SAAS,EAAE,KAAK;EAChBC,cAAc,EAAE,0CAA0C;EAC1DC,iBAAiB,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;EACzCC,mBAAmB,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC;EAE9CC,mBAAmB;EACnBC,gBAAgB;EAChBC,kBAAkB;EAClBC,mBAAmB;CACpB;AAED;AAEA,SAASH,mBAAmB,CAACI,OAA8B,EAAEC,IAAU;EACrE,OAAO;IACLC,KAAK,EAAEC,mCAAgB,CAACC,OAAO,CAACJ,OAAO,CAACE,KAAK,EAAED,IAAI,CAAC,CAACI,MAAM;IAC3DC,OAAO,EAAEC,sBAAU,CAACC,MAAM,CAACR,OAAO,CAACM,OAAO,EAAEL,IAAI,CAAC,CAACQ,SAAS;IAC3DC,IAAI,EAAEV,OAAO,CAACU,IAAI;IAClBC,IAAI,EAAEX,OAAO,CAACW,IAAI;IAClBC,OAAO,EAAEZ,OAAO,CAACY;GAClB;AACH;AAEA,SAASf,gBAAgB,CAACG,OAA8B,EAAEC,IAAU;EAClE,OAAO;IACLC,KAAK,EAAEC,mCAAgB,CAACC,OAAO,CAACJ,OAAO,CAACE,KAAK,EAAED,IAAI,CAAC,CAACI,MAAM;IAC3DK,IAAI,EAAEV,OAAO,CAACU,IAAI;IAClBC,IAAI,EAAEX,OAAO,CAACW,IAAI;IAClBL,OAAO,EAAEC,sBAAU,CAACC,MAAM,CAACR,OAAO,CAACM,OAAO,EAAEL,IAAI,CAAC,CAACY,QAAQ;IAC1DD,OAAO,EAAEZ,OAAO,CAACY;GAClB;AACH;AAEA,SAASd,kBAAkB,CAACgB,WAAsC,EAAEb,IAAU;EAC5E,OAAO;IACLC,KAAK,EAAEK,oBAAQ,CAACC,MAAM,CAACM,WAAW,CAACZ,KAAK,EAAED,IAAI,CAAC;IAC/CS,IAAI,EAAEI,WAAW,CAACJ,IAAI;IACtBC,IAAI,EAAEG,WAAW,CAACH,IAAI;IACtBL,OAAO,EAAEC,sBAAU,CAACC,MAAM,CAACM,WAAW,CAACR,OAAO,EAAEL,IAAI,CAAC;IACrDW,OAAO,EAAEE,WAAW,CAACF;GACtB;AACH;AAEA,SAASb,mBAAmB,CAACgB,YAAwC;EACnE,OAAOA,YAAY;AACrB","names":["exports","method","name","id","groupName","urlPathPattern","urlPathParamNames","urlSearchParamNames","getRequestUrlParams","serializeRequest","deserializeRequest","deserializeResponse","request","core","chain","EvmChainResolver_1","resolve","apiHex","address","dataTypes_1","create","lowercase","flag","mode","tokenId","checksum","jsonRequest","jsonResponse"],"sources":["../../../src/operations/nft/reSyncMetadataOperation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}