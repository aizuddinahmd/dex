{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvmNative = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar unitToDecimals = {\n  ether: 18,\n  finney: 15,\n  szabo: 12,\n  gwei: 9,\n  mwei: 6,\n  kwei: 3,\n  wei: 0\n};\n/**\n * The EvmNative class is a MoralisData that references to the value of an EVM native currency (like ETH, BNB etc.)\n *\n * @category DataType\n */\nvar EvmNative = /** @class */function () {\n  function EvmNative(native, unit) {\n    if (unit === void 0) {\n      unit = 'ether';\n    }\n    this.rawValue = EvmNative.parse(native, unit);\n  }\n  Object.defineProperty(EvmNative, \"ONE_ETH\", {\n    /**\n     * Returns value of one ether.\n     *\n     * @example EvmNative.ONE_ETH\n     */\n    get: function () {\n      return EvmNative.create(1, 'ether');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNative, \"ONE_GWEI\", {\n    /**\n     * Returns value of one gwei.\n     *\n     * @example EvmNative.ONE_GWEI\n     */\n    get: function () {\n      return EvmNative.create(1, 'gwei');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNative, \"ONE_WEI\", {\n    /**\n     * Returns value of one wei.\n     *\n     * @example EvmNative.ONE_WEI\n     */\n    get: function () {\n      return EvmNative.create(1, 'wei');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Create a new instance of EvmNative from any valid {@link EvmNativeish} value.\n   * @param native - the value to create the EvmNative from\n   * @param unit - the unit of the value (optional), defaults to `ether`\n   * @returns a new instance of EvmNative\n   * @example\n   * ```ts\n   * const native = EvmNative.create(2, 'gwei');\n   * const native = EvmNative.create(2);\n   * const native = EvmNative.create(2, 'wei');\n   *```\n   */\n  EvmNative.create = function (native, unit) {\n    if (native instanceof EvmNative) {\n      return native;\n    }\n    return new EvmNative(native, unit);\n  };\n  EvmNative.parse = function (native, unit) {\n    var decimals;\n    if (typeof unit === 'number') {\n      decimals = unit;\n    } else {\n      if (unitToDecimals[unit] == null) {\n        throw new common_core_1.CoreError({\n          code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n          message: 'Unit should be a decimal number or valid EvmNativeUnit string'\n        });\n      }\n      decimals = unitToDecimals[unit];\n    }\n    return common_core_1.BigNumber.fromDecimal(native.toString(), decimals);\n  };\n  /**\n   * Compares two EvmNative values.\n   * @param valueA - the first value to compare\n   * @param valueB - the second value to compare\n   * @returns true if the values are equal\n   * @example\n   * ```ts\n   * EvmNative.equals(EvmNative.create(1, 'ether'), EvmNative.create(1, 'ether')); // true\n   * ```\n   */\n  EvmNative.equals = function (valueA, valueB) {\n    var evmNativeA = EvmNative.create(valueA);\n    var evmNativeB = EvmNative.create(valueB);\n    return evmNativeA.rawValue.equals(evmNativeB.rawValue);\n  };\n  /**\n   * Compares EvmNative with current instance.\n   * @param value - the value to compare with\n   * @returns true if the values are equal\n   * @example\n   * ```ts\n   * const native = EvmNative.create(1, 'gwei');\n   * native.equals(EvmNative.create(1, 'ether')); // false\n   * ```\n   */\n  EvmNative.prototype.equals = function (value) {\n    return EvmNative.equals(this, value);\n  };\n  /**\n   * Converts the EvmNative to a string.\n   * @returns the value of the EvmNative as a string\n   * @example `native.toString()`\n   */\n  EvmNative.prototype.toString = function () {\n    return this.wei;\n  };\n  /**\n   * Converts the EvmNative to a string.\n   * @returns the value of the EvmNative as a string\n   * @example `native.format()`\n   */\n  EvmNative.prototype.format = function () {\n    return this.toString();\n  };\n  Object.defineProperty(EvmNative.prototype, \"value\", {\n    /**\n     * @returns the value of the EvmNative as a BigNumber\n     * @example `native.value`\n     */\n    get: function () {\n      return this.rawValue;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNative.prototype, \"wei\", {\n    /**\n     * Converts the EvmNative to a string representation of the value in wei.\n     * @returns the value of the EvmNative as a string\n     * @example `native.wei`\n     */\n    get: function () {\n      return this.value.toString();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNative.prototype, \"gwei\", {\n    /**\n     * Converts the EvmNative to a string representation of the value in gwei.\n     * @returns the value of the EvmNative as a string\n     * @example `native.gwei`\n     */\n    get: function () {\n      return this.rawValue.toDecimal(unitToDecimals['gwei']);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNative.prototype, \"ether\", {\n    /**\n     * Converts the EvmNative to a string representation of the value in ether.\n     * @returns the value of the EvmNative as a string\n     * @example `native.ether`\n     */\n    get: function () {\n      return this.rawValue.toDecimal(unitToDecimals['ether']);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return EvmNative;\n}();\nexports.EvmNative = EvmNative;","map":{"version":3,"mappings":"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","names":["unitToDecimals","ether","finney","szabo","gwei","mwei","kwei","wei","native","unit","rawValue","EvmNative","parse","Object","create","decimals","common_core_1","code","INVALID_ARGUMENT","message","fromDecimal","toString","valueA","valueB","evmNativeA","evmNativeB","equals","value","toDecimal","exports"],"sources":["../../../src/dataTypes/EvmNative/EvmNative.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}