{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getWalletNFTCollectionsOperation = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar dataTypes_1 = require(\"../../dataTypes\");\nvar EvmChainResolver_1 = require(\"../../EvmChainResolver\");\n/** Get NFT collections owned by a given wallet address. */\nexports.getWalletNFTCollectionsOperation = {\n  method: 'GET',\n  name: 'getWalletNFTCollections',\n  id: 'getWalletNFTCollections',\n  groupName: 'nft',\n  urlPathPattern: '/{address}/nft/collections',\n  urlPathParamNames: ['address'],\n  urlSearchParamNames: ['chain', 'limit', 'cursor', 'disableTotal'],\n  firstPageIndex: 1,\n  getRequestUrlParams: getRequestUrlParams,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest,\n  deserializeResponse: deserializeResponse\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    address: dataTypes_1.EvmAddress.create(request.address, core).lowercase,\n    limit: (0, common_core_1.maybe)(request.limit, String),\n    cursor: request.cursor,\n    disable_total: request.disableTotal\n  };\n}\nfunction deserializeResponse(jsonResponse, request, core) {\n  var _a;\n  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function (collection) {\n    return dataTypes_1.EvmNftCollection.create(__assign(__assign({}, (0, common_core_1.toCamelCase)(collection)), {\n      chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core),\n      tokenAddress: dataTypes_1.EvmAddress.create(collection.token_address, core)\n    }), core);\n  });\n}\nfunction serializeRequest(request, core) {\n  return {\n    chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,\n    limit: request.limit,\n    cursor: request.cursor,\n    address: dataTypes_1.EvmAddress.create(request.address, core).checksum,\n    disableTotal: request.disableTotal\n  };\n}\nfunction deserializeRequest(jsonRequest, core) {\n  return {\n    chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),\n    limit: jsonRequest.limit,\n    cursor: jsonRequest.cursor,\n    address: dataTypes_1.EvmAddress.create(jsonRequest.address, core),\n    disableTotal: jsonRequest.disableTotal\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA;AAQA;AACA;AA2BA;AACaA,wCAAgC,GAKzC;EACFC,MAAM,EAAE,KAAK;EACbC,IAAI,EAAE,yBAAyB;EAC/BC,EAAE,EAAE,yBAAyB;EAC7BC,SAAS,EAAE,KAAK;EAChBC,cAAc,EAAE,4BAA4B;EAC5CC,iBAAiB,EAAE,CAAC,SAAS,CAAC;EAC9BC,mBAAmB,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,cAAc,CAAC;EACjEC,cAAc,EAAE,CAAC;EAEjBC,mBAAmB;EACnBC,gBAAgB;EAChBC,kBAAkB;EAClBC,mBAAmB;CACpB;AAED;AAEA,SAASH,mBAAmB,CAACI,OAAuC,EAAEC,IAAU;EAC9E,OAAO;IACLC,KAAK,EAAEC,mCAAgB,CAACC,OAAO,CAACJ,OAAO,CAACE,KAAK,EAAED,IAAI,CAAC,CAACI,MAAM;IAC3DC,OAAO,EAAEC,sBAAU,CAACC,MAAM,CAACR,OAAO,CAACM,OAAO,EAAEL,IAAI,CAAC,CAACQ,SAAS;IAC3DC,KAAK,EAAE,uBAAK,EAACV,OAAO,CAACU,KAAK,EAAEC,MAAM,CAAC;IACnCC,MAAM,EAAEZ,OAAO,CAACY,MAAM;IACtBC,aAAa,EAAEb,OAAO,CAACc;GACxB;AACH;AAEA,SAASf,mBAAmB,CAC1BgB,YAAiD,EACjDf,OAAuC,EACvCC,IAAU;;EAEV,OAAO,CAAC,kBAAY,CAACe,MAAM,mCAAI,EAAE,EAAEC,GAAG,CAAC,UAACC,UAAU;IAChD,mCAAgB,CAACV,MAAM,uBAEhB,6BAAW,EAACU,UAAU,CAAC;MAC1BhB,KAAK,EAAEC,mCAAgB,CAACC,OAAO,CAACJ,OAAO,CAACE,KAAK,EAAED,IAAI,CAAC;MACpDkB,YAAY,EAAEZ,sBAAU,CAACC,MAAM,CAACU,UAAU,CAACE,aAAa,EAAEnB,IAAI;IAAC,IAEjEA,IAAI,CACL;EAPD,CAOC,CACF;AACH;AAEA,SAASJ,gBAAgB,CAACG,OAAuC,EAAEC,IAAU;EAC3E,OAAO;IACLC,KAAK,EAAEC,mCAAgB,CAACC,OAAO,CAACJ,OAAO,CAACE,KAAK,EAAED,IAAI,CAAC,CAACI,MAAM;IAC3DK,KAAK,EAAEV,OAAO,CAACU,KAAK;IACpBE,MAAM,EAAEZ,OAAO,CAACY,MAAM;IACtBN,OAAO,EAAEC,sBAAU,CAACC,MAAM,CAACR,OAAO,CAACM,OAAO,EAAEL,IAAI,CAAC,CAACoB,QAAQ;IAC1DP,YAAY,EAAEd,OAAO,CAACc;GACvB;AACH;AAEA,SAAShB,kBAAkB,CACzBwB,WAA+C,EAC/CrB,IAAU;EAEV,OAAO;IACLC,KAAK,EAAEK,oBAAQ,CAACC,MAAM,CAACc,WAAW,CAACpB,KAAK,EAAED,IAAI,CAAC;IAC/CS,KAAK,EAAEY,WAAW,CAACZ,KAAK;IACxBE,MAAM,EAAEU,WAAW,CAACV,MAAM;IAC1BN,OAAO,EAAEC,sBAAU,CAACC,MAAM,CAACc,WAAW,CAAChB,OAAO,EAAEL,IAAI,CAAC;IACrDa,YAAY,EAAEQ,WAAW,CAACR;GAC3B;AACH","names":["exports","method","name","id","groupName","urlPathPattern","urlPathParamNames","urlSearchParamNames","firstPageIndex","getRequestUrlParams","serializeRequest","deserializeRequest","deserializeResponse","request","core","chain","EvmChainResolver_1","resolve","apiHex","address","dataTypes_1","create","lowercase","limit","String","cursor","disable_total","disableTotal","jsonResponse","result","map","collection","tokenAddress","token_address","checksum","jsonRequest"],"sources":["../../../src/operations/nft/getWalletNFTCollectionsOperation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}