{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SolNative = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar unitToDecimals = {\n  solana: 9,\n  lamports: 0\n};\n/**\n * The SolNative class is a MoralisData that references to the value of Solana native currency SOL\n *\n * @category DataType\n */\nvar SolNative = /** @class */function () {\n  function SolNative(rawValue) {\n    this.rawValue = rawValue;\n  }\n  /**\n   * Create a new instance of SolNative from any valid {@link SolNativeish} value.\n   * @param value - the value to create the SolNative from\n   * @param unit - the unit of the value (optional), defaults to `solana`\n   * @returns a new instance of SolNative\n   * @example\n   * ```ts\n   * const native = SolNative.create(2, 'lamports');\n   * const native = SolNative.create(2);\n   *```\n   */\n  SolNative.create = function (value, unit) {\n    if (value instanceof SolNative) {\n      return value;\n    }\n    return new SolNative(SolNative.parse(value, unit));\n  };\n  SolNative.parse = function (value, unit) {\n    if (unit === void 0) {\n      unit = 'solana';\n    }\n    var decimal;\n    if (typeof unit === 'number') {\n      decimal = unit;\n    } else if (unitToDecimals[unit] !== undefined) {\n      decimal = unitToDecimals[unit];\n    } else {\n      throw new common_core_1.CoreError({\n        code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n        message: \"Not supported Solana unit: \".concat(unit)\n      });\n    }\n    return common_core_1.BigNumber.fromDecimal(value.toString(), decimal);\n  };\n  /**\n   * Compares two SolNativeish values.\n   * @param valueA - the first value to compare\n   * @param valueB - the second value to compare\n   * @returns true if the values are equal\n   * @example\n   * ```ts\n   * SolNative.equals(SolNative.create(1), SolNative.create(1)); // true\n   * ```\n   */\n  SolNative.equals = function (valueA, valueB) {\n    var solNativeA = SolNative.create(valueA);\n    var solNativeB = SolNative.create(valueB);\n    return solNativeA.lamports === solNativeB.lamports;\n  };\n  /**\n   * Compares SolNative with current instance.\n   * @param value - the value to compare with\n   * @returns true if the values are equal\n   * @example\n   * ```ts\n   * const native = SolNative.create(2, 'lamports');\n   * native.equals(SolNative.create(1)); // false\n   * ```\n   */\n  SolNative.prototype.equals = function (value) {\n    return SolNative.equals(this, value);\n  };\n  /**\n   * Converts the SolNative to a string.\n   * @returns the value of the SolNative as a string\n   * @example `native.format()`\n   */\n  SolNative.prototype.format = function () {\n    // TODO: add `format` argument\n    return this.lamports;\n  };\n  /**\n   * Converts the SolNative to a string.\n   * @returns the value of the SolNative as a string\n   * @example `native.toJSON()`\n   */\n  SolNative.prototype.toJSON = function () {\n    return this.lamports;\n  };\n  /**\n   * Converts the SolNative to a string.\n   * @returns the value of the SolNative as a string\n   * @example `native.toString()`\n   */\n  SolNative.prototype.toString = function () {\n    return this.lamports;\n  };\n  Object.defineProperty(SolNative.prototype, \"value\", {\n    /**\n     * @returns the value of the SolNative as a BigNumber\n     * @example `native.value`\n     */\n    get: function () {\n      return this.rawValue;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SolNative.prototype, \"solana\", {\n    /**\n     * Converts the SolNative to a solana unit.\n     * @returns the value of the SolNative as a solana string\n     * @example `native.solana`\n     */\n    get: function () {\n      return this.rawValue.toDecimal(unitToDecimals['solana']);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SolNative.prototype, \"lamports\", {\n    /**\n     * Converts the SolNative to a string.\n     * @returns the value of the SolNative as a string\n     * @example `native.lamports`\n     */\n    get: function () {\n      return this.rawValue.toString();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return SolNative;\n}();\nexports.SolNative = SolNative;","map":{"version":3,"mappings":";;;;;;AAAA;AAoBA,IAAMA,cAAc,GAAkC;EACpDC,MAAM,EAAE,CAAC;EACTC,QAAQ,EAAE;CACX;AAED;;;;;AAKA;EAkCE,mBAAqCC,QAAmB;IAAnB,aAAQ,GAARA,QAAQ;EAAc;EAjC3D;;;;;;;;;;;EAWcC,gBAAM,GAApB,UAAqBC,KAAmB,EAAEC,IAAoB;IAC5D,IAAID,KAAK,YAAYD,SAAS,EAAE;MAC9B,OAAOC,KAAK;;IAEd,OAAO,IAAID,SAAS,CAACA,SAAS,CAACG,KAAK,CAACF,KAAK,EAAEC,IAAI,CAAC,CAAC;EACpD,CAAC;EAEcF,eAAK,GAApB,UAAqBC,KAAmB,EAAEC,IAA8B;IAA9B;MAAAA,eAA8B;IAAA;IACtE,IAAIE,OAAe;IACnB,IAAI,OAAOF,IAAI,KAAK,QAAQ,EAAE;MAC5BE,OAAO,GAAGF,IAAI;KACf,MAAM,IAAIN,cAAc,CAACM,IAAI,CAAC,KAAKG,SAAS,EAAE;MAC7CD,OAAO,GAAGR,cAAc,CAACM,IAAI,CAAC;KAC/B,MAAM;MACL,MAAM,IAAII,uBAAS,CAAC;QAClBC,IAAI,EAAED,2BAAa,CAACE,gBAAgB;QACpCC,OAAO,EAAE,qCAA8BP,IAAI;OAC5C,CAAC;;IAEJ,OAAOI,uBAAS,CAACI,WAAW,CAACT,KAAK,CAACU,QAAQ,EAAE,EAAEP,OAAO,CAAC;EACzD,CAAC;EAID;;;;;;;;;;EAUcJ,gBAAM,GAApB,UAAqBY,MAAoB,EAAEC,MAAoB;IAC7D,IAAMC,UAAU,GAAGd,SAAS,CAACe,MAAM,CAACH,MAAM,CAAC;IAC3C,IAAMI,UAAU,GAAGhB,SAAS,CAACe,MAAM,CAACF,MAAM,CAAC;IAE3C,OAAOC,UAAU,CAAChB,QAAQ,KAAKkB,UAAU,CAAClB,QAAQ;EACpD,CAAC;EAED;;;;;;;;;;EAUOE,0BAAM,GAAb,UAAcC,KAAgB;IAC5B,OAAOD,SAAS,CAACiB,MAAM,CAAC,IAAI,EAAEhB,KAAK,CAAC;EACtC,CAAC;EAED;;;;;EAKOD,0BAAM,GAAb;IACE;IACA,OAAO,IAAI,CAACF,QAAQ;EACtB,CAAC;EAED;;;;;EAKOE,0BAAM,GAAb;IACE,OAAO,IAAI,CAACF,QAAQ;EACtB,CAAC;EAED;;;;;EAKOE,4BAAQ,GAAf;IACE,OAAO,IAAI,CAACF,QAAQ;EACtB,CAAC;EAMDoB,sBAAWlB,4BAAK;IAJhB;;;;SAIA;MACE,OAAO,IAAI,CAACD,QAAQ;IACtB,CAAC;;;;EAODmB,sBAAWlB,6BAAM;IALjB;;;;;SAKA;MACE,OAAO,IAAI,CAACD,QAAQ,CAACoB,SAAS,CAACvB,cAAc,CAAC,QAAQ,CAAC,CAAC;IAC1D,CAAC;;;;EAODsB,sBAAWlB,+BAAQ;IALnB;;;;;SAKA;MACE,OAAO,IAAI,CAACD,QAAQ,CAACY,QAAQ,EAAE;IACjC,CAAC;;;;EACH,gBAAC;AAAD,CAAC,EAxHD;AAAaS","names":["unitToDecimals","solana","lamports","rawValue","SolNative","value","unit","parse","decimal","undefined","common_core_1","code","INVALID_ARGUMENT","message","fromDecimal","toString","valueA","valueB","solNativeA","create","solNativeB","equals","Object","toDecimal","exports"],"sources":["../../../src/dataTypes/SolNative/SolNative.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}