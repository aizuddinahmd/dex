{"ast":null,"code":"\"use strict\";\n\n/**\n * Copied (and remove obsolete functionalities) from https://github.com/solana-labs/solana-web3.js/blob/master/src/publickey.ts because\n * - We only care about address validation and conversion\n * - Resolving this dependency in UMD gives dependency errors\n */\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PublicKey = exports.PUBLIC_KEY_LENGTH = void 0;\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\nvar bs58_1 = __importDefault(require(\"bs58\"));\nvar buffer_1 = require(\"buffer\");\n/**\n * Size of public key in bytes\n */\nexports.PUBLIC_KEY_LENGTH = 32;\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\nvar PublicKey = /** @class */function () {\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  function PublicKey(value) {\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        var decoded = bs58_1.default.decode(value);\n        if (decoded.length !== exports.PUBLIC_KEY_LENGTH) {\n          throw new Error(\"Invalid public key input\");\n        }\n        this._bn = new bn_js_1.default(decoded);\n      } else {\n        this._bn = new bn_js_1.default(value);\n      }\n      if (this._bn.byteLength() > exports.PUBLIC_KEY_LENGTH) {\n        throw new Error(\"Invalid public key input\");\n      }\n    }\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n  PublicKey.prototype.toBase58 = function () {\n    return bs58_1.default.encode(this.toBytes());\n  };\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  PublicKey.prototype.toBytes = function () {\n    var buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  };\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  PublicKey.prototype.toBuffer = function () {\n    var b = this._bn.toArrayLike(buffer_1.Buffer);\n    if (b.length === exports.PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n    var zeroPad = buffer_1.Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  };\n  Object.defineProperty(PublicKey.prototype, Symbol.toStringTag, {\n    get: function () {\n      return \"PublicKey(\".concat(this.toString(), \")\");\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Return the base-58 representation of the public key\n   */\n  PublicKey.prototype.toString = function () {\n    return this.toBase58();\n  };\n  return PublicKey;\n}();\nexports.PublicKey = PublicKey;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;AAMA;AACA;AACA;AAEA;;;AAGaA,yBAAiB,GAAG,EAAE;AAenC,SAASC,eAAe,CAACC,KAAwB;EAC/C,OAAQA,KAAuB,CAACC,GAAG,KAAKC,SAAS;AACnD;AAEA;EAIE;;;;EAIA,mBAAYF,KAAwB;IAClC,IAAID,eAAe,CAACC,KAAK,CAAC,EAAE;MAC1B,IAAI,CAACC,GAAG,GAAGD,KAAK,CAACC,GAAG;KACrB,MAAM;MACL,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;QAC7B;QACA,IAAMG,OAAO,GAAGC,cAAI,CAACC,MAAM,CAACL,KAAK,CAAC;QAClC,IAAIG,OAAO,CAACG,MAAM,KAAKR,yBAAiB,EAAE;UACxC,MAAM,IAAIS,KAAK,CAAC,0BAA0B,CAAC;;QAE7C,IAAI,CAACN,GAAG,GAAG,IAAIO,eAAE,CAACL,OAAO,CAAC;OAC3B,MAAM;QACL,IAAI,CAACF,GAAG,GAAG,IAAIO,eAAE,CAACR,KAAK,CAAC;;MAG1B,IAAI,IAAI,CAACC,GAAG,CAACQ,UAAU,EAAE,GAAGX,yBAAiB,EAAE;QAC7C,MAAM,IAAIS,KAAK,CAAC,0BAA0B,CAAC;;;EAGjD;EAEA;;;EAGAG,4BAAQ,GAAR;IACE,OAAON,cAAI,CAACO,MAAM,CAAC,IAAI,CAACC,OAAO,EAAE,CAAC;EACpC,CAAC;EAED;;;EAGAF,2BAAO,GAAP;IACE,IAAMG,GAAG,GAAG,IAAI,CAACC,QAAQ,EAAE;IAC3B,OAAO,IAAIC,UAAU,CAACF,GAAG,CAACG,MAAM,EAAEH,GAAG,CAACI,UAAU,EAAEJ,GAAG,CAACJ,UAAU,CAAC;EACnE,CAAC;EAED;;;EAGAC,4BAAQ,GAAR;IACE,IAAMQ,CAAC,GAAG,IAAI,CAACjB,GAAG,CAACkB,WAAW,CAACC,eAAM,CAAC;IACtC,IAAIF,CAAC,CAACZ,MAAM,KAAKR,yBAAiB,EAAE;MAClC,OAAOoB,CAAC;;IAGV,IAAMG,OAAO,GAAGD,eAAM,CAACE,KAAK,CAAC,EAAE,CAAC;IAChCJ,CAAC,CAACK,IAAI,CAACF,OAAO,EAAE,EAAE,GAAGH,CAAC,CAACZ,MAAM,CAAC;IAC9B,OAAOe,OAAO;EAChB,CAAC;EAEDG,sBAAId,qBAACe,MAAM,CAACC,WAAY;SAAxB;MACE,OAAO,oBAAa,IAAI,CAACC,QAAQ,EAAE,MAAG;IACxC,CAAC;;;;EAED;;;EAGAjB,4BAAQ,GAAR;IACE,OAAO,IAAI,CAACkB,QAAQ,EAAE;EACxB,CAAC;EACH,gBAAC;AAAD,CAAC,EApED;AAAa9B","names":["exports","isPublicKeyData","value","_bn","undefined","decoded","bs58_1","decode","length","Error","bn_js_1","byteLength","PublicKey","encode","toBytes","buf","toBuffer","Uint8Array","buffer","byteOffset","b","toArrayLike","buffer_1","zeroPad","alloc","copy","Object","Symbol","toStringTag","toString","toBase58"],"sources":["../../src/utils/PublicKey.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}