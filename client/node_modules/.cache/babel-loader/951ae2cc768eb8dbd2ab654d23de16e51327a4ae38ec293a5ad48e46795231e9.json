{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AptosAddress = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar AccountAddress_1 = require(\"../../utils/AccountAddress\");\n/**\n * A representation of an address on the Aptos network.\n *\n * Use this class any time you work with an address.\n *\n * @category DataType\n */\nvar AptosAddress = /** @class */function () {\n  function AptosAddress(address) {\n    this.address = address;\n  }\n  /**\n   * Create a new instance of AptosAddress from any valid address input.\n   *\n   * @example `const address = AptosAddress.create(\"0xcd30fbbda98b2aed026772c13e5ed90a7f056b589ef9e78cd96415e1af12451c\")`\n   * @throws an error when a passed address is invalid.\n   */\n  AptosAddress.create = function (address) {\n    return address instanceof AptosAddress ? address : new AptosAddress(AptosAddress.parse(address));\n  };\n  AptosAddress.parse = function (address) {\n    try {\n      if (!AccountAddress_1.AccountAddress.isValid(address)) {\n        // Throw and catch locally to resolve the same way if it is invalid and if it cannot be parsed\n        throw new Error();\n      }\n      return address;\n    } catch (e) {\n      throw new common_core_1.CoreError({\n        code: common_core_1.CoreErrorCode.INVALID_ARGUMENT,\n        message: \"Invalid address provided: \".concat(address),\n        cause: e\n      });\n    }\n  };\n  /**\n   * Formats the address to hex format.\n   * Currently returns a string representing the address.\n   * @example address.format(); // \"0xcd30fbbda98b2aed026772c13e5ed90a7f056b589ef9e78cd96415e1af12451c\"\n   */\n  AptosAddress.prototype.format = function () {\n    // TODO: add `format` argument\n    return this.address;\n  };\n  /**\n   * Check the equality between two Aptos addresses\n   * @example `AptosAddress.equals(\"0xcd30fbbda98b2aed026772c13e5ed90a7f056b589ef9e78cd96415e1af12451c\", \"0xcd30fbbda98b2aed026772c13e5ed90a7f056b589ef9e78cd96415e1af12451c\")`\n   */\n  AptosAddress.equals = function (addressA, addressB) {\n    return AptosAddress.create(addressA).equals(addressB);\n  };\n  /**\n   * Checks the equality of the current address with another Aptos address.\n   * @example `address.equals(\"0xcd30fbbda98b2aed026772c13e5ed90a7f056b589ef9e78cd96415e1af12451c\")`\n   * @example `address.equals(AptosAddress.create(\"0xcd30fbbda98b2aed026772c13e5ed90a7f056b589ef9e78cd96415e1af12451c\"))`\n   */\n  AptosAddress.prototype.equals = function (address) {\n    return this.address === AptosAddress.create(address).address;\n  };\n  /**\n   * @returns a string representing the address.\n   * @example address.toString(); // \"0xcd30fbbda98b2aed026772c13e5ed90a7f056b589ef9e78cd96415e1af12451c\"\n   */\n  AptosAddress.prototype.toString = function () {\n    return this.address;\n  };\n  /**\n   * @returns a string representing the address.\n   * @example address.toJSON(); // \"0xcd30fbbda98b2aed026772c13e5ed90a7f056b589ef9e78cd96415e1af12451c\"\n   */\n  AptosAddress.prototype.toJSON = function () {\n    return this.address;\n  };\n  return AptosAddress;\n}();\nexports.AptosAddress = AptosAddress;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAWA;;;;;;;AAOA;EA4BE,sBAAmCA,OAAe;IAAf,YAAO,GAAPA,OAAO;EAAW;EA3BrD;;;;;;EAMcC,mBAAM,GAApB,UAAqBD,OAAwB;IAC3C,OAAOA,OAAO,YAAYC,YAAY,GAAGD,OAAO,GAAG,IAAIC,YAAY,CAACA,YAAY,CAACC,KAAK,CAACF,OAAO,CAAC,CAAC;EAClG,CAAC;EAEcC,kBAAK,GAApB,UAAqBD,OAAe;IAClC,IAAI;MACF,IAAI,CAACG,+BAAc,CAACC,OAAO,CAACJ,OAAO,CAAC,EAAE;QACpC;QACA,MAAM,IAAIK,KAAK,EAAE;;MAGnB,OAAOL,OAAO;KACf,CAAC,OAAOM,CAAC,EAAE;MACV,MAAM,IAAIC,uBAAS,CAAC;QAClBC,IAAI,EAAED,2BAAa,CAACE,gBAAgB;QACpCC,OAAO,EAAE,oCAA6BV,OAAO,CAAE;QAC/CW,KAAK,EAAEL;OACR,CAAC;;EAEN,CAAC;EAID;;;;;EAKOL,6BAAM,GAAb;IACE;IACA,OAAO,IAAI,CAACD,OAAO;EACrB,CAAC;EAED;;;;EAIOC,mBAAM,GAAb,UAAcW,QAAyB,EAAEC,QAAyB;IAChE,OAAOZ,YAAY,CAACa,MAAM,CAACF,QAAQ,CAAC,CAACG,MAAM,CAACF,QAAQ,CAAC;EACvD,CAAC;EAED;;;;;EAKOZ,6BAAM,GAAb,UAAcD,OAAwB;IACpC,OAAO,IAAI,CAACA,OAAO,KAAKC,YAAY,CAACa,MAAM,CAACd,OAAO,CAAC,CAACA,OAAO;EAC9D,CAAC;EAED;;;;EAIOC,+BAAQ,GAAf;IACE,OAAO,IAAI,CAACD,OAAO;EACrB,CAAC;EAED;;;;EAIOC,6BAAM,GAAb;IACE,OAAO,IAAI,CAACD,OAAO;EACrB,CAAC;EACH,mBAAC;AAAD,CAAC,EAxED;AAAagB","names":["address","AptosAddress","parse","AccountAddress_1","isValid","Error","e","common_core_1","code","INVALID_ARGUMENT","message","cause","addressA","addressB","create","equals","exports"],"sources":["../../../src/dataTypes/AptosAddress/AptosAddress.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}