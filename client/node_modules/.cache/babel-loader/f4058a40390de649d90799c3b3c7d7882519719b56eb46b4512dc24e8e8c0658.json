{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvmNftTrade = void 0;\nvar common_core_1 = require(\"@moralisweb3/common-core\");\nvar EvmAddress_1 = require(\"../EvmAddress\");\nvar EvmChain_1 = require(\"../EvmChain\");\nvar EvmNative_1 = require(\"../EvmNative\");\n/**\n * The EvmNftTrade is a representation of a published trade.\n *\n * Use this class any time you work with a transaction.\n *\n * @category DataType\n */\nvar EvmNftTrade = /** @class */function () {\n  function EvmNftTrade(data) {\n    this._data = EvmNftTrade.parse(data);\n  }\n  /**\n   * Create a new instance of EvmNftTrade from any valid transaction input\n   * @param data - the EvmNftTradeish type\n   * @example\n   * ```\n   * const trade = EvmNftTrade.create(data);\n   *```\n   */\n  EvmNftTrade.create = function (data) {\n    if (data instanceof EvmNftTrade) {\n      return data;\n    }\n    return new EvmNftTrade(data);\n  };\n  /**\n   * Check the equality between two Evm trades. It compares the `chain`, `blockNumber`, `transactionIndex` and `transactionHash`\n   * @param dataA - The first trade\n   * @param dataB - The second trade\n   * @example\n   * ```ts\n   * EvmNftTrade.equals(dataA, dataB)\n   * ```\n   * @returns true if the trades are equal, false otherwise\n   */\n  EvmNftTrade.equals = function (dataA, dataB) {\n    var transactionA = EvmNftTrade.create(dataA);\n    var transactionB = EvmNftTrade.create(dataB);\n    if (!transactionA._data.chain.equals(transactionB._data.chain)) {\n      return false;\n    }\n    if (!transactionA._data.blockNumber.equals(transactionB._data.blockNumber)) {\n      return false;\n    }\n    if (transactionA._data.transactionHash !== transactionB._data.transactionHash) {\n      return false;\n    }\n    if (transactionA._data.transactionIndex !== transactionB._data.transactionIndex) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Checks the equality of the current trade instance with another evm trade\n   * @param data - the trade to compare with\n   * @example\n   * ```ts\n   * trade.equals(data)\n   * ```\n   * @returns true if the trades are equal, false otherwise\n   */\n  EvmNftTrade.prototype.equals = function (data) {\n    return EvmNftTrade.equals(this, data);\n  };\n  /**\n   * @returns a JSON represention of the trade.\n   * @example\n   * ```\n   * trade.toJSON()\n   * ```\n   */\n  EvmNftTrade.prototype.toJSON = function () {\n    var data = this._data;\n    return __assign(__assign({}, data), {\n      chain: data.chain.format(),\n      sellerAddress: data.sellerAddress.format(),\n      buyerAddress: data.buyerAddress.format(),\n      marketplaceAddress: data.marketplaceAddress.format(),\n      tokenAddress: data.tokenAddress.format(),\n      priceTokenAddress: data.priceTokenAddress ? data.priceTokenAddress.format() : undefined,\n      blockNumber: data.blockNumber.toString(),\n      price: data.price.toString(),\n      blockTimestamp: data.blockTimestamp.toString()\n    });\n  };\n  /**\n   * @returns a JSON represention of the trade.\n   * @example\n   * ```\n   * trade.format()\n   * ```\n   */\n  EvmNftTrade.prototype.format = function () {\n    return this.toJSON();\n  };\n  Object.defineProperty(EvmNftTrade.prototype, \"result\", {\n    /**\n     * @returns all the data without casting it to JSON.\n     * @example trade.result\n     */\n    get: function () {\n      return this._data;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"sellerAddress\", {\n    /**\n     * @returns the trade seller address\n     * @example trade.sellerAddress // EvmAddress\n     */\n    get: function () {\n      return this._data.sellerAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"buyerAddress\", {\n    /**\n     * @returns the trade buyer address\n     * @example trade.buyerAddress // EvmAddress\n     */\n    get: function () {\n      return this._data.buyerAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"marketplaceAddress\", {\n    /**\n     * @returns the trade marketplace address\n     * @example trade.marketplaceAddress // EvmAddress\n     */\n    get: function () {\n      return this._data.marketplaceAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"tokenAddress\", {\n    /**\n     * @returns the trade token address\n     * @example trade.tokenAddress // EvmAddress\n     */\n    get: function () {\n      return this._data.tokenAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"priceTokenAddress\", {\n    /**\n     * @returns the trade price token address\n     * @example trade.priceTokenAddress // EvmAddress\n     */\n    get: function () {\n      return this._data.priceTokenAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"price\", {\n    /**\n     * @returns the trade price\n     * @example trade.price // EvmNative\n     */\n    get: function () {\n      return this._data.price;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"blockNumber\", {\n    /**\n     * @returns the trade block number\n     * @example trade.blockNumber // BigNumber\n     */\n    get: function () {\n      return this._data.blockNumber;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"transactionIndex\", {\n    /**\n     * @returns the trade transaction index\n     * @example trade.transactionIndex // 164\n     */\n    get: function () {\n      return this._data.transactionIndex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"transactionHash\", {\n    /**\n     * @returns the trade transaction hash\n     * @example trade.transactionHash // \"0x4de0bcef1450492bd5c2e7693cf644c40005868d0dcc8a7a50a80ef2efa88d1e\"\n     */\n    get: function () {\n      return this._data.transactionHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"chain\", {\n    /**\n     * @returns the trade chain\n     * @example trade.chain // EvmChain\n     */\n    get: function () {\n      return this._data.chain;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"tokenIds\", {\n    /**\n     * @returns the trade token Ids\n     * @example trade.tokenIds // [\"16404\"]\n     */\n    get: function () {\n      return this._data.tokenIds;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"blockHash\", {\n    /**\n     * @returns the trade block hash\n     * @example trade.blockHash // \"0x4de0bcef1450492bd5c2e7693cf644c40005868d0dcc8a7a50a80ef2efa88d1e\"\n     */\n    get: function () {\n      return this._data.blockHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EvmNftTrade.prototype, \"blockTimestamp\", {\n    /**\n     * @returns the trade block timestamp\n     * @example trade.blockTimestamp // Date\n     */\n    get: function () {\n      return this._data.blockTimestamp;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  EvmNftTrade.parse = function (data) {\n    return __assign(__assign({}, data), {\n      chain: EvmChain_1.EvmChain.create(data.chain),\n      sellerAddress: EvmAddress_1.EvmAddress.create(data.sellerAddress),\n      buyerAddress: EvmAddress_1.EvmAddress.create(data.buyerAddress),\n      marketplaceAddress: EvmAddress_1.EvmAddress.create(data.marketplaceAddress),\n      tokenAddress: EvmAddress_1.EvmAddress.create(data.tokenAddress),\n      priceTokenAddress: (0, common_core_1.maybe)(data.priceTokenAddress, EvmAddress_1.EvmAddress.create),\n      blockNumber: common_core_1.BigNumber.create(data.blockNumber),\n      price: EvmNative_1.EvmNative.create(data.price),\n      transactionIndex: +data.transactionIndex,\n      blockTimestamp: (0, common_core_1.dateInputToDate)(data.blockTimestamp)\n    });\n  };\n  return EvmNftTrade;\n}();\nexports.EvmNftTrade = EvmNftTrade;","map":{"version":3,"mappings":"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","names":["data","_data","EvmNftTrade","parse","dataA","dataB","transactionA","create","transactionB","chain","equals","blockNumber","transactionHash","transactionIndex","format","sellerAddress","buyerAddress","marketplaceAddress","tokenAddress","priceTokenAddress","undefined","toString","price","blockTimestamp","toJSON","Object","tokenIds","blockHash","EvmChain_1","EvmAddress_1","common_core_1","EvmNative_1","exports"],"sources":["../../../src/dataTypes/EvmNftTrade/EvmNftTrade.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}